#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require rosette/lib/destruct)



(require hydride/ir/hydride/definition)


(provide (all-defined-out))
;; ================================================================================
;;                                Hydride Scale Expression 
;; ================================================================================
(define (hydride:scale-expr prog scale-factor)
 (destruct prog
	[(reg id) (reg id) ]
	[(lit v) (lit (apply concat (for/list ([i (range scale-factor)]) v) ) )]
	[ (vector-two-input-swizzle_dsl v0 v1 num_2 prec_i_o num_4 num_5 num_6 num_7 num_8)
		(
		vector-two-input-swizzle_dsl
		(hydride:scale-expr v0 scale-factor)
		(hydride:scale-expr v1 scale-factor)
		num_2
		prec_i_o
		num_4
		num_5
		num_6
		num_7
		num_8
		)
	]
	[ (interleave-vectors_dsl v0 v1 size_i_o prec_i_o)
		(
		interleave-vectors_dsl
		(hydride:scale-expr v0 scale-factor)
		(hydride:scale-expr v1 scale-factor)
		(* scale-factor size_i_o)
		prec_i_o
		)
	]
	[ (interleave-vector_dsl v0 size_i_o prec_i_o)
		(
		interleave-vector_dsl
		(hydride:scale-expr v0 scale-factor)
		(* scale-factor size_i_o)
		prec_i_o
		)
	]
	[ (deinterleave-vector_dsl v0 size_i_o prec_i_o)
		(
		deinterleave-vector_dsl
		(hydride:scale-expr v0 scale-factor)
		(* scale-factor size_i_o)
		prec_i_o
		)
	]
	[ (llvm_shuffle_vectors_dsl v0 v1 num_2 prec_i_o v4 num_5)
		(
		llvm_shuffle_vectors_dsl
		(hydride:scale-expr v0 scale-factor)
		(hydride:scale-expr v1 scale-factor)
		num_2
		prec_i_o
		(hydride:scale-expr v4 scale-factor)
		num_5
		)
	]
	[ (_mm512_rem_epu32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epu32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epi16")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_irem_epi32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epi8")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epu16")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epu64")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epi16")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epi32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epu16")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epu64")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epu64")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epi16")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epi8")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epi32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epi64")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epi64")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epu32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epi32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epi64")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epu8")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epu32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_urem_epi32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_rem_epu8")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_rem_epu8")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epu16")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_irem_epi32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_rem_epi8")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_urem_epi32")
(_mm512_rem_epu32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_or_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm512_or_epi32")
(_mm512_or_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 0))
(displayln "Scaling case for _mm512_or_epi64")
(_mm512_or_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm256_or_epi32")
(_mm512_or_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 0))
(displayln "Scaling case for _mm_or_epi64")
(_mm512_or_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 0))
(displayln "Scaling case for _mm256_or_epi64")
(_mm512_or_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm_or_epi32")
(_mm512_or_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_min_epi8_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epi8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epu16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epu32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epu8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epu32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epi32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epu16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epi8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epi8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epu64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epi32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epi32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epi64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epu8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epi8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epu16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epu16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epu8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epu32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epu64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epi64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epi32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epu32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epu8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epi64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epi16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epu16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epu64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epu32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epu64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epu64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epi16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epi32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epi64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epi16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_min_epi16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epu64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epu8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epi16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epi32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epu16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epi64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_min_epi64")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_min_epi8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_min_epi16")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epi8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_min_epu32")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_min_epu8")
(_mm256_mask_min_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_xor_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm256_xor_epi32")
(_mm256_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm512_xor_epi32")
(_mm256_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 0))
(displayln "Scaling case for _mm256_xor_epi64")
(_mm256_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 0))
(displayln "Scaling case for _mm512_xor_epi64")
(_mm256_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm_xor_epi32")
(_mm256_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 0))
(displayln "Scaling case for _mm_xor_epi64")
(_mm256_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_add_si64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9)
		(cond 
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_add_si64")
(_mm_add_si64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_m_packssdw_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_o num_10 num_11 num_12 num_13 prec_i num_15 num_16 num_17)
		(cond 
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 16) (equal? num_7 32) (equal? num_8 16) (equal? prec_o 16) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _m_packssdw")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 8) (equal? num_7 64) (equal? num_8 32) (equal? prec_o 8) (equal? num_10 0) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 32) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_packus_epi16")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 8) (equal? num_7 32) (equal? num_8 16) (equal? prec_o 8) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_packs_pi16")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 8) (equal? num_7 32) (equal? num_8 16) (equal? prec_o 8) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _m_packsswb")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 8) (equal? num_7 64) (equal? num_8 32) (equal? prec_o 8) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 32) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_packs_epi16")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 16) (equal? num_7 32) (equal? num_8 16) (equal? prec_o 16) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_packs_pi32")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 32) (equal? prec_o 16) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 32) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_packs_epi32")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 8) (equal? num_7 32) (equal? num_8 16) (equal? prec_o 8) (equal? num_10 0) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _m_packuswb")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 32) (equal? prec_o 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 32) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_packus_epi32")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 8) (equal? num_7 32) (equal? num_8 16) (equal? prec_o 8) (equal? num_10 0) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_packs_pu16")
(_m_packssdw_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_o
num_10
num_11
num_12
num_13
prec_i
(* scale-factor num_15)
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_packus_epi32_dsl v0 vc_1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 num_10 num_11 num_12 size_i_o num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 0) (equal? num_20 2) (equal? num_21 16) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm512_maskz_packus_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 64) (equal? num_12 16) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 1) (equal? num_20 2) (equal? num_21 8) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm256_mask_packs_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 1) (equal? num_20 2) (equal? num_21 8) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm512_mask_packs_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 64) (equal? num_12 16) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 1) (equal? num_20 2) (equal? num_21 8) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm256_maskz_packs_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 64) (equal? num_12 32) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 1) (equal? num_20 2) (equal? num_21 16) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm256_maskz_packs_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 0) (equal? num_20 2) (equal? num_21 16) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm512_mask_packus_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 1) (equal? num_20 2) (equal? num_21 16) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm512_maskz_packs_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 0) (equal? num_20 2) (equal? num_21 8) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm512_maskz_packus_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 0) (equal? num_20 2) (equal? num_21 8) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm512_mask_packus_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 64) (equal? num_12 32) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 0) (equal? num_20 2) (equal? num_21 16) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm256_maskz_packus_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 1) (equal? num_20 2) (equal? num_21 16) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm512_mask_packs_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 128) (equal? num_14 128) (equal? num_15 0) (equal? num_16 128) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 1) (equal? num_20 2) (equal? num_21 8) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm512_maskz_packs_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 64) (equal? num_12 32) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 1) (equal? num_20 2) (equal? num_21 16) (equal? num_22 1) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm256_mask_packs_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 64) (equal? num_12 16) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 0) (equal? num_20 2) (equal? num_21 8) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm256_maskz_packus_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 16) (equal? num_10 128) (equal? num_11 64) (equal? num_12 16) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 0) (equal? num_20 2) (equal? num_21 8) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm256_mask_packus_epi16")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 128) (equal? num_11 64) (equal? num_12 32) (equal? size_i_o 64) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 0) (equal? num_20 2) (equal? num_21 16) (equal? num_22 0) (equal? num_23 128) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm256_mask_packus_epi32")
(_mm512_maskz_packus_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
(* scale-factor num_11)
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
num_23
num_24
num_25
num_26
num_27
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_xor_si256_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 256) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_xor_si256")
(_mm256_xor_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_xor_si64")
(_mm256_xor_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 128) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_xor_si128")
(_mm256_xor_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_pxor")
(_mm256_xor_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 512) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_xor_si512")
(_mm256_xor_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_rolv_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm_rolv_epi32")
(_mm_rolv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm512_rolv_epi64")
(_mm_rolv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm_rolv_epi64")
(_mm_rolv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm256_rolv_epi32")
(_mm_rolv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm512_rolv_epi32")
(_mm_rolv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm256_rolv_epi64")
(_mm_rolv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_maskz_srl_epi32_dsl v0 v1 vc_2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_srl_epi32")
(_mm_maskz_srl_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_srl_epi32")
(_mm_maskz_srl_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_srl_epi32")
(_mm_maskz_srl_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_srl_epi32")
(_mm_maskz_srl_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_srl_epi32")
(_mm_maskz_srl_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_srl_epi32")
(_mm_maskz_srl_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_avg_epu16_dsl v0 vc_1 vc_2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15 num_16)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm512_maskz_avg_epu16")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 8) (equal? num_12 1) (equal? num_13 8) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm256_maskz_avg_epu8")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_avg_epu16")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr vc_4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm256_maskz_avg_epu16")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 8) (equal? num_12 1) (equal? num_13 8) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_avg_epu8")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr vc_4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 8) (equal? num_12 1) (equal? num_13 8) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm512_maskz_avg_epu8")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm_maskz_avg_epu16")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_avg_epu16")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr vc_4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 8) (equal? num_12 1) (equal? num_13 8) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_avg_epu8")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr vc_4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 8) (equal? num_12 1) (equal? num_13 8) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm_maskz_avg_epu8")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_avg_epu16")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr vc_4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 8) (equal? num_12 1) (equal? num_13 8) (equal? num_14 -1) (equal? num_15 -1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_avg_epu8")
(_mm512_maskz_avg_epu16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr vc_4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_rolv_epi32_dsl v0 vc_1 vc_2 vc_3 v4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_rolv_epi32")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_rolv_epi64")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_rolv_epi32")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v4 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_rolv_epi64")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v4 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_rolv_epi32")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_rolv_epi64")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_rolv_epi64")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_rolv_epi64")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_rolv_epi32")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_rolv_epi64")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_rolv_epi32")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_rolv_epi32")
(_mm512_mask_rolv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_hadd_pi16_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17)
		(cond 
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 16) (equal? num_7 32) (equal? num_8 16) (equal? prec_i_o 16) (equal? num_10 -1) (equal? num_11 2) (equal? num_12 16) (equal? num_13 -1) (equal? num_14 16) (equal? num_15 48) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hadd_pi16")
(_mm_hadd_pi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 2) (equal? num_12 16) (equal? num_13 1) (equal? num_14 32) (equal? num_15 112) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hadds_epi16")
(_mm_hadd_pi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 -1) (equal? num_11 2) (equal? num_12 16) (equal? num_13 -1) (equal? num_14 32) (equal? num_15 112) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hadd_epi16")
(_mm_hadd_pi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 16) (equal? num_7 32) (equal? num_8 16) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 2) (equal? num_12 16) (equal? num_13 1) (equal? num_14 16) (equal? num_15 48) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hadds_pi16")
(_mm_hadd_pi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 32) (equal? num_7 64) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 -1) (equal? num_11 2) (equal? num_12 32) (equal? num_13 -1) (equal? num_14 32) (equal? num_15 96) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hadd_epi32")
(_mm_hadd_pi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_unpacklo_epi64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 256) (equal? prec_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 0) (equal? num_10 2) (equal? num_11 0))
(displayln "Scaling case for _mm512_unpacklo_epi64")
(_mm512_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 0) (equal? num_10 2) (equal? num_11 0))
(displayln "Scaling case for _mm256_unpacklo_epi64")
(_mm512_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 64) (equal? num_10 2) (equal? num_11 0))
(displayln "Scaling case for _mm256_unpackhi_epi64")
(_mm512_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 256) (equal? prec_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 64) (equal? num_10 2) (equal? num_11 0))
(displayln "Scaling case for _mm512_unpackhi_epi64")
(_mm512_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_cvtepi64_epi32_dsl v0 size_i_o num_2 num_3 num_4 prec_o prec_i num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 32) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_cvtepi64_epi32")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_cvtepi64_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 16) (equal? prec_o 8) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_cvtepi64_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? prec_i 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_cvtepi32_epi16")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 96))
(displayln "Scaling case for _mm_cvtepi64_epi16")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? prec_i 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_cvtepi32_epi16")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? prec_i 32) (equal? num_7 1) (equal? num_8 64))
(displayln "Scaling case for _mm_cvtepi32_epi16")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? prec_i 32) (equal? num_7 1) (equal? num_8 96))
(displayln "Scaling case for _mm_cvtepi32_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_cvtepi64_epi16")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 32) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 64))
(displayln "Scaling case for _mm_cvtepi64_epi32")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_cvtepi64_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? prec_i 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_cvtepi16_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 64))
(displayln "Scaling case for _mm256_cvtepi64_epi16")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? prec_i 32) (equal? num_7 1) (equal? num_8 64))
(displayln "Scaling case for _mm256_cvtepi32_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? prec_i 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_cvtepi32_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? prec_i 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_cvtepi16_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 32) (equal? prec_i 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_cvtepi64_epi32")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
prec_i
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? prec_i 16) (equal? num_7 1) (equal? num_8 64))
(displayln "Scaling case for _mm_cvtepi16_epi8")
(_mm256_cvtepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
prec_i
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_max_epu64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epu64")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epu64")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epi64")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epu8")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epi16")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epu32")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epu8")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epi64")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epi16")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _m_pmaxsw")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_max_pu8")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epi32")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epu16")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epu32")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epi64")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epi32")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epi8")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epi8")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epi8")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epu64")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_max_epu16")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epi32")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_max_pi16")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epu32")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_pmaxub")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_max_epi16")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epu8")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_max_epu16")
(_mm256_max_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_unpacklo_pi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9)
		(cond 
		[(and  (equal? size_i_o 8) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_unpacklo_pi32")
(_mm_unpacklo_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 8) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 0))
(displayln "Scaling case for _mm_unpackhi_pi32")
(_mm_unpacklo_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_unpacklo_epi64")
(_mm_unpacklo_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 64) (equal? num_9 0))
(displayln "Scaling case for _mm_unpackhi_epi64")
(_mm_unpacklo_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 8) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 0))
(displayln "Scaling case for _m_punpckhdq")
(_mm_unpacklo_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 8) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _m_punpckldq")
(_mm_unpacklo_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_srav_epi16_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 prec_i_o num_14 num_15)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? num_10 16) (equal? num_11 0) (equal? num_12 16) (equal? prec_i_o 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_srav_epi16")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 16) (equal? prec_i_o 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_srav_epi16")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? prec_i_o 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_srav_epi32")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? prec_i_o 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_srav_epi32")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? prec_i_o 64) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_srav_epi64")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? prec_i_o 64) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_srav_epi64")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? prec_i_o 64) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_srav_epi64")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 64) (equal? num_10 16) (equal? num_11 0) (equal? num_12 16) (equal? prec_i_o 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_srav_epi16")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 64) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? prec_i_o 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_srav_epi32")
(_mm512_srav_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
prec_i_o
num_14
num_15
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_unpacklo_pi8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10)
		(cond 
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 0) (equal? num_10 0))
(displayln "Scaling case for _mm_unpacklo_pi8")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 32) (equal? num_10 0))
(displayln "Scaling case for _mm_unpackhi_pi8")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 0) (equal? num_10 0))
(displayln "Scaling case for _mm_unpacklo_epi16")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 0) (equal? num_10 0))
(displayln "Scaling case for _mm_unpacklo_epi8")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 0) (equal? num_10 0))
(displayln "Scaling case for _m_punpcklwd")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 32) (equal? num_10 0))
(displayln "Scaling case for _m_punpckhwd")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 0) (equal? num_10 0))
(displayln "Scaling case for _mm_unpacklo_pi16")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 32) (equal? num_10 0))
(displayln "Scaling case for _m_punpckhbw")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 0) (equal? num_10 0))
(displayln "Scaling case for _m_punpcklbw")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 32) (equal? num_10 0))
(displayln "Scaling case for _mm_unpackhi_pi16")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm_unpackhi_epi16")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 2) (equal? num_9 0) (equal? num_10 0))
(displayln "Scaling case for _mm_unpacklo_epi32")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm_unpackhi_epi32")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm_unpackhi_epi8")
(_mm_unpacklo_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_mul_epu32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 0) (equal? num_15 0) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_mul_epu32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 0) (equal? num_15 0) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_mul_epu32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 0) (equal? num_15 0) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_mul_epu32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 1) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_mul_epi32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 1) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_mul_epi32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 0) (equal? num_15 0) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_mul_epu32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 1) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_mul_epi32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 0) (equal? num_15 0) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_mul_epu32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 1) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_mul_epi32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 1) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_mul_epi32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 0) (equal? num_15 0) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_mul_epu32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 1) (equal? num_16 1) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_mul_epi32")
(_mm_mask_mul_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mul_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 128) (equal? prec_i 32) (equal? prec_o 64) (equal? num_8 1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_mul_epi32")
(_mm256_mul_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i
prec_o
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i 32) (equal? prec_o 64) (equal? num_8 1) (equal? num_9 0) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_mul_epu32")
(_mm256_mul_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i
prec_o
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 256) (equal? prec_i 32) (equal? prec_o 64) (equal? num_8 1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_mul_epi32")
(_mm256_mul_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i
prec_o
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 256) (equal? prec_i 32) (equal? prec_o 64) (equal? num_8 1) (equal? num_9 0) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm512_mul_epu32")
(_mm256_mul_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i
prec_o
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? prec_i 32) (equal? prec_o 64) (equal? num_8 1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_mul_epi32")
(_mm256_mul_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i
prec_o
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 128) (equal? prec_i 32) (equal? prec_o 64) (equal? num_8 1) (equal? num_9 0) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm256_mul_epu32")
(_mm256_mul_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
prec_i
prec_o
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_testn_epi32_mask_dsl vc_0 v1 vc_2 vc_3 vc_4 v5 vc_6 v7 size_i_o num_9 num_10 num_11 prec_o num_13 prec_i num_15 num_16)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_testn_epi32_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_testn_epi64_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
num_11
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_9 4) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_test_epi8_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_9 4) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_testn_epi16_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_test_epi32_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
num_11
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_9 8) (equal? num_10 0) (equal? num_11 8) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_test_epi8_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_test_epi64_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
num_11
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_9 4) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_testn_epi32_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_9 4) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_test_epi32_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_testn_epi16_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_9 16) (equal? num_10 0) (equal? num_11 16) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_testn_epi8_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_9 8) (equal? num_10 0) (equal? num_11 8) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_testn_epi8_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_testn_epi64_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_testn_epi64_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
num_11
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_test_epi32_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_9 4) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_testn_epi8_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_9 4) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_test_epi16_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_test_epi16_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_test_epi64_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
num_11
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_9 8) (equal? num_10 0) (equal? num_11 8) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_testn_epi16_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_9 8) (equal? num_10 0) (equal? num_11 8) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_test_epi16_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_9 16) (equal? num_10 0) (equal? num_11 16) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_test_epi8_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 4) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_testn_epi32_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
num_11
prec_o
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_9 2) (equal? num_10 0) (equal? num_11 2) (equal? prec_o 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_test_epi64_mask")
(_mm256_mask_testn_epi32_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
(hydride:scale-expr v7 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_9)
num_10
(* scale-factor num_11)
prec_o
num_13
prec_i
num_15
num_16
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_rorv_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm_rorv_epi32")
(_mm_rorv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm512_rorv_epi32")
(_mm_rorv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm256_rorv_epi32")
(_mm_rorv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm_rorv_epi64")
(_mm_rorv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm256_rorv_epi64")
(_mm_rorv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 -1) (equal? num_10 0))
(displayln "Scaling case for _mm512_rorv_epi64")
(_mm_rorv_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mulhi_epu16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm512_mulhi_epu16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm256_mulhi_epu16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_mulhi_pu16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_mullo_epi32")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 1) (equal? num_9 64) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_mullo_epi32")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_mullo_epi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_mullo_epi64")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
(* scale-factor num_9)
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm512_mullo_epi32")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_mulhi_epi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _m_pmullw")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_mulhi_epu16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_mullo_pi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_mullo_epi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _m_pmulhw")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_mulhi_epi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0) (equal? num_9 128) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm256_mullo_epi64")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_mulhi_pi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_mulhi_epi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0) (equal? num_9 128) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm512_mullo_epi64")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _m_pmulhuw")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_mullo_epi16")
(_mm512_mulhi_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mul_su32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? size_i_o 8) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i 32) (equal? prec_o 64) (equal? num_8 0) (equal? num_9 0) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_mul_su32")
(_mm_mul_su32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i
prec_o
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_broadcast_i32x2_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i_o 32) (equal? num_6 2) (equal? num_7 32) (equal? num_8 0))
(displayln "Scaling case for _mm_broadcast_i32x2")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 32) (equal? num_6 2) (equal? num_7 32) (equal? num_8 0))
(displayln "Scaling case for _mm512_broadcast_i32x2")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 64) (equal? num_6 2) (equal? num_7 64) (equal? num_8 0))
(displayln "Scaling case for _mm512_broadcast_i64x2")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 64) (equal? num_6 4) (equal? num_7 64) (equal? num_8 0))
(displayln "Scaling case for _mm512_broadcast_i64x4")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 32) (equal? num_6 4) (equal? num_7 32) (equal? num_8 0))
(displayln "Scaling case for _mm256_broadcast_i32x4")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 32) (equal? num_6 4) (equal? num_7 32) (equal? num_8 0))
(displayln "Scaling case for _mm512_broadcast_i32x4")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 32) (equal? num_6 8) (equal? num_7 32) (equal? num_8 0))
(displayln "Scaling case for _mm512_broadcast_i32x8")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 64) (equal? num_6 2) (equal? num_7 64) (equal? num_8 0))
(displayln "Scaling case for _mm256_broadcast_i64x2")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 32) (equal? num_6 2) (equal? num_7 32) (equal? num_8 0))
(displayln "Scaling case for _mm256_broadcast_i32x2")
(_mm_broadcast_i32x2_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_ror_epi32_dsl vc_0 v1 vc_2 vc_3 v4 v5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_ror_epi32")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_ror_epi32")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? v4 (lit (bv #xbitvector 512)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_ror_epi64")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_ror_epi64")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 128) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_ror_epi32")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? v4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_ror_epi32")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? v4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_ror_epi32")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? v4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 16) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_ror_epi64")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 16) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_ror_epi64")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_ror_epi64")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? v4 (lit (bv #xbitvector 512)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 128) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_ror_epi32")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? v4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_ror_epi64")
(_mm_mask_ror_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_rol_epi32_dsl vc_0 v1 v2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_rol_epi32")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_rol_epi64")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 128) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_rol_epi32")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_rol_epi32")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_rol_epi32")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 128) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_rol_epi32")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 32) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_rol_epi64")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 16) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_rol_epi64")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_rol_epi64")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 16) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_rol_epi64")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_rol_epi32")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? vc_3 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_4 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 8) (equal? num_9 0) (equal? num_10 64) (equal? num_11 8) (equal? num_12 1) (equal? num_13 8) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 -1) (equal? num_18 0) (equal? num_19 0) (equal? num_20 1) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_rol_epi64")
(_mm_mask_rol_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_hadd_pi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? size_i_o 8) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 -1) (equal? num_9 0) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm_hadd_pi32")
(_mm_hadd_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_cmpeq_epu8_mask_dsl v0 vc_1 v2 v3 vc_4 vc_5 vc_6 size_i_o num_8 num_9 num_10 prec_o num_12 prec_i num_14 num_15)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpeq_epu8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epu8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpeq_epi16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epu32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpneq_epu16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm_mask_cmpeq_epu32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epi32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpeq_epi8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm_mask_cmpeq_epi32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm256_mask_cmpneq_epi64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epi64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpneq_epi32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epi8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpneq_epi16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epu64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpneq_epu8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpeq_epu32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epu16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpeq_epu16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpneq_epi8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm_mask_cmpneq_epu32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 6))
(displayln "Scaling case for _mm_mask_cmpneq_epi64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epi64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpeq_epu8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epu8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpneq_epu16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpneq_epi16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpneq_epu32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 6))
(displayln "Scaling case for _mm_mask_cmpneq_epu64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epu64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpeq_epu16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epi8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpeq_epi8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpneq_epu8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpeq_epi32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 6))
(displayln "Scaling case for _mm_mask_cmpeq_epu64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epi16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpneq_epi16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 6))
(displayln "Scaling case for _mm_mask_cmpeq_epi64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epi32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm256_mask_cmpneq_epu64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 8) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cmpneq_epi8_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm256_mask_cmpeq_epu64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 64) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm256_mask_cmpeq_epi64_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #b0 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 4))
(displayln "Scaling case for _mm_mask_cmpneq_epi32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 32) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epu32_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cmpeq_epi16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #b0 (bitvector 1)))) (equal? vc_5 (lit (bv #b1 (bitvector 1)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? prec_i 16) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cmpeq_epu16_mask")
(_mm256_mask_cmpeq_epu8_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
vc_6
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
prec_i
num_14
num_15
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_sll_epi64_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14)
		(cond 
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm512_sll_epi64")
(_mm512_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm_sll_epi64")
(_mm512_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm256_sll_epi64")
(_mm512_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_sign_pi16_dsl vc_0 v1 vc_2 vc_3 v4 size_i_o num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 16) (equal? num_6 16) (equal? num_7 0) (equal? num_8 16) (equal? num_9 16) (equal? num_10 1) (equal? num_11 16) (equal? prec_i_o 16) (equal? num_13 16) (equal? num_14 0))
(displayln "Scaling case for _mm_sign_pi16")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 16) (equal? num_6 16) (equal? num_7 0) (equal? num_8 16) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 32) (equal? num_13 32) (equal? num_14 0))
(displayln "Scaling case for _mm_sign_pi32")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 1) (equal? num_11 16) (equal? prec_i_o 16) (equal? num_13 16) (equal? num_14 0))
(displayln "Scaling case for _mm_sign_epi16")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 16) (equal? num_6 16) (equal? num_7 0) (equal? num_8 16) (equal? num_9 8) (equal? num_10 1) (equal? num_11 8) (equal? prec_i_o 8) (equal? num_13 8) (equal? num_14 0))
(displayln "Scaling case for _mm_sign_pi8")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? num_10 1) (equal? num_11 16) (equal? prec_i_o 16) (equal? num_13 16) (equal? num_14 0))
(displayln "Scaling case for _mm256_sign_epi16")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 32) (equal? num_13 32) (equal? num_14 0))
(displayln "Scaling case for _mm256_sign_epi32")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? num_10 1) (equal? num_11 8) (equal? prec_i_o 8) (equal? num_13 8) (equal? num_14 0))
(displayln "Scaling case for _mm256_sign_epi8")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? prec_i_o 32) (equal? num_13 32) (equal? num_14 0))
(displayln "Scaling case for _mm_sign_epi32")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 8) (equal? num_10 1) (equal? num_11 8) (equal? prec_i_o 8) (equal? num_13 8) (equal? num_14 0))
(displayln "Scaling case for _mm_sign_epi8")
(_mm_sign_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_sll_epi64_dsl v0 v1 vc_2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19)
		(cond 
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_mask_sll_epi64")
(_mm512_mask_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_mask_sll_epi64")
(_mm512_mask_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_maskz_sll_epi64")
(_mm512_mask_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_maskz_sll_epi64")
(_mm512_mask_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_maskz_sll_epi64")
(_mm512_mask_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_mask_sll_epi64")
(_mm512_mask_sll_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_add_pi8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_add_pi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_pi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_add_epi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_epu16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_add_epi32")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _m_paddb")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_adds_epu8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_adds_epi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _m_paddw")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_pu16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_add_epi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_adds_epu16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_epu8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_add_epi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_adds_epi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_pi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_add_epi64")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_add_pi32")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_add_epi32")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_adds_epu8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_add_epi64")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_add_epi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_epi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _m_paddsb")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _m_paddd")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_pu8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_add_epi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_add_epi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_add_pi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_paddusb")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_paddusw")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_adds_epi16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_add_epi64")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _m_paddsw")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_adds_epi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_adds_epi8")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_adds_epu16")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_add_epi32")
(_mm_add_pi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_srav_epi32_dsl v0 v1 vc_2 vc_3 vc_4 v5 vc_6 vc_7 v8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 prec_i_o num_19 num_20)
		(cond 
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_6 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_7 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 32) (equal? prec_i_o 32) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm512_mask_srav_epi32")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_6 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_7 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v8 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 32) (equal? prec_i_o 32) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm_maskz_srav_epi32")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_6 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_7 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 16) (equal? prec_i_o 16) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm512_mask_srav_epi16")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_6 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_7 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 16) (equal? prec_i_o 16) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm256_mask_srav_epi16")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_6 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_7 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? v8 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 16) (equal? prec_i_o 16) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm256_maskz_srav_epi16")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_6 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? prec_i_o 64) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm256_mask_srav_epi64")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_6 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_7 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? v8 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 16) (equal? prec_i_o 16) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm_maskz_srav_epi16")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_6 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v8 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? prec_i_o 64) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm256_maskz_srav_epi64")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_6 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v8 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? prec_i_o 64) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm512_maskz_srav_epi64")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_6 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_7 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? v8 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 16) (equal? prec_i_o 16) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm512_maskz_srav_epi16")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_6 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_7 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 32) (equal? prec_i_o 32) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm256_mask_srav_epi32")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_6 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_7 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 16) (equal? prec_i_o 16) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm_mask_srav_epi16")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_6 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_7 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v8 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 32) (equal? prec_i_o 32) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm512_maskz_srav_epi32")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_6 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v8 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? prec_i_o 64) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm_maskz_srav_epi64")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_6 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_7 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 32) (equal? prec_i_o 32) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm_mask_srav_epi32")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_6 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_7 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v8 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 32) (equal? prec_i_o 32) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm256_maskz_srav_epi32")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_6 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? prec_i_o 64) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm_mask_srav_epi64")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_6 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? prec_i_o 64) (equal? num_19 1) (equal? num_20 0))
(displayln "Scaling case for _mm512_mask_srav_epi64")
(_mm512_mask_srav_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
prec_i_o
num_19
num_20
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_hsub_pi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? size_i_o 8) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 -1) (equal? num_9 32) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_hsub_pi32")
(_mm_hsub_pi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mulhrs_epi16_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 -1) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_mulhrs_epi16")
(_mm256_mulhrs_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 -1) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm_mulhrs_pi16")
(_mm256_mulhrs_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 -1) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mulhrs_epi16")
(_mm256_mulhrs_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_1 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 -1) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm_mulhrs_epi16")
(_mm256_mulhrs_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_madd52hi_epu64_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 208) (equal? num_9 52) (equal? num_10 1) (equal? num_11 52) (equal? prec_i_o 64) (equal? num_13 -1) (equal? num_14 0) (equal? num_15 52) (equal? num_16 52) (equal? num_17 0) (equal? num_18 128) (equal? num_19 0) (equal? num_20 52) (equal? num_21 52) (equal? num_22 0))
(displayln "Scaling case for _mm256_mask_madd52hi_epu64")
(_mm256_mask_madd52hi_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 104) (equal? num_9 52) (equal? num_10 1) (equal? num_11 52) (equal? prec_i_o 64) (equal? num_13 -1) (equal? num_14 0) (equal? num_15 52) (equal? num_16 0) (equal? num_17 0) (equal? num_18 32) (equal? num_19 0) (equal? num_20 52) (equal? num_21 52) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_madd52lo_epu64")
(_mm256_mask_madd52hi_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
(* scale-factor num_18)
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 208) (equal? num_9 52) (equal? num_10 1) (equal? num_11 52) (equal? prec_i_o 64) (equal? num_13 -1) (equal? num_14 0) (equal? num_15 52) (equal? num_16 0) (equal? num_17 0) (equal? num_18 128) (equal? num_19 0) (equal? num_20 52) (equal? num_21 52) (equal? num_22 0))
(displayln "Scaling case for _mm256_mask_madd52lo_epu64")
(_mm256_mask_madd52hi_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 104) (equal? num_9 52) (equal? num_10 1) (equal? num_11 52) (equal? prec_i_o 64) (equal? num_13 -1) (equal? num_14 0) (equal? num_15 52) (equal? num_16 52) (equal? num_17 0) (equal? num_18 32) (equal? num_19 0) (equal? num_20 52) (equal? num_21 52) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_madd52hi_epu64")
(_mm256_mask_madd52hi_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
(* scale-factor num_18)
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 416) (equal? num_9 52) (equal? num_10 1) (equal? num_11 52) (equal? prec_i_o 64) (equal? num_13 -1) (equal? num_14 0) (equal? num_15 52) (equal? num_16 52) (equal? num_17 0) (equal? num_18 128) (equal? num_19 0) (equal? num_20 52) (equal? num_21 52) (equal? num_22 0))
(displayln "Scaling case for _mm512_mask_madd52hi_epu64")
(_mm256_mask_madd52hi_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 416) (equal? num_9 52) (equal? num_10 1) (equal? num_11 52) (equal? prec_i_o 64) (equal? num_13 -1) (equal? num_14 0) (equal? num_15 52) (equal? num_16 0) (equal? num_17 0) (equal? num_18 128) (equal? num_19 0) (equal? num_20 52) (equal? num_21 52) (equal? num_22 0))
(displayln "Scaling case for _mm512_mask_madd52lo_epu64")
(_mm256_mask_madd52hi_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_extracti64x4_epi64_dsl v0 vc_1 vc_2 v3 vc_4 v5 v6 num_7 num_8 num_9 num_10 num_11 size_i_o num_13 num_14 num_15 prec_i_o num_17 num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25)
		(cond 
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_sra_epi64_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 0))
(displayln "Scaling case for _mm512_sra_epi64")
(_mm512_sra_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_7 128) (equal? num_8 0) (equal? num_9 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 0))
(displayln "Scaling case for _mm256_sra_epi64")
(_mm512_sra_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 0) (equal? num_17 0))
(displayln "Scaling case for _mm_sra_epi64")
(_mm512_sra_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_maskz_max_epi32_dsl vc_0 v1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epi32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epi64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epi16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epi64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epu8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epu16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epi8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epu32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epi64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epu16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epi32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epu8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epi16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epu32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epu16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epi8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epi32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epi32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epu16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epu64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epi8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epi32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epi16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epu16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epu8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epu8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epu32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epi16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epu64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epu64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epi32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epi64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epu64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epu16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epi64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epi8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epu64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epu32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epi64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_max_epu32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epu8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_max_epi16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epu8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_max_epu32")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_max_epi8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epi16")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_max_epi8")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_max_epu64")
(_mm256_maskz_max_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_abs_epi16_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i_o 16) (equal? num_6 0))
(displayln "Scaling case for _mm_abs_epi16")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 16) (equal? num_6 0))
(displayln "Scaling case for _mm256_abs_epi16")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 128) (equal? num_2 128) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 8) (equal? num_6 0))
(displayln "Scaling case for _mm512_abs_epi8")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 16) (equal? num_6 0))
(displayln "Scaling case for _mm_abs_pi16")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 8) (equal? num_6 0))
(displayln "Scaling case for _mm_abs_pi8")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 32) (equal? num_6 0))
(displayln "Scaling case for _mm256_abs_epi32")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 64) (equal? num_6 0))
(displayln "Scaling case for _mm256_abs_epi64")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i_o 64) (equal? num_6 0))
(displayln "Scaling case for _mm_abs_epi64")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i_o 8) (equal? num_6 0))
(displayln "Scaling case for _mm_abs_epi8")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 128) (equal? num_2 128) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 32) (equal? num_6 0))
(displayln "Scaling case for _mm512_abs_epi32")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 32) (equal? num_6 0))
(displayln "Scaling case for _mm_abs_pi32")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i_o 32) (equal? num_6 0))
(displayln "Scaling case for _mm_abs_epi32")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 128) (equal? num_2 128) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 64) (equal? num_6 0))
(displayln "Scaling case for _mm512_abs_epi64")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 8) (equal? num_6 0))
(displayln "Scaling case for _mm256_abs_epi8")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[(and  (equal? size_i_o 128) (equal? num_2 128) (equal? num_3 0) (equal? num_4 128) (equal? prec_i_o 16) (equal? num_6 0))
(displayln "Scaling case for _mm512_abs_epi16")
(_mm_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_unpacklo_epi16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 0))
(displayln "Scaling case for _mm512_unpacklo_epi16")
(_mm512_unpacklo_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 2) (equal? num_9 0))
(displayln "Scaling case for _mm512_unpacklo_epi32")
(_mm512_unpacklo_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 0))
(displayln "Scaling case for _mm256_unpacklo_epi8")
(_mm512_unpacklo_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 0))
(displayln "Scaling case for _mm512_unpacklo_epi8")
(_mm512_unpacklo_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 0))
(displayln "Scaling case for _mm256_unpacklo_epi16")
(_mm512_unpacklo_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 2) (equal? num_9 0))
(displayln "Scaling case for _mm256_unpacklo_epi32")
(_mm512_unpacklo_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_fmadd_epi32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_4 128) (equal? num_5 0) (equal? num_6 128) (equal? prec_i_o 32) (equal? num_8 -1) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm512_fmadd_epi32")
(_mm512_fmadd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
(* scale-factor num_6)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_div_epi64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11 num_12)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epi64")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
(* scale-factor num_9)
num_10
(* scale-factor num_11)
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epu32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0) (equal? num_9 128) (equal? num_10 0) (equal? num_11 128) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epu64")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epi32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epi32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 1) (equal? num_9 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epi8")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epu64")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
(* scale-factor num_9)
num_10
(* scale-factor num_11)
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epu16")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epi16")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_udiv_epi32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 128) (equal? num_10 1) (equal? num_11 128) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epi64")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epu32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epu16")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epi32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0) (equal? num_9 16) (equal? num_10 0) (equal? num_11 16) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epu8")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_idiv_epi32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0) (equal? num_9 32) (equal? num_10 0) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epu16")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epi16")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0) (equal? num_9 16) (equal? num_10 0) (equal? num_11 16) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epu8")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 1) (equal? num_9 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epi8")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 1) (equal? num_9 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0))
(displayln "Scaling case for _mm512_div_epi8")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0) (equal? num_9 16) (equal? num_10 0) (equal? num_11 16) (equal? num_12 0))
(displayln "Scaling case for _mm_div_epu8")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epu32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 128) (equal? num_10 1) (equal? num_11 128) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epi64")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 1) (equal? num_9 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epi16")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0) (equal? num_9 128) (equal? num_10 0) (equal? num_11 128) (equal? num_12 0))
(displayln "Scaling case for _mm256_div_epu64")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_udiv_epi32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_idiv_epi32")
(_mm_div_epi64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_sllv_epi16_dsl v0 v1 vc_2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 prec_i_o num_17)
		(cond 
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_sllv_epi16")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_sllv_epi32")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_sllv_epi16")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_sllv_epi16")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_sllv_epi16")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_sllv_epi32")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_sllv_epi64")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_sllv_epi64")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_sllv_epi64")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_sllv_epi64")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_sllv_epi32")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_sllv_epi16")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_sllv_epi32")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_sllv_epi64")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_sllv_epi32")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_sllv_epi64")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_sllv_epi16")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_sllv_epi32")
(_mm256_mask_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_abs_epi16_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_abs_epi16")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_abs_epi8")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_abs_epi16")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_abs_epi64")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_abs_epi16")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_abs_epi16")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_abs_epi32")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_abs_epi64")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_abs_epi8")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_abs_epi8")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_abs_epi32")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_abs_epi64")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_abs_epi32")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_abs_epi8")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_abs_epi16")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_abs_epi32")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_abs_epi32")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_abs_epi64")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_abs_epi8")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_abs_epi64")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_abs_epi32")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_abs_epi64")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_abs_epi16")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_abs_epi8")
(_mm256_mask_abs_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_cmpgt_epi16_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmpgt_epi16")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_1 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _m_pcmpgtb")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_1 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmplt_epi8")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_1 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm256_cmpgt_epi8")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmpgt_epi32")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_1 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm256_cmpgt_epi64")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _m_pcmpgtd")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmplt_epi32")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _m_pcmpgtw")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm256_cmpgt_epi16")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmpgt_pi16")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_1 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmpgt_epi8")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmplt_epi16")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm256_cmpgt_epi32")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_1 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmpgt_pi8")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmpgt_pi32")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_1 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 0))
(displayln "Scaling case for _mm_cmpgt_epi64")
(_mm_cmpgt_epi16_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_unpackhi_epi16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm256_unpackhi_epi16")
(_mm256_unpackhi_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm256_unpackhi_epi32")
(_mm256_unpackhi_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 32) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm512_unpackhi_epi32")
(_mm256_unpackhi_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 16) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm512_unpackhi_epi16")
(_mm256_unpackhi_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm512_unpackhi_epi8")
(_mm256_unpackhi_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 8) (equal? num_8 2) (equal? num_9 64) (equal? num_10 0))
(displayln "Scaling case for _mm256_unpackhi_epi8")
(_mm256_unpackhi_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
prec_i_o
num_7
num_8
num_9
num_10
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_packs_epi16_dsl vc_0 v1 v2 v3 v4 num_5 num_6 num_7 num_8 num_9 num_10 num_11 num_12 size_i_o num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 32) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 1) (equal? num_20 2) (equal? num_21 8) (equal? num_22 1) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm_mask_packs_epi16")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? num_10 32) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 0) (equal? num_20 2) (equal? num_21 16) (equal? num_22 0) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm_maskz_packus_epi32")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? num_10 32) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 0) (equal? num_20 2) (equal? num_21 16) (equal? num_22 0) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm_mask_packus_epi32")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 32) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 1) (equal? num_20 2) (equal? num_21 8) (equal? num_22 1) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm_maskz_packs_epi16")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 32) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 0) (equal? num_20 2) (equal? num_21 8) (equal? num_22 0) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm_mask_packus_epi16")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 32) (equal? num_11 256) (equal? num_12 16) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 8) (equal? num_18 8) (equal? num_19 0) (equal? num_20 2) (equal? num_21 8) (equal? num_22 0) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 8) (equal? num_27 0))
(displayln "Scaling case for _mm_maskz_packus_epi16")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? num_10 32) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 1) (equal? num_20 2) (equal? num_21 16) (equal? num_22 1) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm_maskz_packs_epi32")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? num_10 32) (equal? num_11 256) (equal? num_12 32) (equal? size_i_o 32) (equal? num_14 32) (equal? num_15 0) (equal? num_16 32) (equal? prec_i_o 16) (equal? num_18 16) (equal? num_19 1) (equal? num_20 2) (equal? num_21 16) (equal? num_22 1) (equal? num_23 32) (equal? num_24 2) (equal? num_25 1) (equal? num_26 16) (equal? num_27 0))
(displayln "Scaling case for _mm_mask_packs_epi32")
(_mm_mask_packs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
(* scale-factor size_i_o)
(* scale-factor num_14)
num_15
(* scale-factor num_16)
prec_i_o
num_18
num_19
num_20
num_21
num_22
(* scale-factor num_23)
num_24
num_25
num_26
num_27
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_xor_epi32_dsl v0 vc_1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_xor_epi32")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_xor_epi64")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_xor_epi64")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_xor_epi64")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_xor_epi64")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_xor_epi32")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_xor_epi64")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_xor_epi32")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_xor_epi32")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_xor_epi32")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_xor_epi64")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_xor_epi32")
(_mm512_maskz_xor_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_sra_epi64_dsl vc_0 v1 v2 vc_3 vc_4 v5 vc_6 vc_7 v8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 prec_i_o num_20 num_21 num_22)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_7 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_sra_epi64")
(_mm_mask_sra_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_7 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? v8 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 0))
(displayln "Scaling case for _mm512_maskz_sra_epi64")
(_mm_mask_sra_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_7 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? v8 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 0))
(displayln "Scaling case for _mm256_maskz_sra_epi64")
(_mm_mask_sra_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_7 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 0))
(displayln "Scaling case for _mm512_mask_sra_epi64")
(_mm_mask_sra_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_7 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? v8 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 0))
(displayln "Scaling case for _mm_maskz_sra_epi64")
(_mm_mask_sra_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
v8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_7 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 0))
(displayln "Scaling case for _mm256_mask_sra_epi64")
(_mm_mask_sra_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
vc_6
vc_7
(hydride:scale-expr v8 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_or_epi64_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_or_epi64")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_or_epi64")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_or_epi64")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_or_epi32")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_or_epi64")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_or_epi32")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_or_epi64")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_or_epi32")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_or_epi32")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_or_epi32")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_or_epi32")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_or_epi64")
(_mm_mask_or_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_cmplt_epi32_mask_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_o num_9 prec_i num_11 num_12)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmple_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmplt_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmplt_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpge_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmple_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpge_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmple_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpge_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmple_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmpgt_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmplt_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmplt_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmplt_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmple_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmplt_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpgt_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmpge_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmplt_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpgt_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmple_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmplt_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmple_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpge_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpgt_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmple_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmplt_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpgt_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpgt_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmpgt_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmpgt_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmplt_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpgt_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmplt_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmplt_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmpgt_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmple_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmplt_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpgt_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmple_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpge_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpge_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmple_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmple_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epi16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpgt_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpge_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmpgt_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmple_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmple_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmple_epi32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpge_epi8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmplt_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmplt_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpge_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmpge_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpgt_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmpgt_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmplt_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_cmple_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpgt_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmpge_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmpgt_epi64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmplt_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmple_epu16_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_cmpge_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_cmpge_epu8_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_cmpge_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_cmpge_epu32_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
num_9
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? num_9 0) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_cmpge_epu64_mask")
(_mm512_cmplt_epi32_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_sllv_epi16_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 prec_i_o num_12)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_2 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_i_o 16) (equal? num_12 0))
(displayln "Scaling case for _mm512_sllv_epi16")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_sllv_epi64")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 0))
(displayln "Scaling case for _mm_sllv_epi64")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 0))
(displayln "Scaling case for _mm_sllv_epi32")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_sllv_epi32")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_i_o 16) (equal? num_12 0))
(displayln "Scaling case for _mm_sllv_epi16")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_sllv_epi32")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_sllv_epi64")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_i_o 16) (equal? num_12 0))
(displayln "Scaling case for _mm256_sllv_epi16")
(_mm512_sllv_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask3_fmadd_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_mask3_fmadd_epi32")
(_mm512_mask3_fmadd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_unpackhi_epi32_dsl vc_0 v1 v2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_unpackhi_epi32")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 0) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_unpacklo_epi32")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm_maskz_unpackhi_epi16")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_unpackhi_epi8")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm_maskz_unpackhi_epi32")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm_maskz_unpackhi_epi8")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 0) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm_maskz_unpacklo_epi8")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 0) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm_maskz_unpacklo_epi16")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_unpackhi_epi16")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 0) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_unpacklo_epi8")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 0) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm_maskz_unpacklo_epi32")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 0) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm_mask_unpacklo_epi16")
(_mm_mask_unpackhi_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_avg_epu8_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm_avg_epu8")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_1 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm_avg_epu16")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm512_avg_epu8")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_1 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 16) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _m_pavgw")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_1 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 16) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm_avg_pu16")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_1 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm512_avg_epu16")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm_avg_pu8")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? vc_1 (lit (bv #x0000000000000001 (bitvector 16)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm256_avg_epu16")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _m_pavgb")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x00000001 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000001 (bitvector 8)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 -1) (equal? num_10 -1) (equal? num_11 0))
(displayln "Scaling case for _mm256_avg_epu8")
(_mm_avg_epu8_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_maskz_mulhrs_epi16_dsl vc_0 v1 vc_2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 1) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 32) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm256_maskz_mulhrs_epi16")
(_mm256_maskz_mulhrs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 1) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 32) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm_mask_mulhrs_epi16")
(_mm256_maskz_mulhrs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 1) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 32) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm_maskz_mulhrs_epi16")
(_mm256_maskz_mulhrs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 1) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 32) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm512_mask_mulhrs_epi16")
(_mm256_maskz_mulhrs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 1) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 32) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm256_mask_mulhrs_epi16")
(_mm256_maskz_mulhrs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000e (bitvector 32)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000001 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 1) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 32) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm512_maskz_mulhrs_epi16")
(_mm256_maskz_mulhrs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_hadd_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 32) (equal? num_7 64) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 -1) (equal? num_11 32) (equal? num_12 2) (equal? num_13 -1) (equal? num_14 128) (equal? num_15 96) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_hadd_epi32")
(_mm256_hadd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 1) (equal? num_14 128) (equal? num_15 112) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_hadds_epi16")
(_mm256_hadd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 -1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 -1) (equal? num_14 128) (equal? num_15 112) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_hadd_epi16")
(_mm256_hadd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_and_si256_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 256) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_and_si256")
(_mm256_and_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 512) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_and_epi64")
(_mm256_and_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_and_si64")
(_mm256_and_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 512) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_and_si512")
(_mm256_and_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_pand")
(_mm256_and_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 128) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_and_si128")
(_mm256_and_si256_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_cmpeq_epu64_mask_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_o prec_i num_10 num_11)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm256_cmpeq_epu64_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 6))
(displayln "Scaling case for _mm_cmpeq_epu64_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epu8_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpeq_epi16_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epu32_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epi64_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpeq_epi32_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpeq_epu8_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epu16_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpeq_epi8_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epu64_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpeq_epu32_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epi8_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpeq_epu16_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpeq_epu8_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm_cmpeq_epi32_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 6))
(displayln "Scaling case for _mm_cmpeq_epi64_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm256_cmpeq_epi64_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpeq_epu16_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm_cmpeq_epu32_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epi16_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpeq_epi8_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpeq_epi32_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_1 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpeq_epi16_mask")
(_mm256_cmpeq_epu64_mask_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_cvtsepi16_epi8_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtsepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 112))
(displayln "Scaling case for _mm_maskz_cvtsepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtsepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 112))
(displayln "Scaling case for _mm_maskz_cvtusepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_mask_cvtusepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm256_mask_cvtsepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 16) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_maskz_cvtsepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtusepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtusepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtusepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 112))
(displayln "Scaling case for _mm_mask_cvtsepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_mask_cvtusepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtsepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_maskz_cvtsepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_maskz_cvtusepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_mask_cvtsepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtsepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm256_maskz_cvtusepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtsepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtsepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_maskz_cvtsepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtusepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtsepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtusepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_mask_cvtsepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_maskz_cvtsepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_mask_cvtusepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtsepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_maskz_cvtsepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtsepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 112))
(displayln "Scaling case for _mm_mask_cvtusepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_mask_cvtsepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_maskz_cvtusepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_maskz_cvtsepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_maskz_cvtusepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_maskz_cvtsepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm256_maskz_cvtsepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtusepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtsepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm512_maskz_cvtusepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm512_mask_cvtsepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_maskz_cvtusepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_maskz_cvtusepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_maskz_cvtsepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_mask_cvtusepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtusepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_mask_cvtsepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_maskz_cvtusepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_mask_cvtusepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_mask_cvtsepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_mask_cvtusepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_maskz_cvtusepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_maskz_cvtusepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_mask_cvtusepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_mask_cvtusepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_maskz_cvtusepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm512_mask_cvtusepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_mask_cvtusepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_maskz_cvtusepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_maskz_cvtsepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_mask_cvtusepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 32) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_mask_cvtsepi32_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm_mask_cvtsepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm512_maskz_cvtsepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtusepi32_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 96))
(displayln "Scaling case for _mm256_mask_cvtusepi64_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm512_mask_cvtusepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_mask_cvtsepi64_epi32")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 1) (equal? num_14 0))
(displayln "Scaling case for _mm256_maskz_cvtusepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 1) (equal? num_12 16) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm_mask_cvtsepi16_epi8")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_maskz_cvtsepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 1) (equal? num_12 64) (equal? num_13 1) (equal? num_14 64))
(displayln "Scaling case for _mm256_mask_cvtsepi64_epi16")
(_mm512_mask_cvtsepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
num_14
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mulhi_epu32_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000020 (bitvector 64)))) (equal? size_i_o 128) (equal? num_4 128) (equal? num_5 0) (equal? num_6 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm512_mulhi_epu32")
(_mm512_mulhi_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
(* scale-factor num_6)
prec_i_o
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000020 (bitvector 64)))) (equal? size_i_o 128) (equal? num_4 128) (equal? num_5 0) (equal? num_6 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 64) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm512_mulhi_epi32")
(_mm512_mulhi_epu32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
(* scale-factor num_6)
prec_i_o
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_sub_si64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9)
		(cond 
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_sub_si64")
(_mm_sub_si64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
num_9
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_extract_epi8_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 num_7 prec_o num_9 prec_i num_11 num_12)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x0008 (bitvector 4)))) (equal? size_i_o 1) (equal? num_4 4) (equal? num_5 0) (equal? num_6 4) (equal? num_7 4) (equal? prec_o 8) (equal? num_9 0) (equal? prec_i 128) (equal? num_11 0) (equal? num_12 24))
(displayln "Scaling case for _mm_extract_epi8")
(_mm256_extract_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
num_4
num_5
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_srai_epi16_dsl vc_0 v1 v2 vc_3 v4 vc_5 vc_6 v7 vc_8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 prec_i_o num_20 num_21 num_22 num_23 num_24)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_8 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_mask_srai_epi16")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? v7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_8 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_maskz_srai_epi64")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? v7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_8 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_maskz_srai_epi16")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_8 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_mask_srai_epi64")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_8 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_mask_srai_epi16")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? v7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_8 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_maskz_srai_epi32")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? v7 (lit (bv #xbitvector 512)))) (equal? vc_8 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_maskz_srai_epi16")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_8 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_mask_srai_epi64")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? v7 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_8 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_maskz_srai_epi64")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? v7 (lit (bv #xbitvector 512)))) (equal? vc_8 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_maskz_srai_epi64")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_8 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_mask_srai_epi32")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_8 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_mask_srai_epi32")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? v7 (lit (bv #xbitvector 512)))) (equal? vc_8 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_maskz_srai_epi32")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? v7 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_8 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_maskz_srai_epi16")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_6 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_8 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_mask_srai_epi16")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_6 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_8 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 64) (equal? num_14 1) (equal? num_15 64) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 64) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_mask_srai_epi64")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_8 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_mask_srai_epi32")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_6 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? v7 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_8 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 8) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 8) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_maskz_srai_epi32")
(_mm_mask_srai_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
vc_5
vc_6
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_sra_epi32_dsl v0 vc_1 vc_2 v3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 64) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_sra_epi32")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 16) (equal? num_11 0) (equal? num_12 16) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 0) (equal? num_17 16) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _m_psraw")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
(* scale-factor num_12)
num_13
prec_i_o
num_15
num_16
(* scale-factor num_17)
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 64) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_sra_epi16")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 32) (equal? num_11 0) (equal? num_12 16) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 16) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_sra_pi32")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
(* scale-factor num_12)
num_13
prec_i_o
num_15
num_16
(* scale-factor num_17)
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 32) (equal? num_11 0) (equal? num_12 16) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 16) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _m_psrad")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
(* scale-factor num_12)
num_13
prec_i_o
num_15
num_16
(* scale-factor num_17)
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_sra_epi16")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_sra_epi32")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_sra_epi32")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? num_10 16) (equal? num_11 0) (equal? num_12 64) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_sra_epi16")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 16) (equal? num_7 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 16) (equal? num_11 0) (equal? num_12 16) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 0) (equal? num_17 16) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_sra_pi16")
(_mm256_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
num_10
num_11
(* scale-factor num_12)
num_13
prec_i_o
num_15
num_16
(* scale-factor num_17)
num_18
num_19
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_m_psrawi_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _m_psrawi")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_srai_pi32")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 64) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_srai_epi32")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_srai_epi64")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 128) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_srai_epi32")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_srai_epi32")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_srai_pi16")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 64) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_srai_epi16")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 256) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_srai_epi16")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 64) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_srai_epi64")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _m_psradi")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_3 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 128) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 16) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_srai_epi16")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_7 8) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 8) (equal? num_13 0) (equal? prec_i_o 64) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_srai_epi64")
(_m_psrawi_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(* scale-factor size_i_o)
num_7
num_8
num_9
num_10
num_11
num_12
num_13
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_packs_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_o num_10 num_11 num_12 num_13 prec_i num_15 num_16 num_17)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 16) (equal? num_10 1) (equal? num_11 32) (equal? num_12 2) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm512_packs_epi32")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 2) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_packus_epi32")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 8) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 8) (equal? num_10 1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm512_packs_epi16")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 2) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm512_packus_epi32")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 8) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 8) (equal? num_10 0) (equal? num_11 16) (equal? num_12 2) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm512_packus_epi16")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 8) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 8) (equal? num_10 0) (equal? num_11 16) (equal? num_12 2) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_packus_epi16")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 8) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 8) (equal? num_10 1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_packs_epi16")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_o 16) (equal? num_10 1) (equal? num_11 32) (equal? num_12 2) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_packs_epi32")
(_mm512_packs_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_o
num_10
num_11
num_12
num_13
prec_i
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_rorv_epi32_dsl v0 vc_1 vc_2 vc_3 v4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_rorv_epi32")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_rorv_epi64")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_rorv_epi32")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_rorv_epi32")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_rorv_epi32")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_rorv_epi32")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_rorv_epi64")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v4 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_rorv_epi64")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_rorv_epi64")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? v4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_rorv_epi32")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_rorv_epi64")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? v4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 -1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_rorv_epi64")
(_mm256_mask_rorv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
v4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_srl_epi64_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_maskz_srl_epi64")
(_mm512_maskz_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_mask_srl_epi64")
(_mm512_maskz_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_mask_srl_epi64")
(_mm512_maskz_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_maskz_srl_epi64")
(_mm512_maskz_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_mask_srl_epi64")
(_mm512_maskz_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_maskz_srl_epi64")
(_mm512_maskz_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_rem_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_rem_epi32")
(_mm512_mask_rem_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_rem_epu32")
(_mm512_mask_rem_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_madd52hi_epu64_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_4 64) (equal? num_5 0) (equal? num_6 208) (equal? prec_i 52) (equal? prec_o 64) (equal? num_9 -1) (equal? num_10 0) (equal? num_11 52) (equal? num_12 52) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0))
(displayln "Scaling case for _mm256_madd52hi_epu64")
(_mm256_madd52hi_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
num_6
prec_i
prec_o
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 128) (equal? num_4 128) (equal? num_5 0) (equal? num_6 416) (equal? prec_i 52) (equal? prec_o 64) (equal? num_9 -1) (equal? num_10 0) (equal? num_11 52) (equal? num_12 52) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0))
(displayln "Scaling case for _mm512_madd52hi_epu64")
(_mm256_madd52hi_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
num_6
prec_i
prec_o
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_4 32) (equal? num_5 0) (equal? num_6 104) (equal? prec_i 52) (equal? prec_o 64) (equal? num_9 -1) (equal? num_10 0) (equal? num_11 52) (equal? num_12 52) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0))
(displayln "Scaling case for _mm_madd52hi_epu64")
(_mm256_madd52hi_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
num_6
prec_i
prec_o
num_9
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_4 32) (equal? num_5 0) (equal? num_6 104) (equal? prec_i 52) (equal? prec_o 64) (equal? num_9 -1) (equal? num_10 0) (equal? num_11 52) (equal? num_12 0) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0))
(displayln "Scaling case for _mm_madd52lo_epu64")
(_mm256_madd52hi_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
num_6
prec_i
prec_o
num_9
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_4 64) (equal? num_5 0) (equal? num_6 208) (equal? prec_i 52) (equal? prec_o 64) (equal? num_9 -1) (equal? num_10 0) (equal? num_11 52) (equal? num_12 0) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0))
(displayln "Scaling case for _mm256_madd52lo_epu64")
(_mm256_madd52hi_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
num_6
prec_i
prec_o
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 128) (equal? num_4 128) (equal? num_5 0) (equal? num_6 416) (equal? prec_i 52) (equal? prec_o 64) (equal? num_9 -1) (equal? num_10 0) (equal? num_11 52) (equal? num_12 0) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0))
(displayln "Scaling case for _mm512_madd52lo_epu64")
(_mm256_madd52hi_epu64_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_4)
num_5
num_6
prec_i
prec_o
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_min_epu16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epu16")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epi8")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epi32")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epi64")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_min_pi16")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epu16")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epi16")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epi8")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epu32")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epu64")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_pminub")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epi64")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_min_pu8")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epi16")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epu32")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epu8")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epi64")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epi16")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epu8")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epi32")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epi32")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_min_epu64")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epu32")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epu16")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_min_epu64")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _m_pminsw")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epu8")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_min_epi8")
(_mm_min_epu16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_andnot_si128_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 128) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_andnot_si128")
(_mm_andnot_si128_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_andnot_si64")
(_mm_andnot_si128_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_pandn")
(_mm_andnot_si128_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 512) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_andnot_epi64")
(_mm_andnot_si128_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 256) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_andnot_si256")
(_mm_andnot_si128_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 512) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_andnot_si512")
(_mm_andnot_si128_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_maskz_cvtepi16_epi8_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_cvtepi16_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_cvtepi32_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_cvtepi32_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 32) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm_maskz_cvtepi32_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm_mask_cvtepi64_epi32")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_cvtepi64_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_cvtepi16_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 32) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm_mask_cvtepi32_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 64) (equal? num_12 1) (equal? num_13 96))
(displayln "Scaling case for _mm_maskz_cvtepi64_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 32) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm256_mask_cvtepi32_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_cvtepi32_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_cvtepi64_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 32) (equal? num_12 1) (equal? num_13 96))
(displayln "Scaling case for _mm_maskz_cvtepi32_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 32) (equal? num_12 1) (equal? num_13 96))
(displayln "Scaling case for _mm_mask_cvtepi32_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_cvtepi64_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_cvtepi64_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 32) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm256_maskz_cvtepi32_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm256_mask_cvtepi64_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_cvtepi64_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 16) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm_maskz_cvtepi16_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_cvtepi16_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 64) (equal? num_12 1) (equal? num_13 96))
(displayln "Scaling case for _mm_mask_cvtepi64_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_cvtepi64_epi32")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm_maskz_cvtepi64_epi32")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_cvtepi64_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_cvtepi64_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_cvtepi32_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_cvtepi32_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_cvtepi64_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_cvtepi64_epi32")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 32) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_cvtepi32_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_cvtepi16_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_cvtepi64_epi32")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm256_maskz_cvtepi64_epi16")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_cvtepi64_epi32")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 16) (equal? num_12 1) (equal? num_13 64))
(displayln "Scaling case for _mm_mask_cvtepi16_epi8")
(_mm256_maskz_cvtepi16_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_test_epi64_mask_dsl vc_0 v1 vc_2 vc_3 v4 size_i_o num_6 num_7 num_8 prec_o prec_i num_11 num_12)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_test_epi64_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_6 4) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_test_epi16_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_6 4) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_test_epi8_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_6 4) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_testn_epi32_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_testn_epi64_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_6 8) (equal? num_7 0) (equal? num_8 8) (equal? prec_o 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_testn_epi8_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_test_epi32_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_test_epi16_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_6 8) (equal? num_7 0) (equal? num_8 8) (equal? prec_o 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_test_epi16_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_6 4) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_testn_epi16_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 8) (equal? num_6 8) (equal? num_7 0) (equal? num_8 8) (equal? prec_o 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_testn_epi16_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 4) (equal? num_6 4) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_testn_epi8_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 16) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm_testn_epi16_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 16) (equal? num_6 16) (equal? num_7 0) (equal? num_8 16) (equal? prec_o 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_testn_epi8_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm_testn_epi32_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_testn_epi64_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_test_epi32_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_6 4) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_test_epi32_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_6 16) (equal? num_7 0) (equal? num_8 16) (equal? prec_o 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_test_epi8_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 4) (equal? prec_o 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 4))
(displayln "Scaling case for _mm256_test_epi64_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 6))
(displayln "Scaling case for _mm_testn_epi64_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
num_8
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm512_test_epi64_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_6 8) (equal? num_7 0) (equal? num_8 8) (equal? prec_o 1) (equal? prec_i 8) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_test_epi8_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? size_i_o 2) (equal? num_6 2) (equal? num_7 0) (equal? num_8 2) (equal? prec_o 1) (equal? prec_i 32) (equal? num_11 1) (equal? num_12 0))
(displayln "Scaling case for _mm256_testn_epi32_mask")
(_mm_test_epi64_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_o
prec_i
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_cvtepu8_epi32_dsl v0 size_i_o num_2 num_3 num_4 prec_i prec_o num_7 num_8 num_9)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepu8_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepu8_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 16) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepi16_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepu8_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 32) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepu32_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 16) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepi16_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 16) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepu16_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 16) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepu8_epi16")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 16) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepu16_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepi8_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 16) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepi8_epi16")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepi8_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 16) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepu8_epi16")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 32) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepu32_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepu8_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 32) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepi32_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 16) (equal? prec_i 8) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepi8_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 16) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepu16_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepi8_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 16) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepu16_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 16) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepi16_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 32) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepi32_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 16) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepu16_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 16) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepi8_epi16")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 16) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepi16_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 16) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepi8_epi16")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepi8_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 16) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepi16_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 32) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepi32_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 16) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepi16_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 8) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtepi8_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 16) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepu8_epi16")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 16) (equal? prec_i 8) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm_cvtepu8_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 32) (equal? prec_o 64) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepu32_epi64")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_i 8) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepu8_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_i
prec_o
num_7
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_i 16) (equal? prec_o 32) (equal? num_7 1) (equal? num_8 0) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtepu16_epi32")
(_mm512_cvtepu8_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i
prec_o
num_7
num_8
num_9
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_cmpgt_epu64_mask_dsl v0 vc_1 vc_2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 prec_o num_12 num_13 prec_i num_15 num_16)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmpgt_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmpgt_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmple_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmplt_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmpgt_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmplt_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmplt_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmplt_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpge_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmplt_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmplt_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpgt_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmplt_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmple_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmplt_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmplt_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmpge_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpge_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmpgt_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpgt_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpgt_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpgt_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmplt_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpgt_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmple_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmplt_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmple_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpgt_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmplt_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpge_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmplt_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmple_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpge_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpge_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmple_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpge_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmple_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmple_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpgt_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmpge_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpgt_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmpge_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmpge_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpge_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpge_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpgt_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmple_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm256_mask_cmple_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmple_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmpgt_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmple_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmpgt_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmplt_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpge_epi8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmple_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmple_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpge_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmplt_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 4))
(displayln "Scaling case for _mm_mask_cmpge_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmple_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 8) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmplt_epu8_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmple_epi64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? size_i_o 8) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmple_epi16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 64) (equal? num_15 1) (equal? num_16 6))
(displayln "Scaling case for _mm_mask_cmpge_epu64_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
num_10
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 16) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_cmpgt_epu16_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #b0 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? size_i_o 4) (equal? num_8 4) (equal? num_9 0) (equal? num_10 4) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 0) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_cmpge_epu32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmpgt_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #b0 (bitvector 1)))) (equal? vc_3 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000 (bitvector 8)))) (equal? size_i_o 2) (equal? num_8 2) (equal? num_9 0) (equal? num_10 2) (equal? prec_o 1) (equal? num_12 1) (equal? num_13 1) (equal? prec_i 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_cmplt_epi32_mask")
(_mm256_mask_cmpgt_epu64_mask_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
vc_3
vc_4
(hydride:scale-expr v5 scale-factor)
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
prec_o
num_12
num_13
prec_i
num_15
num_16
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_maskz_unpacklo_epi64_dsl v0 vc_1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 0) (equal? num_18 64) (equal? num_19 0) (equal? num_20 0) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm_maskz_unpacklo_epi64")
(_mm_maskz_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
(* scale-factor num_9)
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 64) (equal? num_19 0) (equal? num_20 64) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm_maskz_unpackhi_epi64")
(_mm_maskz_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
(* scale-factor num_9)
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 0) (equal? num_18 64) (equal? num_19 0) (equal? num_20 0) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm_mask_unpacklo_epi64")
(_mm_maskz_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
(* scale-factor num_9)
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? num_5 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 32) (equal? size_i_o 32) (equal? num_11 32) (equal? num_12 0) (equal? num_13 32) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 64) (equal? num_19 0) (equal? num_20 64) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm_mask_unpackhi_epi64")
(_mm_maskz_unpacklo_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
(* scale-factor num_9)
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_unpackhi_epi64_dsl vc_0 v1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 64) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 64) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm512_maskz_unpackhi_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 64) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm256_mask_unpacklo_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 64) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm512_maskz_unpacklo_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 64) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm512_mask_unpacklo_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 256) (equal? num_9 64) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 64) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm512_mask_unpackhi_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 64) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 64) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm256_maskz_unpackhi_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 64) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 0) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm256_maskz_unpacklo_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 128) (equal? num_9 64) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 64) (equal? num_15 64) (equal? num_16 64) (equal? num_17 64) (equal? num_18 0) (equal? num_19 64) (equal? num_20 2) (equal? num_21 1) (equal? num_22 64) (equal? num_23 0))
(displayln "Scaling case for _mm256_mask_unpackhi_epi64")
(_mm512_maskz_unpackhi_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
(* scale-factor num_6)
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_div_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 64) (equal? num_15 1) (equal? num_16 64) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_div_epi32")
(_mm512_mask_div_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_div_epu32")
(_mm512_mask_div_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_maskz_sll_epi32_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_sll_epi32")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_srl_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_sll_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_sll_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_sll_epi32")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_sll_epi32")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_sll_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_sll_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_srl_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_srl_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_sll_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_sll_epi32")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_srl_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_sll_epi32")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_srl_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_sll_epi32")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_srl_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 64) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 64) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_sll_epi16")
(_mm_maskz_sll_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_and_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm512_and_epi32")
(_mm512_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_dpbusd_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o prec_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 8) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 16) (equal? num_19 0) (equal? num_20 0))
(displayln "Scaling case for _mm256_mask_dpbusd_epi32")
(_mm256_mask_dpbusd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 8) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 16) (equal? num_19 0) (equal? num_20 0))
(displayln "Scaling case for _mm256_mask_dpbusds_epi32")
(_mm256_mask_dpbusd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 8) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 16) (equal? num_19 0) (equal? num_20 0))
(displayln "Scaling case for _mm512_mask_dpbusd_epi32")
(_mm256_mask_dpbusd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 8) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 16) (equal? num_19 0) (equal? num_20 0))
(displayln "Scaling case for _mm_mask_dpbusds_epi32")
(_mm256_mask_dpbusd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 8) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 16) (equal? num_19 0) (equal? num_20 0))
(displayln "Scaling case for _mm512_mask_dpbusds_epi32")
(_mm256_mask_dpbusd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 8) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 16) (equal? num_19 0) (equal? num_20 0))
(displayln "Scaling case for _mm_mask_dpbusd_epi32")
(_mm256_mask_dpbusd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_m_pslld_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 32) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _m_pslld")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_srl_epi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_sll_epi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_sll_epi32")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _m_psrlw")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_sll_epi32")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_srl_pi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_srl_epi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 32) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_sll_pi32")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_sll_epi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_srl_epi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_sll_pi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _m_psllw")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 32) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_sll_epi32")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_sll_epi16")
(_m_pslld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_andnot_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 0))
(displayln "Scaling case for _mm512_andnot_epi32")
(_mm512_andnot_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_mulhi_epu32_dsl v0 vc_1 vc_2 v3 v4 v5 size_i_o num_7 num_8 num_9 prec_i_o num_11 num_12 num_13 num_14 num_15 num_16)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000020 (bitvector 64)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? prec_i_o 32) (equal? num_11 1) (equal? num_12 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_mulhi_epu32")
(_mm512_mask_mulhi_epu32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
prec_i_o
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000020 (bitvector 64)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 128) (equal? prec_i_o 32) (equal? num_11 1) (equal? num_12 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_mulhi_epi32")
(_mm512_mask_mulhi_epu32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
(* scale-factor num_9)
prec_i_o
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_subs_epi8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_subs_epi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_epu16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_pu16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _m_psubb")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm512_subs_epi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_psubusw")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_subs_epu16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_sub_epi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _m_psubsw")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_sub_pi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_sub_epi64")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_epi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_sub_epi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_sub_epi32")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_sub_epi32")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_sub_epi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_subs_epu8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _m_psubd")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_sub_epi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_subs_epu8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_sub_pi32")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_subs_epi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _m_psubw")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_sub_epi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _m_psubsb")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_sub_pi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_pi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_epu8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm512_subr_epi32")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 8) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_epi8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm256_subs_epi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm_sub_epi64")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_psubusb")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 8) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_pu8")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 16) (equal? num_7 1) (equal? num_8 0))
(displayln "Scaling case for _mm_subs_pi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_subs_epu16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 64) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_sub_epi64")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 16) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_sub_epi16")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 32) (equal? num_7 -1) (equal? num_8 0))
(displayln "Scaling case for _mm256_sub_epi32")
(_mm512_subs_epi8_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_rol_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm256_rol_epi32")
(_mm256_rol_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm_rol_epi64")
(_mm256_rol_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm_rol_epi32")
(_mm256_rol_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm256_rol_epi64")
(_mm256_rol_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm512_rol_epi32")
(_mm256_rol_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm512_rol_epi64")
(_mm256_rol_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_m_from_int_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7)
		(cond 
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 8))
(displayln "Scaling case for _m_from_int")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
(* scale-factor num_7)
)
]
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm_cvtsi64_si32")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 64))
(displayln "Scaling case for _mm_move_epi64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
num_2
num_3
num_4
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm_movepi64_pi64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 96))
(displayln "Scaling case for _mm_cvtsi32_si128")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _m_from_int64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 16))
(displayln "Scaling case for _mm_cvtsi64_si128")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
(* scale-factor num_7)
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm_cvtm64_si64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm_cvtsi128_si32")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm512_cvtsi512_si32")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 8))
(displayln "Scaling case for _mm_cvtsi32_si64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
(* scale-factor num_7)
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm_cvtsi128_si64x")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 16))
(displayln "Scaling case for _mm_movpi64_epi64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
(* scale-factor num_7)
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 16))
(displayln "Scaling case for _mm_cvtsi64x_si128")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
(* scale-factor num_7)
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm_cvtsi128_si64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm_cvtsi64_m64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 16) (equal? num_2 16) (equal? num_3 0) (equal? num_4 16) (equal? prec_i_o 64) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _m_to_int64")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _m_to_int")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[(and  (equal? size_i_o 8) (equal? num_2 8) (equal? num_3 0) (equal? num_4 8) (equal? prec_i_o 32) (equal? num_6 0) (equal? num_7 0))
(displayln "Scaling case for _mm256_cvtsi256_si32")
(_m_from_int_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_i_o
num_6
num_7
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_m_psrld_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 32) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _m_psrld")
(_m_psrld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_srl_epi32")
(_m_psrld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? num_8 32) (equal? num_9 0) (equal? num_10 16) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 16) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_srl_pi32")
(_m_psrld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
(* scale-factor num_10)
num_11
prec_i_o
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 32) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_srl_epi32")
(_m_psrld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_srl_epi32")
(_m_psrld_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_fmadd_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 64) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_mask_fmadd_epi32")
(_mm512_mask_fmadd_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_srli_epi16_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17 num_18)
		(cond 
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 256) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_srli_epi16")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_srli_epi64")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_srli_epi16")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _m_psrldi")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm256_srli_epi32")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm256_srli_epi16")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_srli_pi32")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _m_psrlwi")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_srli_epi32")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm256_srli_epi64")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_srli_pi16")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_srli_epi64")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_srli_epi32")
(_mm512_srli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_cmpneq_epu8_mask_dsl vc_0 v1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_o prec_i num_10 num_11)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epu8_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpneq_epu8_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpneq_epi16_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpneq_epi8_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm_cmpneq_epi32_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpneq_epu32_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epu64_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpneq_epi32_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epi32_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpneq_epi8_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpneq_epu8_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 6))
(displayln "Scaling case for _mm_cmpneq_epi64_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_o 1) (equal? prec_i 8) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epi8_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm256_cmpneq_epi64_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epu16_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpneq_epi16_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epi64_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_cmpneq_epu16_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_cmpneq_epu16_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 2) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 6))
(displayln "Scaling case for _mm_cmpneq_epu64_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm_cmpneq_epu32_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 8) (equal? prec_o 1) (equal? prec_i 16) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epi16_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 32) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_cmpneq_epu32_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_o
prec_i
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b0 (bitvector 1)))) (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 4) (equal? prec_o 1) (equal? prec_i 64) (equal? num_10 1) (equal? num_11 4))
(displayln "Scaling case for _mm256_cmpneq_epu64_mask")
(_mm512_cmpneq_epu8_mask_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
prec_o
prec_i
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_srlv_epi64_dsl vc_0 v1 v2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 prec_i_o num_17)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_srlv_epi64")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_srlv_epi16")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_srlv_epi32")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm_maskz_srlv_epi64")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_srlv_epi32")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_srlv_epi16")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm256_mask_srlv_epi64")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_srlv_epi32")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_srlv_epi16")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_srlv_epi16")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_srlv_epi16")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_srlv_epi32")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm_mask_srlv_epi64")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm512_mask_srlv_epi32")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_srlv_epi64")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 16) (equal? prec_i_o 16) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_srlv_epi16")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 32) (equal? prec_i_o 32) (equal? num_17 0))
(displayln "Scaling case for _mm256_maskz_srlv_epi32")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 64) (equal? prec_i_o 64) (equal? num_17 0))
(displayln "Scaling case for _mm512_maskz_srlv_epi64")
(_mm512_mask_srlv_epi64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
prec_i_o
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_mulhi_epi16_dsl vc_0 v1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_maskz_mulhi_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_mullo_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_mulhi_epu16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_mullo_epi32")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_maskz_mulhi_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_mullo_epi32")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_maskz_mullo_epi32")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_mulhi_epu16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_maskz_mullo_epi64")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_mullo_epi64")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_mulhi_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm256_maskz_mullo_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_maskz_mullo_epi64")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_maskz_mullo_epi32")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_maskz_mulhi_epu16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_mullo_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_maskz_mullo_epi64")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_mulhi_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_maskz_mulhi_epu16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_maskz_mullo_epi32")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm512_maskz_mullo_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0) (equal? num_13 0) (equal? num_14 64) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_mullo_epi32")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_mullo_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_mullo_epi64")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
(* scale-factor num_14)
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_mask_mulhi_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0) (equal? num_13 0) (equal? num_14 128) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_mask_mullo_epi64")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_maskz_mullo_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm512_maskz_mulhi_epu16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 0))
(displayln "Scaling case for _mm_maskz_mulhi_epi16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 16) (equal? num_13 0) (equal? num_14 32) (equal? num_15 0) (equal? num_16 0))
(displayln "Scaling case for _mm256_mask_mulhi_epu16")
(_mm512_maskz_mulhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_cvtusepi64_epi32_dsl v0 size_i_o num_2 num_3 num_4 prec_o num_6 prec_i num_8 num_9)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 32) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtusepi64_epi32")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 32) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtusepi64_epi32")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm256_cvtusepi32_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 96))
(displayln "Scaling case for _mm256_cvtsepi64_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 32) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtsepi64_epi32")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtusepi64_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm512_cvtsepi64_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm256_cvtsepi64_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm256_cvtsepi32_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm_cvtusepi16_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtusepi16_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 16) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 112))
(displayln "Scaling case for _mm_cvtsepi64_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm512_cvtusepi64_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? num_6 1) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtsepi32_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 16) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 112))
(displayln "Scaling case for _mm_cvtusepi64_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtusepi16_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 96))
(displayln "Scaling case for _mm_cvtsepi32_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 32) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtsepi64_epi32")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 96))
(displayln "Scaling case for _mm_cvtusepi64_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 32) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm_cvtsepi64_epi32")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? num_6 1) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtsepi32_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtsepi64_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtusepi32_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtsepi32_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 96))
(displayln "Scaling case for _mm_cvtusepi32_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtsepi16_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? num_6 0) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtusepi32_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? num_6 0) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm256_cvtusepi32_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 32) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm_cvtusepi64_epi32")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? num_6 0) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm_cvtusepi32_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 64) (equal? num_2 64) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 0))
(displayln "Scaling case for _mm512_cvtsepi16_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
(* scale-factor num_4)
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 8) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 96))
(displayln "Scaling case for _mm256_cvtusepi64_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 32) (equal? prec_o 16) (equal? num_6 1) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 96))
(displayln "Scaling case for _mm_cvtsepi64_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 8) (equal? num_6 1) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm_cvtsepi16_epi8")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? num_6 0) (equal? prec_i 64) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm256_cvtusepi64_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[(and  (equal? size_i_o 32) (equal? num_2 32) (equal? num_3 0) (equal? num_4 64) (equal? prec_o 16) (equal? num_6 1) (equal? prec_i 32) (equal? num_8 1) (equal? num_9 64))
(displayln "Scaling case for _mm_cvtsepi32_epi16")
(_mm512_cvtusepi64_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_2)
num_3
num_4
prec_o
num_6
prec_i
num_8
num_9
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_slli_epi16_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17 num_18)
		(cond 
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 256) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_slli_epi16")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_slli_epi32")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _m_pslldi")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_slli_epi32")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_slli_epi16")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_slli_pi16")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm256_slli_epi32")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm256_slli_epi64")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_slli_epi64")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm512_slli_epi64")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm256_slli_epi16")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 16) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _m_psllwi")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_2 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 0) (equal? num_10 8) (equal? num_11 0) (equal? prec_i_o 32) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0) (equal? num_16 8) (equal? num_17 0) (equal? num_18 0))
(displayln "Scaling case for _mm_slli_pi32")
(_mm512_slli_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_unpackhi_epi16_dsl vc_0 v1 v2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm256_mask_unpackhi_epi16")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm256_maskz_unpackhi_epi8")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm512_maskz_unpackhi_epi32")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm512_maskz_unpackhi_epi8")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm256_mask_unpackhi_epi8")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm512_mask_unpackhi_epi16")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm256_maskz_unpackhi_epi32")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm512_maskz_unpackhi_epi16")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 8) (equal? num_22 0))
(displayln "Scaling case for _mm512_mask_unpackhi_epi8")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 16) (equal? num_22 0))
(displayln "Scaling case for _mm256_maskz_unpackhi_epi16")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm512_mask_unpackhi_epi32")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 64) (equal? num_20 1) (equal? num_21 32) (equal? num_22 0))
(displayln "Scaling case for _mm256_mask_unpackhi_epi32")
(_mm256_mask_unpackhi_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_unpacklo_epi16_dsl vc_0 v1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 1) (equal? num_20 16) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_unpacklo_epi16")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 1) (equal? num_20 16) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_unpacklo_epi16")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 1) (equal? num_20 16) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_unpacklo_epi16")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 1) (equal? num_20 8) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_unpacklo_epi8")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 1) (equal? num_20 32) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_unpacklo_epi32")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 1) (equal? num_20 32) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_unpacklo_epi32")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 1) (equal? num_20 32) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_unpacklo_epi32")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 32) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 32) (equal? num_15 32) (equal? num_16 32) (equal? num_17 32) (equal? num_18 2) (equal? num_19 1) (equal? num_20 32) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_unpacklo_epi32")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 1) (equal? num_20 8) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_unpacklo_epi8")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 16) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 16) (equal? num_15 16) (equal? num_16 16) (equal? num_17 16) (equal? num_18 2) (equal? num_19 1) (equal? num_20 16) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_unpacklo_epi16")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? num_5 64) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 64) (equal? num_11 64) (equal? num_12 0) (equal? num_13 64) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 1) (equal? num_20 8) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_unpacklo_epi8")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? num_5 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 64) (equal? num_9 8) (equal? size_i_o 128) (equal? num_11 128) (equal? num_12 0) (equal? num_13 128) (equal? prec_i_o 8) (equal? num_15 8) (equal? num_16 8) (equal? num_17 8) (equal? num_18 2) (equal? num_19 1) (equal? num_20 8) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_unpacklo_epi8")
(_mm512_maskz_unpacklo_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
(* scale-factor size_i_o)
(* scale-factor num_11)
num_12
(* scale-factor num_13)
prec_i_o
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_maskz_dpwssd_epi32_dsl vc_0 v1 v2 vc_3 v4 v5 size_i_o prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm256_maskz_dpwssd_epi32")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm_maskz_madd_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_mask_maddubs_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr vc_3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm512_maskz_dpwssd_epi32")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm512_mask_madd_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr vc_3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm512_maskz_dpwssds_epi32")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_mask_maddubs_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr vc_3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm256_mask_madd_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr vc_3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm256_maskz_dpwssds_epi32")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm_maskz_maddubs_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm_mask_madd_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr vc_3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm_maskz_dpwssds_epi32")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm256_maskz_madd_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm256_maskz_maddubs_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm_maskz_dpwssd_epi32")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_mask_maddubs_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr vc_3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 16) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 0))
(displayln "Scaling case for _mm512_maskz_madd_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 16) (equal? num_8 0) (equal? num_9 16) (equal? num_10 8) (equal? num_11 0) (equal? num_12 16) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0) (equal? num_19 0))
(displayln "Scaling case for _mm512_maskz_maddubs_epi16")
(_mm256_maskz_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
vc_3
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_extracti32x4_epi32_dsl v0 vc_1 vc_2 vc_3 vc_4 vc_5 v6 v7 v8 num_9 num_10 num_11 num_12 num_13 size_i_o num_15 num_16 num_17 prec_i_o num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27 num_28 num_29 num_30 num_31 num_32)
		(cond 
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_cvtepi16_epi64_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepi16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepi8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepu16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepu32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepu16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 256) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepi8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 256) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepu16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepi8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepi8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepi16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepi8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepu16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepi8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepu16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepi16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepu16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepu32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepu8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepu32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepi32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepi16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepi16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepi8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepu8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 256) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepu32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepi8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepu8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepu16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepi8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepu8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepu8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepi8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepu8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepu8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepu16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepi8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepu8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepu16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepi8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 256) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepu8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepu32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepi8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepi32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepu8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepu8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepi8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepu16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepi32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepi32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepu8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepi16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepi8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepi8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepi16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepu16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepi8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepi8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepu16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepu8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 256) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepi16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepi16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_mask_cvtepi32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepu8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 256) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepi32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 32) (equal? num_9 1) (equal? num_10 32) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepu32_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm_maskz_cvtepi16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_maskz_cvtepi16_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 16) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepu8_epi16")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 1) (equal? num_10 16) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 1) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepi16_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_mask_cvtepu8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 32) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm512_mask_cvtepu8_epi32")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? num_9 1) (equal? num_10 8) (equal? prec_i_o 64) (equal? num_12 1) (equal? num_13 0) (equal? num_14 1) (equal? num_15 0))
(displayln "Scaling case for _mm256_maskz_cvtepu8_epi64")
(_mm512_mask_cvtepi16_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
num_7
num_8
num_9
num_10
prec_i_o
num_12
num_13
num_14
num_15
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_m_por_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8)
		(cond 
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _m_por")
(_m_por_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 64) (equal? num_4 0) (equal? num_5 64) (equal? prec_i_o 256) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm256_or_si256")
(_m_por_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 32) (equal? prec_i_o 128) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_or_si128")
(_m_por_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 16) (equal? prec_i_o 64) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm_or_si64")
(_m_por_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[(and  (equal? size_i_o 128) (equal? num_3 128) (equal? num_4 0) (equal? num_5 128) (equal? prec_i_o 512) (equal? num_7 0) (equal? num_8 0))
(displayln "Scaling case for _mm512_or_si512")
(_m_por_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
(* scale-factor num_5)
prec_i_o
num_7
num_8
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_m_pcmpeqb_dsl vc_0 v1 v2 vc_3 size_i_o num_5 num_6 num_7 prec_i_o num_9)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 0))
(displayln "Scaling case for _m_pcmpeqb")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 0))
(displayln "Scaling case for _mm256_cmpeq_epi64")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 0))
(displayln "Scaling case for _mm_cmpeq_epi16")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 16) (equal? num_9 0))
(displayln "Scaling case for _m_pcmpeqw")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 32) (equal? num_9 0))
(displayln "Scaling case for _mm_cmpeq_pi32")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 16) (equal? num_9 0))
(displayln "Scaling case for _mm_cmpeq_pi16")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 0))
(displayln "Scaling case for _mm_cmpeq_epi32")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 8) (equal? num_9 0))
(displayln "Scaling case for _mm_cmpeq_pi8")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? vc_3 (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 0))
(displayln "Scaling case for _mm_cmpeq_epi64")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 0))
(displayln "Scaling case for _mm_cmpeq_epi8")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 0))
(displayln "Scaling case for _mm256_cmpeq_epi16")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 0))
(displayln "Scaling case for _mm256_cmpeq_epi32")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000 (bitvector 8)))) (equal? vc_3 (lit (bv #x000000ff (bitvector 8)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 0))
(displayln "Scaling case for _mm256_cmpeq_epi8")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 16) (equal? prec_i_o 32) (equal? num_9 0))
(displayln "Scaling case for _m_pcmpeqd")
(_m_pcmpeqb_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
vc_3
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_extract_pi16_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 num_7 prec_o num_9 prec_i num_11 num_12 num_13 num_14)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x00010 (bitvector 5)))) (equal? size_i_o 1) (equal? num_4 4) (equal? num_5 0) (equal? num_6 4) (equal? num_7 4) (equal? prec_o 16) (equal? num_9 0) (equal? prec_i 256) (equal? num_11 0) (equal? num_12 5) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm256_extract_epi16")
(_mm_extract_pi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
num_4
num_5
num_6
num_7
prec_o
num_9
prec_i
num_11
num_12
num_13
num_14
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_broadcast_i64x2_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 2) (equal? num_12 64) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_broadcast_i64x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 4) (equal? num_12 64) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_broadcast_i64x4")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 2) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_broadcast_i32x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 8) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_broadcast_i32x8")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 2) (equal? num_12 64) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_broadcast_i64x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 2) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_broadcast_i32x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 4) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_broadcast_i32x4")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 2) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_broadcast_i32x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 4) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_broadcast_i32x4")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 8) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_broadcast_i32x8")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 2) (equal? num_12 64) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_broadcast_i64x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 2) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_broadcast_i32x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 4) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_broadcast_i32x4")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 256) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 4) (equal? num_12 64) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_broadcast_i64x4")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 2) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_broadcast_i32x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 4) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_broadcast_i32x4")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 2) (equal? num_12 32) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_broadcast_i32x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 2) (equal? num_12 64) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_broadcast_i64x2")
(_mm256_mask_broadcast_i64x2_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
num_13
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_hsub_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17)
		(cond 
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 32) (equal? num_7 64) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 -1) (equal? num_11 32) (equal? num_12 2) (equal? num_13 -1) (equal? num_14 96) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_hsub_epi32")
(_mm256_hsub_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 -1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 -1) (equal? num_14 112) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_hsub_epi16")
(_mm256_hsub_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[(and  (equal? size_i_o 64) (equal? num_3 128) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 1) (equal? num_14 112) (equal? num_15 128) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm256_hsubs_epi16")
(_mm256_hsub_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
num_3
num_4
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_hsub_epi16_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17)
		(cond 
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 -1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 -1) (equal? num_14 112) (equal? num_15 32) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hsub_epi16")
(_mm_hsub_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 16) (equal? num_7 64) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 1) (equal? num_14 112) (equal? num_15 32) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hsubs_epi16")
(_mm_hsub_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 16) (equal? num_7 32) (equal? num_8 16) (equal? prec_i_o 16) (equal? num_10 -1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 -1) (equal? num_14 48) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hsub_pi16")
(_mm_hsub_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 16) (equal? num_3 16) (equal? num_4 0) (equal? num_5 32) (equal? num_6 16) (equal? num_7 32) (equal? num_8 16) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 2) (equal? num_13 1) (equal? num_14 48) (equal? num_15 16) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hsubs_pi16")
(_mm_hsub_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
(* scale-factor num_15)
num_16
num_17
)
]
		[(and  (equal? size_i_o 32) (equal? num_3 32) (equal? num_4 0) (equal? num_5 64) (equal? num_6 32) (equal? num_7 64) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 -1) (equal? num_11 32) (equal? num_12 2) (equal? num_13 -1) (equal? num_14 96) (equal? num_15 32) (equal? num_16 2) (equal? num_17 0))
(displayln "Scaling case for _mm_hsub_epi32")
(_mm_hsub_epi16_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_3)
num_4
num_5
num_6
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
num_14
(* scale-factor num_15)
num_16
num_17
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_dpwssd_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o prec_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0))
(displayln "Scaling case for _mm512_mask_dpwssd_epi32")
(_mm512_mask_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0))
(displayln "Scaling case for _mm_mask_dpwssd_epi32")
(_mm512_mask_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0))
(displayln "Scaling case for _mm_mask_dpwssds_epi32")
(_mm512_mask_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0))
(displayln "Scaling case for _mm512_mask_dpwssds_epi32")
(_mm512_mask_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 -1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0))
(displayln "Scaling case for _mm256_mask_dpwssd_epi32")
(_mm512_mask_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_7 0) (equal? num_8 32) (equal? num_9 16) (equal? num_10 0) (equal? num_11 32) (equal? num_12 32) (equal? num_13 1) (equal? num_14 32) (equal? num_15 1) (equal? num_16 1) (equal? num_17 1) (equal? num_18 0))
(displayln "Scaling case for _mm256_mask_dpwssds_epi32")
(_mm512_mask_dpwssd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_7
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_ror_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm256_ror_epi32")
(_mm256_ror_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? num_8 8) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm512_ror_epi64")
(_mm256_ror_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 16) (equal? num_8 8) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm_ror_epi64")
(_mm256_ror_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? num_8 8) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm512_ror_epi32")
(_mm256_ror_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000040 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000040 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm256_ror_epi64")
(_mm256_ror_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[(and  (equal? vc_0 (lit (bv #x00000020 (bitvector 8)))) (equal? vc_1 (lit (bv #x00000020 (bitvector 8)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? num_8 8) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 0) (equal? num_12 -1) (equal? num_13 0) (equal? num_14 0) (equal? num_15 0))
(displayln "Scaling case for _mm_ror_epi32")
(_mm256_ror_epi32_dsl
vc_0
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
num_7
num_8
prec_i_o
num_10
num_11
num_12
num_13
num_14
num_15
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_srli_epi32_dsl v0 vc_1 v2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_srli_epi32")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_srli_epi32")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_srli_epi64")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_srli_epi32")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_srli_epi16")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_srli_epi32")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_srli_epi16")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_srli_epi32")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_srli_epi16")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_srli_epi16")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_srli_epi64")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_srli_epi16")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_srli_epi32")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_srli_epi64")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_srli_epi16")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_srli_epi64")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
v3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_srli_epi64")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_srli_epi64")
(_mm256_mask_srli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_broadcastd_epi32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_broadcastd_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 64) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_set1_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 64) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_set1_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_set1_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_set1_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_set1_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_broadcastd_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_broadcastq_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 2) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_set1_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_set1_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_set1_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 16) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_set1_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_broadcastd_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_set1_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_set1_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_broadcastd_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 4) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_set1_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 4) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_set1_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_broadcastb_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 2) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_set1_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_broadcastq_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 4) (equal? num_5 4) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 4) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_set1_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 16) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_set1_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_broadcastb_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_broadcastw_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_broadcastw_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 8) (equal? num_5 8) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_set1_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_broadcastq_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 16) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_set1_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_broadcastd_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_set1_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_broadcastw_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_broadcastw_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_broadcastq_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_broadcastb_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 2) (equal? num_5 2) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 2) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_set1_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 2) (equal? num_5 8) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_set1_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_broadcastd_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_broadcastb_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 16) (equal? num_5 16) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_set1_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
(* scale-factor num_10)
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_broadcastw_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 8) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_set1_epi32")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_broadcastq_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 4) (equal? num_5 16) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_set1_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_broadcastw_epi16")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_broadcastq_epi64")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_broadcastb_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_broadcastb_epi8")
(_mm_mask_broadcastd_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_maskz_madd52lo_epu64_dsl vc_0 v1 vc_2 v3 v4 v5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 prec_i_o num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 104) (equal? num_10 52) (equal? num_11 1) (equal? num_12 52) (equal? prec_i_o 64) (equal? num_14 -1) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0) (equal? num_18 0) (equal? num_19 32) (equal? num_20 0) (equal? num_21 52) (equal? num_22 52) (equal? num_23 0))
(displayln "Scaling case for _mm_maskz_madd52lo_epu64")
(_mm_maskz_madd52lo_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
num_9
num_10
num_11
num_12
prec_i_o
num_14
num_15
num_16
num_17
num_18
(* scale-factor num_19)
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 208) (equal? num_10 52) (equal? num_11 1) (equal? num_12 52) (equal? prec_i_o 64) (equal? num_14 -1) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0) (equal? num_18 0) (equal? num_19 128) (equal? num_20 0) (equal? num_21 52) (equal? num_22 52) (equal? num_23 0))
(displayln "Scaling case for _mm256_maskz_madd52lo_epu64")
(_mm_maskz_madd52lo_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
num_9
num_10
num_11
num_12
prec_i_o
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 416) (equal? num_10 52) (equal? num_11 1) (equal? num_12 52) (equal? prec_i_o 64) (equal? num_14 -1) (equal? num_15 0) (equal? num_16 52) (equal? num_17 0) (equal? num_18 0) (equal? num_19 128) (equal? num_20 0) (equal? num_21 52) (equal? num_22 52) (equal? num_23 0))
(displayln "Scaling case for _mm512_maskz_madd52lo_epu64")
(_mm_maskz_madd52lo_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
num_9
num_10
num_11
num_12
prec_i_o
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_7 32) (equal? num_8 0) (equal? num_9 104) (equal? num_10 52) (equal? num_11 1) (equal? num_12 52) (equal? prec_i_o 64) (equal? num_14 -1) (equal? num_15 0) (equal? num_16 52) (equal? num_17 52) (equal? num_18 0) (equal? num_19 32) (equal? num_20 0) (equal? num_21 52) (equal? num_22 52) (equal? num_23 0))
(displayln "Scaling case for _mm_maskz_madd52hi_epu64")
(_mm_maskz_madd52lo_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
num_9
num_10
num_11
num_12
prec_i_o
num_14
num_15
num_16
num_17
num_18
(* scale-factor num_19)
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_7 128) (equal? num_8 0) (equal? num_9 416) (equal? num_10 52) (equal? num_11 1) (equal? num_12 52) (equal? prec_i_o 64) (equal? num_14 -1) (equal? num_15 0) (equal? num_16 52) (equal? num_17 52) (equal? num_18 0) (equal? num_19 128) (equal? num_20 0) (equal? num_21 52) (equal? num_22 52) (equal? num_23 0))
(displayln "Scaling case for _mm512_maskz_madd52hi_epu64")
(_mm_maskz_madd52lo_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
num_9
num_10
num_11
num_12
prec_i_o
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_7 64) (equal? num_8 0) (equal? num_9 208) (equal? num_10 52) (equal? num_11 1) (equal? num_12 52) (equal? prec_i_o 64) (equal? num_14 -1) (equal? num_15 0) (equal? num_16 52) (equal? num_17 52) (equal? num_18 0) (equal? num_19 128) (equal? num_20 0) (equal? num_21 52) (equal? num_22 52) (equal? num_23 0))
(displayln "Scaling case for _mm256_maskz_madd52hi_epu64")
(_mm_maskz_madd52lo_epu64_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_7)
num_8
num_9
num_10
num_11
num_12
prec_i_o
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
num_22
num_23
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_blendv_epi8_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 7) (equal? num_11 0))
(displayln "Scaling case for _mm256_blendv_epi8")
(_mm256_blendv_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 7) (equal? num_11 0))
(displayln "Scaling case for _mm_blendv_epi8")
(_mm256_blendv_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_srl_epi64_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm512_srl_epi64")
(_mm512_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm_srl_epi64")
(_mm512_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x000000000000000000000000000000000000000000000000000000000000003f (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 128) (equal? num_6 0) (equal? num_7 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 0) (equal? prec_i_o 64) (equal? num_13 0) (equal? num_14 0))
(displayln "Scaling case for _mm256_srl_epi64")
(_mm512_srl_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
num_5
num_6
(* scale-factor num_7)
num_8
num_9
num_10
num_11
prec_i_o
num_13
num_14
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_blend_epi16_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 8) (equal? num_11 16) (equal? num_12 0))
(displayln "Scaling case for _mm256_blend_epi16")
(_mm256_blend_epi16_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_mask_sra_epi32_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 v6 v7 vc_8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 prec_i_o num_20 num_21 num_22 num_23 num_24)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_mask_sra_epi32")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_mask_sra_epi32")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? v7 (lit (bv #xbitvector 512)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_maskz_sra_epi32")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_mask_sra_epi16")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_mask_sra_epi32")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? v7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_maskz_sra_epi16")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_mask_sra_epi16")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? v7 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_maskz_sra_epi32")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_mask_sra_epi16")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(hydride:scale-expr v7 scale-factor)
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000000000000000ffffffff (bitvector 32)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x00000000000000000000000000000000 (bitvector 32)))) (equal? v7 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000001f (bitvector 64)))) (equal? size_i_o 64) (equal? num_10 64) (equal? num_11 0) (equal? num_12 64) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 32) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm256_maskz_sra_epi32")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? v7 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 32) (equal? num_10 32) (equal? num_11 0) (equal? num_12 32) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm_maskz_sra_epi16")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x000000000000ffff (bitvector 16)))) (equal? vc_4 (lit (bv #b1 (bitvector 1)))) (equal? vc_5 (lit (bv #x0000000000000000 (bitvector 16)))) (equal? v7 (lit (bv #xbitvector 512)))) (equal? vc_8 (lit (bv #x000000000000000000000000000000000000000000000000000000000000000f (bitvector 64)))) (equal? size_i_o 128) (equal? num_10 128) (equal? num_11 0) (equal? num_12 128) (equal? num_13 16) (equal? num_14 1) (equal? num_15 16) (equal? num_16 0) (equal? num_17 64) (equal? num_18 0) (equal? prec_i_o 16) (equal? num_20 1) (equal? num_21 0) (equal? num_22 64) (equal? num_23 0) (equal? num_24 0))
(displayln "Scaling case for _mm512_maskz_sra_epi16")
(_mm_mask_sra_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
v7
vc_8
(* scale-factor size_i_o)
(* scale-factor num_10)
num_11
(* scale-factor num_12)
num_13
num_14
num_15
num_16
num_17
num_18
prec_i_o
num_20
num_21
num_22
num_23
num_24
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_movm_epi8_dsl v0 vc_1 vc_2 vc_3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_blend_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_mov_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_mov_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_mov_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_mov_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm_blend_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_mov_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm256_blend_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_blend_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_blend_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_blend_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_mov_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_mov_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_mov_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_mov_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_mov_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_mov_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_mov_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_mov_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_mov_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_mov_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_mov_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_mov_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm_maskz_mov_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_mov_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_mov_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_blend_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_blend_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm256_maskz_mov_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_blend_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_mov_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_mov_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_blend_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 8) (equal? num_9 1) (equal? num_10 8) (equal? num_11 0))
(displayln "Scaling case for _mm512_maskz_mov_epi8")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm256_mask_blend_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_blend_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? prec_i_o 64) (equal? num_9 1) (equal? num_10 64) (equal? num_11 0))
(displayln "Scaling case for _mm512_mask_blend_epi64")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 16) (equal? num_9 1) (equal? num_10 16) (equal? num_11 0))
(displayln "Scaling case for _mm_blend_epi16")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? prec_i_o 32) (equal? num_9 1) (equal? num_10 32) (equal? num_11 0))
(displayln "Scaling case for _mm_mask_blend_epi32")
(_mm_movm_epi8_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr vc_3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
prec_i_o
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_maskz_sub_epi8_dsl vc_0 v1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_sub_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_sub_epi32")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_subs_epu8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_subs_epu16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_sub_epi64")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_subs_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_subs_epu16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_subs_epu8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_subs_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_subs_epu16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_sub_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_subs_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_sub_epi32")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_subs_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_subs_epu16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_sub_epi32")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_subs_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_sub_epi64")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_sub_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_subr_epi32")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_sub_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_sub_epi32")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_sub_epi64")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_subs_epu16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_sub_epi64")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_subs_epu16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_subs_epu8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_sub_epi32")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_subs_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_sub_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_subs_epu8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_sub_epi32")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_sub_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_sub_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_sub_epi64")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_subs_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_sub_epi64")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_subs_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_subs_epu8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_sub_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_sub_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_sub_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_subs_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_subs_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_sub_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_subs_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_subs_epu8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_sub_epi16")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_subs_epi8")
(_mm_maskz_sub_epi8_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_maskz_andnot_epi64_dsl v0 vc_1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_andnot_epi64")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_andnot_epi32")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_andnot_epi32")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_andnot_epi64")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_andnot_epi64")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_andnot_epi64")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_andnot_epi32")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_andnot_epi32")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_andnot_epi32")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_andnot_epi64")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_andnot_epi64")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_andnot_epi32")
(_mm512_maskz_andnot_epi64_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr vc_2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm512_mask_add_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13)
		(cond 
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_add_epi32")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_adds_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_adds_epu16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_adds_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_add_epi64")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_adds_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_add_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_add_epi64")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_add_epi32")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_adds_epu8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_add_epi32")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_adds_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_add_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_adds_epu8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_adds_epu8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_add_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_add_epi64")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_adds_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_add_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_adds_epu8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_add_epi64")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_adds_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_add_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_add_epi32")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_add_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_adds_epu16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_add_epi32")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_add_epi64")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_add_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_adds_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_add_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_adds_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_add_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_adds_epu16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_add_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_adds_epu16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_mask_add_epi32")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_adds_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_adds_epu16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_add_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm256_maskz_add_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_adds_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_adds_epu8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 -1) (equal? num_13 0))
(displayln "Scaling case for _mm_maskz_add_epi64")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_adds_epu8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm256_mask_adds_epi16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 16) (equal? num_10 1) (equal? num_11 16) (equal? num_12 0) (equal? num_13 0))
(displayln "Scaling case for _mm512_mask_adds_epu16")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[(and  (equal? vc_0 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 8) (equal? num_10 1) (equal? num_11 8) (equal? num_12 1) (equal? num_13 0))
(displayln "Scaling case for _mm512_maskz_adds_epi8")
(_mm512_mask_add_epi32_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
num_13
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_mask_and_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_and_epi32")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_and_epi64")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_mask_and_epi64")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_and_epi64")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_maskz_and_epi32")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_and_epi32")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_and_epi64")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_and_epi32")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_maskz_and_epi64")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 32) (equal? num_6 32) (equal? num_7 0) (equal? num_8 32) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm_mask_and_epi32")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? v2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? num_6 64) (equal? num_7 0) (equal? num_8 64) (equal? prec_i_o 64) (equal? num_10 1) (equal? num_11 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_maskz_and_epi64")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
v2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? size_i_o 128) (equal? num_6 128) (equal? num_7 0) (equal? num_8 128) (equal? prec_i_o 32) (equal? num_10 1) (equal? num_11 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_mask_and_epi32")
(_mm256_mask_and_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
(hydride:scale-expr v2 scale-factor)
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_6)
num_7
(* scale-factor num_8)
prec_i_o
num_10
num_11
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_maskz_slli_epi32_dsl v0 v1 vc_2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_slli_epi32")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_slli_epi32")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_slli_epi64")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_slli_epi64")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_slli_epi64")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_slli_epi32")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_slli_epi16")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_slli_epi16")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_slli_epi64")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_slli_epi16")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_mask_slli_epi32")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_slli_epi16")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_slli_epi16")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_slli_epi64")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #xbitvector 512)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000003f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 64) (equal? num_12 1) (equal? num_13 64) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 64) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_slli_epi64")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_3 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_4 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_slli_epi32")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
vc_3
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_5 (lit (bv #x0000001f (bitvector 8)))) (equal? size_i_o 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? num_11 32) (equal? num_12 1) (equal? num_13 32) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 32) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_mask_slli_epi32")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_2 (lit (bv #b1 (bitvector 1)))) (equal? vc_4 (lit (bv #xbitvector 512)))) (equal? vc_5 (lit (bv #x0000000f (bitvector 8)))) (equal? size_i_o 128) (equal? num_8 128) (equal? num_9 0) (equal? num_10 128) (equal? num_11 16) (equal? num_12 1) (equal? num_13 16) (equal? num_14 0) (equal? num_15 8) (equal? num_16 0) (equal? prec_i_o 16) (equal? num_18 0) (equal? num_19 8) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_mask_slli_epi16")
(_mm_maskz_slli_epi32_dsl
(hydride:scale-expr v0 scale-factor)
(hydride:scale-expr v1 scale-factor)
vc_2
(hydride:scale-expr vc_3 scale-factor)
vc_4
vc_5
(hydride:scale-expr v6 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_8)
num_9
(* scale-factor num_10)
num_11
num_12
num_13
num_14
num_15
num_16
prec_i_o
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm256_maddubs_epi16_dsl vc_0 v1 v2 size_i_o prec_o num_5 num_6 prec_i num_8 num_9 num_10 num_11)
		(cond 
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_o 16) (equal? num_5 0) (equal? num_6 16) (equal? prec_i 8) (equal? num_8 1) (equal? num_9 1) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm256_maddubs_epi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_dpwssds_epi32")
(_mm256_maddubs_epi16_dsl
(hydride:scale-expr vc_0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_madd_epi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 32) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_dpwssd_epi32")
(_mm256_maddubs_epi16_dsl
(hydride:scale-expr vc_0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 512)))) (equal? size_i_o 128) (equal? prec_o 16) (equal? num_5 0) (equal? num_6 16) (equal? prec_i 8) (equal? num_8 1) (equal? num_9 1) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm512_maddubs_epi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _m_pmaddwd")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_dpwssd_epi32")
(_mm256_maddubs_epi16_dsl
(hydride:scale-expr vc_0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_o 16) (equal? num_5 0) (equal? num_6 16) (equal? prec_i 8) (equal? num_8 1) (equal? num_9 1) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_maddubs_epi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 64) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_dpwssds_epi32")
(_mm256_maddubs_epi16_dsl
(hydride:scale-expr vc_0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_madd_pi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm_madd_epi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64)))) (equal? size_i_o 16) (equal? prec_o 16) (equal? num_5 0) (equal? num_6 16) (equal? prec_i 8) (equal? num_8 1) (equal? num_9 1) (equal? num_10 0) (equal? num_11 0))
(displayln "Scaling case for _mm_maddubs_pi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_dpwssds_epi32")
(_mm256_maddubs_epi16_dsl
(hydride:scale-expr vc_0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? size_i_o 128) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm512_dpwssd_epi32")
(_mm256_maddubs_epi16_dsl
(hydride:scale-expr vc_0 scale-factor)
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[(and  (equal? vc_0 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_o 32) (equal? num_5 0) (equal? num_6 32) (equal? prec_i 16) (equal? num_8 -1) (equal? num_9 1) (equal? num_10 1) (equal? num_11 0))
(displayln "Scaling case for _mm256_madd_epi16")
(_mm256_maddubs_epi16_dsl
vc_0
(hydride:scale-expr v1 scale-factor)
(hydride:scale-expr v2 scale-factor)
(* scale-factor size_i_o)
prec_o
num_5
num_6
prec_i
num_8
num_9
num_10
num_11
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_maskz_dpbusds_epi32_dsl v0 vc_1 vc_2 v3 v4 v5 size_i_o prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21)
		(cond 
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 16) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_dpbusds_epi32")
(_mm_maskz_dpbusds_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 16) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_dpbusds_epi32")
(_mm_maskz_dpbusds_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #xbitvector 512)))) (equal? size_i_o 128) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 16) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm512_maskz_dpbusd_epi32")
(_mm_maskz_dpbusds_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? size_i_o 32) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 16) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm_maskz_dpbusd_epi32")
(_mm_maskz_dpbusds_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 16) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_dpbusds_epi32")
(_mm_maskz_dpbusds_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[(and  (equal? vc_1 (lit (bv #b1 (bitvector 1)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? size_i_o 64) (equal? prec_i_o 32) (equal? num_8 0) (equal? num_9 32) (equal? num_10 8) (equal? num_11 0) (equal? num_12 32) (equal? num_13 32) (equal? num_14 1) (equal? num_15 32) (equal? num_16 -1) (equal? num_17 1) (equal? num_18 1) (equal? num_19 16) (equal? num_20 0) (equal? num_21 0))
(displayln "Scaling case for _mm256_maskz_dpbusd_epi32")
(_mm_maskz_dpbusds_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(hydride:scale-expr v4 scale-factor)
(hydride:scale-expr v5 scale-factor)
(* scale-factor size_i_o)
prec_i_o
num_8
num_9
num_10
num_11
num_12
num_13
num_14
num_15
num_16
num_17
num_18
num_19
num_20
num_21
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[ (_mm_srlv_epi32_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 prec_i_o num_12)
		(cond 
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 0))
(displayln "Scaling case for _mm_srlv_epi32")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 0))
(displayln "Scaling case for _mm256_srlv_epi64")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_i_o 16) (equal? num_12 0))
(displayln "Scaling case for _mm256_srlv_epi16")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 0))
(displayln "Scaling case for _mm512_srlv_epi64")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_i_o 16) (equal? num_12 0))
(displayln "Scaling case for _mm512_srlv_epi16")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000040 (bitvector 64)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 64) (equal? num_9 0) (equal? num_10 64) (equal? prec_i_o 64) (equal? num_12 0))
(displayln "Scaling case for _mm_srlv_epi64")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 64) (equal? num_5 64) (equal? num_6 0) (equal? num_7 64) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 0))
(displayln "Scaling case for _mm256_srlv_epi32")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))) (equal? vc_2 (lit (bv #x0000000000000010 (bitvector 16)))) (equal? size_i_o 32) (equal? num_5 32) (equal? num_6 0) (equal? num_7 32) (equal? num_8 16) (equal? num_9 0) (equal? num_10 16) (equal? prec_i_o 16) (equal? num_12 0))
(displayln "Scaling case for _mm_srlv_epi16")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[(and  (equal? vc_1 (lit (bv #xbitvector 512)))) (equal? vc_2 (lit (bv #x00000000000000000000000000000020 (bitvector 32)))) (equal? size_i_o 128) (equal? num_5 128) (equal? num_6 0) (equal? num_7 128) (equal? num_8 32) (equal? num_9 0) (equal? num_10 32) (equal? prec_i_o 32) (equal? num_12 0))
(displayln "Scaling case for _mm512_srlv_epi32")
(_mm_srlv_epi32_dsl
(hydride:scale-expr v0 scale-factor)
vc_1
vc_2
(hydride:scale-expr v3 scale-factor)
(* scale-factor size_i_o)
(* scale-factor num_5)
num_6
(* scale-factor num_7)
num_8
num_9
num_10
prec_i_o
num_12
)
]
		[else (error "Unable to identify how to scale up " prog)]
		)
	]
	[_ (error "Unrecognized expression")]
 )
)

;; ================================================================================
