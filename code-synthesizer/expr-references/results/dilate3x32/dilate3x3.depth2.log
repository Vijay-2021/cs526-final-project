mkdir dilate3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g dilate3x3/src/dilate3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o dilate3x3/bin/dilate3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=2 HL_ENABLE_HYDRIDE=1 ./dilate3x3/bin/dilate3x3_generator \
	-t 0 \
	-o dilate3x3/bin \
	-g dilate3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f dilate3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_4507_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
get-expr-grammar with base_name: base_4507

base_4507_grammar.rkt
/tmp/base_4507_grammar.rkt
Writing [{ 
"name": "base_4507" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,32], [1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4507_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4507_spec.JSON /tmp/base_4507_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_4507 ... 

Grammar:
#<procedure:base_4507>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xc576ee4d5ed04ad96ee278fedcf9c72ef3d8d4f6e8ecc9f75ada55c1d7f0d590 256)
invoke-spec-lane with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
Concrete counter examples:
(#((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256)) #((bv #xc69170eeda3d5d222ad8bac1f0b3376697b7e8a577632984a198cd045e9a1a5e 256) (bv #x80f5b59c61a6b1bc4db0347cda8c1e5938a762e3c91b7131959806ebb385a780 256) (bv #xd8640e27874d3eab4c19010511830faa3ad1d556e960c6c17985bd6f96c0e959 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
Spec Produced:
(bv #x90 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xc69170eeda3d5d222ad8bac1f0b3376697b7e8a577632984a198cd045e9a1a5e 256) (bv #x80f5b59c61a6b1bc4db0347cda8c1e5938a762e3c91b7131959806ebb385a780 256) (bv #xd8640e27874d3eab4c19010511830faa3ad1d556e960c6c17985bd6f96c0e959 256))
Spec Produced:
(bv #x80 8)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1 sym_bv$2)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$3 sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$3 sym_bv$4 sym_bv$5)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (ite (bvule (extract 255 248 sym_bv$5) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$3 (bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256)]
 [sym_bv$4 (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256)]
 [sym_bv$5 (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256) (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256) (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x458080116e50a2e2c08481dc4058c0c000000000000000000000000000000000 256)
(bv #x458080116e50a2e2c08481dc4058c0c000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x458080116e50a2e2c08481dc4058c0c000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256) (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x458080116e50a2e2c08481dc4058c0c000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1))
differing-lanes
'(16)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xc576ee4d5ed04ad96ee278fedcf9c72ef3d8d4f6e8ecc9f75ada55c1d7f0d590 256)
invoke-spec-lane with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
Concrete counter examples:
(#((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256)) #((bv #xc69170eeda3d5d222ad8bac1f0b3376697b7e8a577632984a198cd045e9a1a5e 256) (bv #x80f5b59c61a6b1bc4db0347cda8c1e5938a762e3c91b7131959806ebb385a780 256) (bv #xd8640e27874d3eab4c19010511830faa3ad1d556e960c6c17985bd6f96c0e959 256)) #((bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256) (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 16)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
Spec Produced:
(bv #x90 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xc69170eeda3d5d222ad8bac1f0b3376697b7e8a577632984a198cd045e9a1a5e 256) (bv #x80f5b59c61a6b1bc4db0347cda8c1e5938a762e3c91b7131959806ebb385a780 256) (bv #xd8640e27874d3eab4c19010511830faa3ad1d556e960c6c17985bd6f96c0e959 256))
Spec Produced:
(bv #x80 8)
Synthesize by lane...
Lane Index
16
invoke-spec-lane with env: #((bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256) (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256))
Spec Produced:
(bv #xc0 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$9 sym_bv$10 sym_bv$11)

invoke-spec with env: #(sym_bv$9 sym_bv$10 sym_bv$11)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (ite (bvule (extract 255 248 sym_bv$11) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$9 (bv #x6e7c3e0e82060e0a202020202020206000000000000000000000000000000000 256)]
 [sym_bv$10 (bv #xa01c4151488890503f0000000000000000000000000000000000000000000000 256)]
 [sym_bv$11 (bv #x8aa03f4c3f7f7f3bc0c0c0c0c0c0c04000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x6e7c3e0e82060e0a202020202020206000000000000000000000000000000000 256) (bv #xa01c4151488890503f0000000000000000000000000000000000000000000000 256) (bv #x8aa03f4c3f7f7f3bc0c0c0c0c0c0c04000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x6e7c3e0e82060e0a202020202020206000000000000000000000000000000000 256) (bv #xa01c4151488890503f0000000000000000000000000000000000000000000000 256) (bv #x8aa03f4c3f7f7f3bc0c0c0c0c0c0c04000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xa0a0415182889050c0c0c0c0c0c0c06000000000000000000000000000000000 256)
(bv #xa0a0415182889050c0c0c0c0c0c0c06000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #xa0a0415182889050c0c0c0c0c0c0c06000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #xa0a0415148889050c0c0c0c0c0c0c04000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x6e7c3e0e82060e0a202020202020206000000000000000000000000000000000 256) (bv #xa01c4151488890503f0000000000000000000000000000000000000000000000 256) (bv #x8aa03f4c3f7f7f3bc0c0c0c0c0c0c04000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xa0a0415182889050c0c0c0c0c0c0c06000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0))
differing-lanes
'(16)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xc576ee4d5ed04ad96ee278fedcf9c72ef3d8d4f6e8ecc9f75ada55c1d7f0d590 256)
invoke-spec-lane with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
Concrete counter examples:
(#((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256)) #((bv #xc69170eeda3d5d222ad8bac1f0b3376697b7e8a577632984a198cd045e9a1a5e 256) (bv #x80f5b59c61a6b1bc4db0347cda8c1e5938a762e3c91b7131959806ebb385a780 256) (bv #xd8640e27874d3eab4c19010511830faa3ad1d556e960c6c17985bd6f96c0e959 256)) #((bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256) (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256)) #((bv #x6e7c3e0e82060e0a202020202020206000000000000000000000000000000000 256) (bv #xa01c4151488890503f0000000000000000000000000000000000000000000000 256) (bv #x8aa03f4c3f7f7f3bc0c0c0c0c0c0c04000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 16 16)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2173cd4d2b934a963ae257b47f30462ed56dd138e8b197f71a2d55c117c6d534 256) (bv #xc5601a223cd02ed96e7978fe89f9c7285365371e53ec5c8e5ada31b7d7794c90 256) (bv #xb176ee115e5200b95da81716dca69a05f3d8d4f68451c963382547c116f09b29 256))
Spec Produced:
(bv #x90 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xc69170eeda3d5d222ad8bac1f0b3376697b7e8a577632984a198cd045e9a1a5e 256) (bv #x80f5b59c61a6b1bc4db0347cda8c1e5938a762e3c91b7131959806ebb385a780 256) (bv #xd8640e27874d3eab4c19010511830faa3ad1d556e960c6c17985bd6f96c0e959 256))
Spec Produced:
(bv #x80 8)
Synthesize by lane...
Lane Index
16
invoke-spec-lane with env: #((bv #x3c805e046e0ea2e2c08450dc40585f5c00000000000000000000000000000000 256) (bv #x15017a031050a25403008102020ac08200000000000000000000000000000000 256) (bv #x450a801100000021210021100910a0c000000000000000000000000000000000 256))
Spec Produced:
(bv #xc0 8)
Synthesize by lane...
Lane Index
16
invoke-spec-lane with env: #((bv #x6e7c3e0e82060e0a202020202020206000000000000000000000000000000000 256) (bv #xa01c4151488890503f0000000000000000000000000000000000000000000000 256) (bv #x8aa03f4c3f7f7f3bc0c0c0c0c0c0c04000000000000000000000000000000000 256))
Spec Produced:
(bv #x60 8)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xec7eeab0a4abd786e8d0e0b4254deef67f75ddccfafd9f54c6d0c465d0ebddaa 256)
invoke-spec-lane with env: #((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256))
Concrete counter examples:
(#((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256)) #((bv #xd2e5491d2218ba7ba943ec95a2ba0794db8d4f65bd27305f28a8e325a57b8d0c 256) (bv #x334da91d9cc98286153d6efd59f264f1574f665a220e8976f1da715c8673faaf 256) (bv #x301388213625398d8463e275ffdc0e9f0f1d1f0ca17da0a50eb59e1026aa1775 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256))
Spec Produced:
(bv #xaa 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd2e5491d2218ba7ba943ec95a2ba0794db8d4f65bd27305f28a8e325a57b8d0c 256) (bv #x334da91d9cc98286153d6efd59f264f1574f665a220e8976f1da715c8673faaf 256) (bv #x301388213625398d8463e275ffdc0e9f0f1d1f0ca17da0a50eb59e1026aa1775 256))
Spec Produced:
(bv #xaf 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13 sym_bv$14)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$15 sym_bv$16 sym_bv$17)

invoke-spec with env: #(sym_bv$15 sym_bv$16 sym_bv$17)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (ite (bvule (extract 255 248 sym_bv$17) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 1 seconds

(model
 [sym_bv$15 (bv #x16c10e00382616321c040e0c1cc00cfe00000000000000000000000000000000 256)]
 [sym_bv$16 (bv #x653e10018180278002021002021a020200000000000000000000000100000000 256)]
 [sym_bv$17 (bv #xd0c34140800080801e0c001c1e80180400000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x16c10e00382616321c040e0c1cc00cfe00000000000000000000000000000000 256) (bv #x653e10018180278002021002021a020200000000000000000000000100000000 256) (bv #xd0c34140800080801e0c001c1e80180400000000000000000000000000000000 256))
invoke-spec with env: #((bv #x16c10e00382616321c040e0c1cc00cfe00000000000000000000000000000000 256) (bv #x653e10018180278002021002021a020200000000000000000000000100000000 256) (bv #xd0c34140800080801e0c001c1e80180400000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xd0c34140818080801e0c101c1ec018fe00000000000000000000000100000000 256)
(bv #xd0c34140818080801e0c101c1ec018fe00000000000000000000000100000000 256)
Verification failed ...
	spec produced: (bv #xd0c34140818080801e0c101c1ec018fe00000000000000000000000100000000 256) 256 
	synthesized result produced: (bv #x65c11001818027801c04100c1cc00cfe00000000000000000000000100000000 256) 256

invoke-spec with env: #((bv #x16c10e00382616321c040e0c1cc00cfe00000000000000000000000000000000 256) (bv #x653e10018180278002021002021a020200000000000000000000000100000000 256) (bv #xd0c34140800080801e0c001c1e80180400000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xd0c34140818080801e0c101c1ec018fe00000000000000000000000100000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1))
differing-lanes
'(17)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xec7eeab0a4abd786e8d0e0b4254deef67f75ddccfafd9f54c6d0c465d0ebddaa 256)
invoke-spec-lane with env: #((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256))
Concrete counter examples:
(#((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256)) #((bv #xd2e5491d2218ba7ba943ec95a2ba0794db8d4f65bd27305f28a8e325a57b8d0c 256) (bv #x334da91d9cc98286153d6efd59f264f1574f665a220e8976f1da715c8673faaf 256) (bv #x301388213625398d8463e275ffdc0e9f0f1d1f0ca17da0a50eb59e1026aa1775 256)) #((bv #x16c10e00382616321c040e0c1cc00cfe00000000000000000000000000000000 256) (bv #x653e10018180278002021002021a020200000000000000000000000100000000 256) (bv #xd0c34140800080801e0c001c1e80180400000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 17)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0507ea274a95d72f6b5a626c122f45bd0e75ddcc21fd380b341c6530286addaa 256) (bv #xec4a73b0a4734277e8d0e0921d16ee695b3871ccfafb9f2dc60dc4113b0b45a8 256) (bv #x9a7e56906dabc186af7a79b4254d71f67f05af53cb0c1a540bd04d65d0eb6b59 256))
Spec Produced:
(bv #xaa 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd2e5491d2218ba7ba943ec95a2ba0794db8d4f65bd27305f28a8e325a57b8d0c 256) (bv #x334da91d9cc98286153d6efd59f264f1574f665a220e8976f1da715c8673faaf 256) (bv #x301388213625398d8463e275ffdc0e9f0f1d1f0ca17da0a50eb59e1026aa1775 256))
Spec Produced:
(bv #xaf 8)
Synthesize by lane...
Lane Index
17
invoke-spec-lane with env: #((bv #x16c10e00382616321c040e0c1cc00cfe00000000000000000000000000000000 256) (bv #x653e10018180278002021002021a020200000000000000000000000100000000 256) (bv #xd0c34140800080801e0c001c1e80180400000000000000000000000000000000 256))
Spec Produced:
(bv #x18 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$18 sym_bv$19 sym_bv$20)

invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
verify-across-lanes returned #t ... 

Test elapsed time: 
12
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 3)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x00 8)) (reg (bv #x02 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.0
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8) 3)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Expression before InlineLets: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Expression after InlineLets: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Expression before abstraction: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Input expression to synthesize: max((uint8x32)repeat_edge[ramp(t260, 1, 32)], max((uint8x32)repeat_edge[ramp(t264, 1, 32)], (uint8x32)repeat_edge[ramp(t268, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 15.647009seconds ...
Expression after replacae abstraction: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (uint8x32)hydride.node.0((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 3)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x00 8)) (reg (bv #x02 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.1
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8) 3)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Expression before InlineLets: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Expression after InlineLets: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Expression before abstraction: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Input expression to synthesize: max((uint8x32)max_y[ramp(t278, 1, 32)], max((uint8x32)max_y[ramp(t279, 1, 32)], (uint8x32)max_y[ramp(t280, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.716469seconds ...
Expression after replacae abstraction: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (uint8x32)hydride.node.1((uint8x32)max_y[ramp(t97 + 32, 1, 32)], (uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 3)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x00 8)) (reg (bv #x02 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.2
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8) 3)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Expression before InlineLets: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Expression after InlineLets: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Expression before abstraction: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Input expression to synthesize: max((uint8x32)max_y[ramp(t285, 1, 32)], max((uint8x32)max_y[ramp(t286, 1, 32)], (uint8x32)max_y[ramp(t287, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.179507seconds ...
Expression after replacae abstraction: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 2

Optimized expression: (uint8x32)hydride.node.2((uint8x32)max_y[ramp(t149 + -32, 1, 32)], (uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 3)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x00 8)) (reg (bv #x02 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.3
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8) 3)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Starting synthesis for expr: 3
Expression before lower intrinsic: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Expression before InlineLets: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Expression after InlineLets: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Expression before abstraction: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Input expression to synthesize: max((uint8x32)repeat_edge[ramp(t315, 1, 32)], max((uint8x32)repeat_edge[ramp(t319, 1, 32)], (uint8x32)repeat_edge[ramp(t323, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.087716seconds ...
Expression after replacae abstraction: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 3

Optimized expression: (uint8x32)hydride.node.3((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 3)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x00 8)) (reg (bv #x02 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.4
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 0)  
(reg 2)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8) 3)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Starting synthesis for expr: 4
Expression before lower intrinsic: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Expression before InlineLets: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Expression after InlineLets: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Expression before abstraction: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Input expression to synthesize: max((uint8x32)max_y[ramp(t335, 1, 32)], max((uint8x32)max_y[ramp(t336, 1, 32)], (uint8x32)max_y[ramp(t337, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.077976seconds ...
Expression after replacae abstraction: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 4

Optimized expression: (uint8x32)hydride.node.4((uint8x32)max_y[ramp(t103 + 32, 1, 32)], (uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)])
Hydride Function: declare <32 x i8> @hydride.node.0(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %1748 = call <32 x i8> @hydride.node.0(<32 x i8> %1725, <32 x i8> %1736, <32 x i8> %1747) #17
Hydride Function: declare <32 x i8> @hydride.node.1(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %1775 = call <32 x i8> @hydride.node.1(<32 x i8> %1764, <32 x i8> %1769, <32 x i8> %1774) #17
Hydride Function: declare <32 x i8> @hydride.node.2(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %1804 = call <32 x i8> @hydride.node.2(<32 x i8> %1793, <32 x i8> %1798, <32 x i8> %1803) #17
Hydride Function: declare <32 x i8> @hydride.node.3(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2147 = call <32 x i8> @hydride.node.3(<32 x i8> %2124, <32 x i8> %2135, <32 x i8> %2146) #17
Hydride Function: declare <32 x i8> @hydride.node.4(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2174 = call <32 x i8> @hydride.node.4(<32 x i8> %2163, <32 x i8> %2168, <32 x i8> %2173) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'dilate3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
