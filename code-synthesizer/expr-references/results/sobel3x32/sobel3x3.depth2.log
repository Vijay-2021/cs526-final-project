mkdir sobel3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g sobel3x3/src/sobel3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o sobel3x3/bin/sobel3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=2 HL_ENABLE_HYDRIDE=1 ./sobel3x3/bin/sobel3x3_generator \
	-t 0 \
	-o sobel3x3/bin \
	-g sobel3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f sobel3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_4838_spec.JSON': No such file or directory
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_4838

base_4838_grammar.rkt
/tmp/base_4838_grammar.rkt
Writing [{ 
"name": "base_4838" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4838_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4838_spec.JSON /tmp/base_4838_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_4838 ... 

Grammar:
#<procedure:base_4838>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x62c625f965271603eccdb979591ed8ccbb3c7a7cb084275bb51f1ceb059aa880 256))
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x006200c6002500f9006500270016000300ec00cd00b900790059001e00d800cc00bb003c007a007c00b000840027005b00b5001f001c00eb0005009a00a80080 512)
invoke-spec-lane with env: #((bv #x62c625f965271603eccdb979591ed8ccbb3c7a7cb084275bb51f1ceb059aa880 256))
Concrete counter examples:
(#((bv #x62c625f965271603eccdb979591ed8ccbb3c7a7cb084275bb51f1ceb059aa880 256)) #((bv #x2ae86639c54450022e032516324c5f0b86e72686e8e2ac0bc7fe0d247e60b99a 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x62c625f965271603eccdb979591ed8ccbb3c7a7cb084275bb51f1ceb059aa880 256))
Spec Produced:
(bv #x0080 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2ae86639c54450022e032516324c5f0b86e72686e8e2ac0bc7fe0d247e60b99a 256))
Spec Produced:
(bv #x009a 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0)

invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(uint16x32 '(buf uint8 256))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 3.686278seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (uint16x32)hydride.node.0((uint8x32)bounded_input[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.065079seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (uint16x32)hydride.node.1((uint8x32)bounded_input[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.2
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.074569seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 2

Optimized expression: (uint16x32)hydride.node.2((uint8x32)bounded_input[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.3
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Starting synthesis for expr: 3
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.054202seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 3

Optimized expression: (uint16x32)hydride.node.3((uint8x32)bounded_input[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.4
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Starting synthesis for expr: 4
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.075741seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 4

Optimized expression: (uint16x32)hydride.node.4((uint8x32)bounded_input[ramp(64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.5
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Append [; hydride.node.5
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Starting synthesis for expr: 5
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.080762seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 5

Optimized expression: (uint16x32)hydride.node.5((uint8x32)bounded_input[ramp(96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.6
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Append [; hydride.node.6
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Starting synthesis for expr: 6
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.109188seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 6

Optimized expression: (uint16x32)hydride.node.6((uint8x32)bounded_input[ramp(128, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.7
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Append [; hydride.node.7
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Starting synthesis for expr: 7
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.433530seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 7

Optimized expression: (uint16x32)hydride.node.7((uint8x32)bounded_input[ramp(160, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.8
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Append [; hydride.node.8
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Starting synthesis for expr: 8
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.021422seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 8

Optimized expression: (uint16x32)hydride.node.8((uint8x32)bounded_input[ramp(192, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.9
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Append [; hydride.node.9
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Starting synthesis for expr: 9
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.070995seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 9

Optimized expression: (uint16x32)hydride.node.9((uint8x32)bounded_input[ramp(224, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.10
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Append [; hydride.node.10
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Starting synthesis for expr: 10
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 2.048614seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 10

Optimized expression: (uint16x32)hydride.node.10((uint8x32)bounded_input[ramp(256, 1, 32)])
rm: cannot remove '/tmp/base_2099_spec.JSON': No such file or directory
Pruning _mm256_sll_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_srl_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_slli_epi16 as it has an argument of size 8 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sllv_epi16 with score: 5 belonging to target agnostic class _mm512_sllv_epi64
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 7
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
get-expr-grammar with base_name: base_2099

base_2099_grammar.rkt
/tmp/base_2099_grammar.rkt
Writing [{ 
"name": "base_2099" , 
"semantics": [ "(extract bvadd zero-extend bvshl)"] , 
"input_shapes": [[1,16], [1,16], [1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16, 16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2099_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2099_spec.JSON /tmp/base_2099_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_2099 ... 

Grammar:
#<procedure:base_2099>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xd31795bab61c62d38d09f8c92cee67f6088c67fd0f942cac071a0379187edb0d 256)
invoke-spec-lane with env: #((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256))
Concrete counter examples:
(#((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256)) #((bv #x172ade236a915589e4547ead746052b49cafe7eeda8f5f0bebd8802677fcb278 256) (bv #x9fb23e971c0444414d5fc3bcb5897ed281410b17653b926af87ebd91d0710aa3 256) (bv #x40fb5e8262108763acbc7d012ac2d0a8ac1fd5c0a316b734bba70bc270b029d5 256) (bv #x86216d106af7ba90f4d6546acbfea39c0a051a3b469c69c0da885467c6bcf74b 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256))
Spec Produced:
(bv #xdb0d 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x172ade236a915589e4547ead746052b49cafe7eeda8f5f0bebd8802677fcb278 256) (bv #x9fb23e971c0444414d5fc3bcb5897ed281410b17653b926af87ebd91d0710aa3 256) (bv #x40fb5e8262108763acbc7d012ac2d0a8ac1fd5c0a316b734bba70bc270b029d5 256) (bv #x86216d106af7ba90f4d6546acbfea39c0a051a3b469c69c0da885467c6bcf74b 256))
Spec Produced:
(bv #x2120 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5 sym_bv$6 sym_bv$7)

invoke-spec with env: #(sym_bv$4 sym_bv$5 sym_bv$6 sym_bv$7)
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvadd (bvshl (extract 255 240 sym_bv$4) (extract 255 240 sym_bv$5)) (bvadd (extract 255 240 sym_bv$6) (extract 255 240 sym_bv$7))) (bvadd (bvshl (extract ...) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$5 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)]
 [sym_bv$6 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xd31795bab61c62d38d09f8c92cee67f6088c67fd0f942cac071a0379187edb0d 256)
invoke-spec-lane with env: #((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256))
Concrete counter examples:
(#((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256)) #((bv #x172ade236a915589e4547ead746052b49cafe7eeda8f5f0bebd8802677fcb278 256) (bv #x9fb23e971c0444414d5fc3bcb5897ed281410b17653b926af87ebd91d0710aa3 256) (bv #x40fb5e8262108763acbc7d012ac2d0a8ac1fd5c0a316b734bba70bc270b029d5 256) (bv #x86216d106af7ba90f4d6546acbfea39c0a051a3b469c69c0da885467c6bcf74b 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf9bb48045e121eecea53d6f4f786a1409b136e315898ee502452c56ba85df972 256) (bv #xa774f1af48191cb852d172b2b2e52262bed308abe019c0149fefc7b92dca9520 256) (bv #x90069d0584ac57af64a235f07d02b42a4e110bef3950c4172966efc4573b685b 256) (bv #x4311f8b531700b242867c2d9afecb3ccba7b5c0ed6446895ddb413b5c14372b2 256))
Spec Produced:
(bv #xdb0d 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x172ade236a915589e4547ead746052b49cafe7eeda8f5f0bebd8802677fcb278 256) (bv #x9fb23e971c0444414d5fc3bcb5897ed281410b17653b926af87ebd91d0710aa3 256) (bv #x40fb5e8262108763acbc7d012ac2d0a8ac1fd5c0a316b734bba70bc270b029d5 256) (bv #x86216d106af7ba90f4d6546acbfea39c0a051a3b469c69c0da885467c6bcf74b 256))
Spec Produced:
(bv #x2120 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xca962a4187c1bfe72d06e4c4aee43113c96612ac55bd5c2f07e8a6ba253aa138 256)
invoke-spec-lane with env: #((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256))
Concrete counter examples:
(#((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256)) #((bv #xdde356bc1136d0f1214d9cbcac3a20554b087aadb7cd780b64946fb5e0cdd96a 256) (bv #x56edc6edbb0c0b2825e1a19a2d15912c32eeee78f25ea41651ee13b3afe5f0b0 256) (bv #xf046e2732e203e96c637c165e27c5f8a84dc356e360cb37b0c8dd309fb1b8d9a 256) (bv #x2d5d57fb2f25c62a66e86d1c1076fa70a7994fe0f7f012dbb5ba17ea98edfabe 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256))
Spec Produced:
(bv #xa138 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xdde356bc1136d0f1214d9cbcac3a20554b087aadb7cd780b64946fb5e0cdd96a 256) (bv #x56edc6edbb0c0b2825e1a19a2d15912c32eeee78f25ea41651ee13b3afe5f0b0 256) (bv #xf046e2732e203e96c637c165e27c5f8a84dc356e360cb37b0c8dd309fb1b8d9a 256) (bv #x2d5d57fb2f25c62a66e86d1c1076fa70a7994fe0f7f012dbb5ba17ea98edfabe 256))
Spec Produced:
(bv #x8858 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$12 sym_bv$13 sym_bv$14 sym_bv$15)

invoke-spec with env: #(sym_bv$12 sym_bv$13 sym_bv$14 sym_bv$15)
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvadd (bvshl (extract 255 240 sym_bv$12) (extract 255 240 sym_bv$13)) (bvadd (extract 255 240 sym_bv$14) (extract 255 240 sym_bv$15))) (bvadd (bvshl (extract ...) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$12 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$13 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)]
 [sym_bv$14 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xca962a4187c1bfe72d06e4c4aee43113c96612ac55bd5c2f07e8a6ba253aa138 256)
invoke-spec-lane with env: #((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256))
Concrete counter examples:
(#((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256)) #((bv #xdde356bc1136d0f1214d9cbcac3a20554b087aadb7cd780b64946fb5e0cdd96a 256) (bv #x56edc6edbb0c0b2825e1a19a2d15912c32eeee78f25ea41651ee13b3afe5f0b0 256) (bv #xf046e2732e203e96c637c165e27c5f8a84dc356e360cb37b0c8dd309fb1b8d9a 256) (bv #x2d5d57fb2f25c62a66e86d1c1076fa70a7994fe0f7f012dbb5ba17ea98edfabe 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6c07443cebaafa991e1e4ab6d2c5b89a5ef9c3715a7526b337cd5078d13c728e 256) (bv #x52d7840a5836c71380a075ad9fc9a9f5cb616a3ad7adce39b969b5e41ac3eaad 256) (bv #x612fcf64f92555be36ae3337b2d49d0685cdf7befbe61b18364cf5ad075a6022 256) (bv #x69675add8e9c6a29f658b18dfc10940d43991aee59d74117d19cb10d1de04116 256))
Spec Produced:
(bv #xa138 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xdde356bc1136d0f1214d9cbcac3a20554b087aadb7cd780b64946fb5e0cdd96a 256) (bv #x56edc6edbb0c0b2825e1a19a2d15912c32eeee78f25ea41651ee13b3afe5f0b0 256) (bv #xf046e2732e203e96c637c165e27c5f8a84dc356e360cb37b0c8dd309fb1b8d9a 256) (bv #x2d5d57fb2f25c62a66e86d1c1076fa70a7994fe0f7f012dbb5ba17ea98edfabe 256))
Spec Produced:
(bv #x8858 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)

invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
verify-across-lanes returned #t ... 

Test elapsed time: 
18
(vec-add
 (vec-shl '(buf uint16 256) '(buf uint16 256))
 (vec-add '(buf uint16 256) '(buf uint16 256)))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000rm: cannot remove '/tmp/base_5552_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5552

base_5552_grammar.rkt
/tmp/base_5552_grammar.rkt
Writing [{ 
"name": "base_5552" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 16]] 
}
] to file /tmp/base_5552_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5552_spec.JSON /tmp/base_5552_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5552 ... 

Grammar:
#<procedure:base_5552>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #()

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification took 0 seconds

(model)
Verification failed :(
#()
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification failed ...
	spec produced: (bv #x0001000100010001000100010001000100010001000100010001000100010001 256) 256 
	synthesized result produced: (bv #x0000000100000001000000010000000100000001000000010000000100000001 256) 256

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Difference  Predicate
'((0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #() #())
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x16 (int-imm (bv #x0001 16) #f))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.11
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Append [; hydride.node.11
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Starting synthesis for expr: 11
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t684, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t687, 1, 16)] + (uint16x16)input_16[ramp(t691, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 22.364269seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 11

Optimized expression: (uint16x16)hydride.node.11((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], (uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)], (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_11 from hydride_hash_11.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.12
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.12.rkt

Completed writing to file ...
Append [; hydride.node.12
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.12.rkt /tmp/test.ll
Storing synth log map synth_hash_12 to /tmp/hydride_hash_12.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_12 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_12.rkt

Completed writing to file ...
Starting synthesis for expr: 12
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t695, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t699, 1, 16)] + (uint16x16)input_16[ramp(t704, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.828334seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 12

Optimized expression: (uint16x16)hydride.node.12((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_12 from hydride_hash_12.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.13
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.13.rkt

Completed writing to file ...
Append [; hydride.node.13
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.13.rkt /tmp/test.ll
Storing synth log map synth_hash_13 to /tmp/hydride_hash_13.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_13 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_13.rkt

Completed writing to file ...
Starting synthesis for expr: 13
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t709, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t713, 1, 16)] + (uint16x16)input_16[ramp(t718, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.251608seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 13

Optimized expression: (uint16x16)hydride.node.13((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_13 from hydride_hash_13.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.14
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.14.rkt

Completed writing to file ...
Append [; hydride.node.14
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.14.rkt /tmp/test.ll
Storing synth log map synth_hash_14 to /tmp/hydride_hash_14.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_14 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_14.rkt

Completed writing to file ...
Starting synthesis for expr: 14
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t723, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t727, 1, 16)] + (uint16x16)input_16[ramp(t732, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.250951seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 14

Optimized expression: (uint16x16)hydride.node.14((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_14 from hydride_hash_14.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.15
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.15.rkt

Completed writing to file ...
Append [; hydride.node.15
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.15.rkt /tmp/test.ll
Storing synth log map synth_hash_15 to /tmp/hydride_hash_15.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_15 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_15.rkt

Completed writing to file ...
Starting synthesis for expr: 15
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t737, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t741, 1, 16)] + (uint16x16)input_16[ramp(t746, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.242392seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 15

Optimized expression: (uint16x16)hydride.node.15((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_15 from hydride_hash_15.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.16
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.16.rkt

Completed writing to file ...
Append [; hydride.node.16
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.16.rkt /tmp/test.ll
Storing synth log map synth_hash_16 to /tmp/hydride_hash_16.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_16 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_16.rkt

Completed writing to file ...
Starting synthesis for expr: 16
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t751, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t755, 1, 16)] + (uint16x16)input_16[ramp(t760, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.254823seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 16

Optimized expression: (uint16x16)hydride.node.16((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_16 from hydride_hash_16.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.17
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.17.rkt

Completed writing to file ...
Append [; hydride.node.17
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.17.rkt /tmp/test.ll
Storing synth log map synth_hash_17 to /tmp/hydride_hash_17.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_17 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_17.rkt

Completed writing to file ...
Starting synthesis for expr: 17
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t765, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t769, 1, 16)] + (uint16x16)input_16[ramp(t774, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.268591seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 17

Optimized expression: (uint16x16)hydride.node.17((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_17 from hydride_hash_17.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.18
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.18.rkt

Completed writing to file ...
Append [; hydride.node.18
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.18.rkt /tmp/test.ll
Storing synth log map synth_hash_18 to /tmp/hydride_hash_18.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_18 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_18.rkt

Completed writing to file ...
Starting synthesis for expr: 18
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t779, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t783, 1, 16)] + (uint16x16)input_16[ramp(t788, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.268090seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 18

Optimized expression: (uint16x16)hydride.node.18((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_18 from hydride_hash_18.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.19
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.19.rkt

Completed writing to file ...
Append [; hydride.node.19
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.19.rkt /tmp/test.ll
Storing synth log map synth_hash_19 to /tmp/hydride_hash_19.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_19 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_19.rkt

Completed writing to file ...
Starting synthesis for expr: 19
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t793, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t797, 1, 16)] + (uint16x16)input_16[ramp(t802, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.634066seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 19

Optimized expression: (uint16x16)hydride.node.19((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)])
Starting synthesis for expr: 20
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sub_epi16 with score: 5 belonging to target agnostic class _mm_sub_pi16
Adding:  _mm256_hsub_epi16 with score: 5 belonging to target agnostic class _mm256_hsub_epi32
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_min_epu16 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu16 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 7
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_19 from hydride_hash_19.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
get-expr-grammar with base_name: base_3455

base_3455_grammar.rkt
/tmp/base_3455_grammar.rkt
Writing [{ 
"name": "base_3455" , 
"semantics": [ "(extract bvsub zero-extend #<procedure:bvumax> #<procedure:bvumin>)"] , 
"input_shapes": [[1,16], [1,16], [1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16, 16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3455_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3455_spec.JSON /tmp/base_3455_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_3455 ... 

Grammar:
#<procedure:base_3455>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xbfa61c311239d47272aeef6bdfb7dfc35cea8997b250fa3f6b2011f61c88a5fc 256) (bv #xcd66a3dc9ddd7cbc927536470007e27572886f94039ebe0a5f5f807d169a3d21 256) (bv #x0dbddb491b7f3a96a3fa1ce78b7b4be087bb1742c995a2db914610d5b08876b7 256) (bv #xafaa9033b0ce96e025c893f4c787539196dcbc5206fc96046d16b8a357b922c7 256))
(vec-sub (vec-max (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #xbfa913a9825e99dc6cadd284543c9695eacd7255ab54643bfe0a6fa8c4cf8335 256)
invoke-spec-lane with env: #((bv #xbfa61c311239d47272aeef6bdfb7dfc35cea8997b250fa3f6b2011f61c88a5fc 256) (bv #xcd66a3dc9ddd7cbc927536470007e27572886f94039ebe0a5f5f807d169a3d21 256) (bv #x0dbddb491b7f3a96a3fa1ce78b7b4be087bb1742c995a2db914610d5b08876b7 256) (bv #xafaa9033b0ce96e025c893f4c787539196dcbc5206fc96046d16b8a357b922c7 256))
Concrete counter examples:
(#((bv #xbfa61c311239d47272aeef6bdfb7dfc35cea8997b250fa3f6b2011f61c88a5fc 256) (bv #xcd66a3dc9ddd7cbc927536470007e27572886f94039ebe0a5f5f807d169a3d21 256) (bv #x0dbddb491b7f3a96a3fa1ce78b7b4be087bb1742c995a2db914610d5b08876b7 256) (bv #xafaa9033b0ce96e025c893f4c787539196dcbc5206fc96046d16b8a357b922c7 256)) #((bv #x3defee2a4d2d39d4578a2a11d55eda1864061993f871c8393ffc2c799c33320e 256) (bv #x4dddc737fd8acdfd5e606ca0c11a786c5da652cfb67cfd9be586ef98e963e000 256) (bv #x3c21fd8ece8bb7b9da3910bc38320e567b03fc34763a7953824bf769b8250246 256) (bv #x48c454f78927d8f48c6cd928fe4011d6697e797bb4ba91877fd1bb122c226de7 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xbfa61c311239d47272aeef6bdfb7dfc35cea8997b250fa3f6b2011f61c88a5fc 256) (bv #xcd66a3dc9ddd7cbc927536470007e27572886f94039ebe0a5f5f807d169a3d21 256) (bv #x0dbddb491b7f3a96a3fa1ce78b7b4be087bb1742c995a2db914610d5b08876b7 256) (bv #xafaa9033b0ce96e025c893f4c787539196dcbc5206fc96046d16b8a357b922c7 256))
Spec Produced:
(bv #x8335 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x3defee2a4d2d39d4578a2a11d55eda1864061993f871c8393ffc2c799c33320e 256) (bv #x4dddc737fd8acdfd5e606ca0c11a786c5da652cfb67cfd9be586ef98e963e000 256) (bv #x3c21fd8ece8bb7b9da3910bc38320e567b03fc34763a7953824bf769b8250246 256) (bv #x48c454f78927d8f48c6cd928fe4011d6697e797bb4ba91877fd1bb122c226de7 256))
Spec Produced:
(bv #xddba 16)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb21cbef08cdb2f0863fdb51be886ddabf0fb8b14c74913fc1d52bcaa7548652f 256) (bv #x2cef675e3cfca09a426489a02d7f4529ddc6d21dc2f9034913f60e9458a0e43b 256) (bv #xa6493a1f498d119792c93f151a1c4561a6192088832a3fdf968bab75776b24cc 256) (bv #xd91a7d16e7b09287d03d9856476d024ea79bb7fc615105224f28bcf7bfb7c2d9 256))
(vec-sub (vec-max (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256)))
Spec result
(bv #x0bd384d1434e8f03d1347606ce6adb5d4ae2b19565f80edace2a1135fdddbf6f 256)
invoke-spec-lane with env: #((bv #xb21cbef08cdb2f0863fdb51be886ddabf0fb8b14c74913fc1d52bcaa7548652f 256) (bv #x2cef675e3cfca09a426489a02d7f4529ddc6d21dc2f9034913f60e9458a0e43b 256) (bv #xa6493a1f498d119792c93f151a1c4561a6192088832a3fdf968bab75776b24cc 256) (bv #xd91a7d16e7b09287d03d9856476d024ea79bb7fc615105224f28bcf7bfb7c2d9 256))
Concrete counter examples:
(#((bv #xb21cbef08cdb2f0863fdb51be886ddabf0fb8b14c74913fc1d52bcaa7548652f 256) (bv #x2cef675e3cfca09a426489a02d7f4529ddc6d21dc2f9034913f60e9458a0e43b 256) (bv #xa6493a1f498d119792c93f151a1c4561a6192088832a3fdf968bab75776b24cc 256) (bv #xd91a7d16e7b09287d03d9856476d024ea79bb7fc615105224f28bcf7bfb7c2d9 256)) #((bv #x99f602f31eb94dc61534ab3b9e18a57747aad2912e6c0202d5efd68b2e25d4fb 256) (bv #xcd97ab60037e828513ffb8647cebf1d63a897857f349616ce278a189ee50bdb1 256) (bv #x8d8852d81231a8546030bdfe18c869c66bdda732c53b8065d2dd5e2c38d8c0f8 256) (bv #x2b48f548b0909d7e8ecf3ee2191dc07e6468c740613ccb6206fcfd25fee13915 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb21cbef08cdb2f0863fdb51be886ddabf0fb8b14c74913fc1d52bcaa7548652f 256) (bv #x2cef675e3cfca09a426489a02d7f4529ddc6d21dc2f9034913f60e9458a0e43b 256) (bv #xa6493a1f498d119792c93f151a1c4561a6192088832a3fdf968bab75776b24cc 256) (bv #xd91a7d16e7b09287d03d9856476d024ea79bb7fc615105224f28bcf7bfb7c2d9 256))
Spec Produced:
(bv #xbf6f 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x99f602f31eb94dc61534ab3b9e18a57747aad2912e6c0202d5efd68b2e25d4fb 256) (bv #xcd97ab60037e828513ffb8647cebf1d63a897857f349616ce278a189ee50bdb1 256) (bv #x8d8852d81231a8546030bdfe18c869c66bdda732c53b8065d2dd5e2c38d8c0f8 256) (bv #x2b48f548b0909d7e8ecf3ee2191dc07e6468c740613ccb6206fcfd25fee13915 256))
Spec Produced:
(bv #x9be6 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
verify-across-lanes returned #t ... 

Test elapsed time: 
9
(vec-sub
 (vec-max '(buf uint16 256) '(buf uint16 256))
 (vec-min '(buf uint16 256) '(buf uint16 256)))
#(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)
Synthesis step completed!
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.20
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.20.rkt

Completed writing to file ...
Append [; hydride.node.20
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.20.rkt /tmp/test.ll
Storing synth log map synth_hash_20 to /tmp/hydride_hash_20.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_20 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_20.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 12.765875seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 20

Optimized expression: (uint16x16)hydride.node.20((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)])
Starting synthesis for expr: 21
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_20 from hydride_hash_20.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.21
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.21.rkt

Completed writing to file ...
Append [; hydride.node.21
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.21.rkt /tmp/test.ll
Storing synth log map synth_hash_21 to /tmp/hydride_hash_21.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_21 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_21.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.547505seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 21

Optimized expression: (uint16x16)hydride.node.21((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)])
Starting synthesis for expr: 22
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_21 from hydride_hash_21.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.22
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.22.rkt

Completed writing to file ...
Append [; hydride.node.22
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.22.rkt /tmp/test.ll
Storing synth log map synth_hash_22 to /tmp/hydride_hash_22.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_22 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_22.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.130537seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 22

Optimized expression: (uint16x16)hydride.node.22((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)])
Starting synthesis for expr: 23
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_22 from hydride_hash_22.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.23
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.23.rkt

Completed writing to file ...
Append [; hydride.node.23
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.23.rkt /tmp/test.ll
Storing synth log map synth_hash_23 to /tmp/hydride_hash_23.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_23 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_23.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.167772seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 23

Optimized expression: (uint16x16)hydride.node.23((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)])
Starting synthesis for expr: 24
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_23 from hydride_hash_23.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.24
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.24.rkt

Completed writing to file ...
Append [; hydride.node.24
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.24.rkt /tmp/test.ll
Storing synth log map synth_hash_24 to /tmp/hydride_hash_24.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_24 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_24.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.075763seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 24

Optimized expression: (uint16x16)hydride.node.24((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)])
Starting synthesis for expr: 25
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_24 from hydride_hash_24.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.25
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.25.rkt

Completed writing to file ...
Append [; hydride.node.25
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.25.rkt /tmp/test.ll
Storing synth log map synth_hash_25 to /tmp/hydride_hash_25.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_25 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_25.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.186342seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 25

Optimized expression: (uint16x16)hydride.node.25((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)])
Starting synthesis for expr: 26
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_25 from hydride_hash_25.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.26
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.26.rkt

Completed writing to file ...
Append [; hydride.node.26
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.26.rkt /tmp/test.ll
Storing synth log map synth_hash_26 to /tmp/hydride_hash_26.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_26 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_26.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.178124seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 26

Optimized expression: (uint16x16)hydride.node.26((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)])
Starting synthesis for expr: 27
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_26 from hydride_hash_26.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.27
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.27.rkt

Completed writing to file ...
Append [; hydride.node.27
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.27.rkt /tmp/test.ll
Storing synth log map synth_hash_27 to /tmp/hydride_hash_27.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_27 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_27.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.075600seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 27

Optimized expression: (uint16x16)hydride.node.27((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_27 from hydride_hash_27.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.28
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.28.rkt

Completed writing to file ...
Append [; hydride.node.28
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.28.rkt /tmp/test.ll
Storing synth log map synth_hash_28 to /tmp/hydride_hash_28.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_28 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_28.rkt

Completed writing to file ...
Starting synthesis for expr: 28
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t821, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t822, 1, 16)] + (uint16x16)input_16[ramp(t823, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.446678seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 28

Optimized expression: (uint16x16)hydride.node.28((uint16x16)input_16[ramp(t239 + 65, 1, 16)], (uint16x16)input_16[ramp(t239 + 66, 1, 16)], (uint16x16)input_16[ramp(t239 + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_28 from hydride_hash_28.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.29
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.29.rkt

Completed writing to file ...
Append [; hydride.node.29
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.29.rkt /tmp/test.ll
Storing synth log map synth_hash_29 to /tmp/hydride_hash_29.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_29 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_29.rkt

Completed writing to file ...
Starting synthesis for expr: 29
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t826, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t827, 1, 16)] + (uint16x16)input_16[ramp(t828, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.256656seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 29

Optimized expression: (uint16x16)hydride.node.29((uint16x16)input_16[ramp(t240 + 81, 1, 16)], (uint16x16)input_16[ramp(t240 + 82, 1, 16)], (uint16x16)input_16[ramp(t240 + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_29 from hydride_hash_29.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.30
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.30.rkt

Completed writing to file ...
Append [; hydride.node.30
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.30.rkt /tmp/test.ll
Storing synth log map synth_hash_30 to /tmp/hydride_hash_30.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_30 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_30.rkt

Completed writing to file ...
Starting synthesis for expr: 30
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t831, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t832, 1, 16)] + (uint16x16)input_16[ramp(t833, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.241248seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 30

Optimized expression: (uint16x16)hydride.node.30((uint16x16)input_16[ramp(t241 + 97, 1, 16)], (uint16x16)input_16[ramp(t241 + 98, 1, 16)], (uint16x16)input_16[ramp(t241 + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_30 from hydride_hash_30.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.31
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.31.rkt

Completed writing to file ...
Append [; hydride.node.31
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.31.rkt /tmp/test.ll
Storing synth log map synth_hash_31 to /tmp/hydride_hash_31.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_31 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_31.rkt

Completed writing to file ...
Starting synthesis for expr: 31
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t836, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t837, 1, 16)] + (uint16x16)input_16[ramp(t838, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.339978seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 31

Optimized expression: (uint16x16)hydride.node.31((uint16x16)input_16[ramp(t242 + 113, 1, 16)], (uint16x16)input_16[ramp(t242 + 114, 1, 16)], (uint16x16)input_16[ramp(t242 + 112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_31 from hydride_hash_31.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.32
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.32.rkt

Completed writing to file ...
Append [; hydride.node.32
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.32.rkt /tmp/test.ll
Storing synth log map synth_hash_32 to /tmp/hydride_hash_32.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_32 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_32.rkt

Completed writing to file ...
Starting synthesis for expr: 32
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t841, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t842, 1, 16)] + (uint16x16)input_16[ramp(t843, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.372451seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 32

Optimized expression: (uint16x16)hydride.node.32((uint16x16)input_16[ramp(t243 + 65, 1, 16)], (uint16x16)input_16[ramp(t243 + 66, 1, 16)], (uint16x16)input_16[ramp(t243 + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_32 from hydride_hash_32.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.33
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.33.rkt

Completed writing to file ...
Append [; hydride.node.33
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.33.rkt /tmp/test.ll
Storing synth log map synth_hash_33 to /tmp/hydride_hash_33.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_33 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_33.rkt

Completed writing to file ...
Starting synthesis for expr: 33
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t846, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t847, 1, 16)] + (uint16x16)input_16[ramp(t848, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.267894seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 33

Optimized expression: (uint16x16)hydride.node.33((uint16x16)input_16[ramp(t244 + 81, 1, 16)], (uint16x16)input_16[ramp(t244 + 82, 1, 16)], (uint16x16)input_16[ramp(t244 + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_33 from hydride_hash_33.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.34
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.34.rkt

Completed writing to file ...
Append [; hydride.node.34
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.34.rkt /tmp/test.ll
Storing synth log map synth_hash_34 to /tmp/hydride_hash_34.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_34 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_34.rkt

Completed writing to file ...
Starting synthesis for expr: 34
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t851, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t852, 1, 16)] + (uint16x16)input_16[ramp(t853, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.281452seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 34

Optimized expression: (uint16x16)hydride.node.34((uint16x16)input_16[ramp(t245 + 97, 1, 16)], (uint16x16)input_16[ramp(t245 + 98, 1, 16)], (uint16x16)input_16[ramp(t245 + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_34 from hydride_hash_34.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.35
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.35.rkt

Completed writing to file ...
Append [; hydride.node.35
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.35.rkt /tmp/test.ll
Storing synth log map synth_hash_35 to /tmp/hydride_hash_35.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_35 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_35.rkt

Completed writing to file ...
Starting synthesis for expr: 35
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t856, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t857, 1, 16)] + (uint16x16)input_16[ramp(t858, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.648022seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 35

Optimized expression: (uint16x16)hydride.node.35((uint16x16)input_16[ramp(t246 + 113, 1, 16)], (uint16x16)input_16[ramp(t246 + 114, 1, 16)], (uint16x16)input_16[ramp(t246 + 112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_35 from hydride_hash_35.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.36
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.36.rkt

Completed writing to file ...
Append [; hydride.node.36
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.36.rkt /tmp/test.ll
Storing synth log map synth_hash_36 to /tmp/hydride_hash_36.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_36 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_36.rkt

Completed writing to file ...
Starting synthesis for expr: 36
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t861, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t862, 1, 16)] + (uint16x16)input_16[ramp(t863, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.260478seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 36

Optimized expression: (uint16x16)hydride.node.36((uint16x16)input_16[ramp(t306 + 65, 1, 16)], (uint16x16)input_16[ramp(t306 + 66, 1, 16)], (uint16x16)input_16[ramp(t306 + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_36 from hydride_hash_36.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.37
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.37.rkt

Completed writing to file ...
Append [; hydride.node.37
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.37.rkt /tmp/test.ll
Storing synth log map synth_hash_37 to /tmp/hydride_hash_37.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_37 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_37.rkt

Completed writing to file ...
Starting synthesis for expr: 37
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t864, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t865, 1, 16)] + (uint16x16)input_16[ramp(t866, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.373532seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 37

Optimized expression: (uint16x16)hydride.node.37((uint16x16)input_16[ramp(t306 + 81, 1, 16)], (uint16x16)input_16[ramp(t306 + 82, 1, 16)], (uint16x16)input_16[ramp(t306 + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_37 from hydride_hash_37.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.38
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.38.rkt

Completed writing to file ...
Append [; hydride.node.38
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.38.rkt /tmp/test.ll
Storing synth log map synth_hash_38 to /tmp/hydride_hash_38.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_38 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_38.rkt

Completed writing to file ...
Starting synthesis for expr: 38
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t867, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t868, 1, 16)] + (uint16x16)input_16[ramp(t869, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.251532seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 38

Optimized expression: (uint16x16)hydride.node.38((uint16x16)input_16[ramp(t306 + 97, 1, 16)], (uint16x16)input_16[ramp(t306 + 98, 1, 16)], (uint16x16)input_16[ramp(t306 + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_38 from hydride_hash_38.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.39
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.39.rkt

Completed writing to file ...
Append [; hydride.node.39
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.39.rkt /tmp/test.ll
Storing synth log map synth_hash_39 to /tmp/hydride_hash_39.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_39 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_39.rkt

Completed writing to file ...
Starting synthesis for expr: 39
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t870, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t871, 1, 16)] + (uint16x16)input_16[ramp(t872, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.394200seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 39

Optimized expression: (uint16x16)hydride.node.39((uint16x16)input_16[ramp(t306 + 113, 1, 16)], (uint16x16)input_16[ramp(t306 + 114, 1, 16)], (uint16x16)input_16[ramp(t306 + 112, 1, 16)])
Starting synthesis for expr: 40
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_39 from hydride_hash_39.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.40
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.40.rkt

Completed writing to file ...
Append [; hydride.node.40
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.40.rkt /tmp/test.ll
Storing synth log map synth_hash_40 to /tmp/hydride_hash_40.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_40 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_40.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.076352seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 40

Optimized expression: (uint16x16)hydride.node.40((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Starting synthesis for expr: 41
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_40 from hydride_hash_40.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.41
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.41.rkt

Completed writing to file ...
Append [; hydride.node.41
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.41.rkt /tmp/test.ll
Storing synth log map synth_hash_41 to /tmp/hydride_hash_41.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_41 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_41.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.130443seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 41

Optimized expression: (uint16x16)hydride.node.41((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Starting synthesis for expr: 42
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_41 from hydride_hash_41.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.42
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.42.rkt

Completed writing to file ...
Append [; hydride.node.42
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.42.rkt /tmp/test.ll
Storing synth log map synth_hash_42 to /tmp/hydride_hash_42.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_42 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_42.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.450203seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 42

Optimized expression: (uint16x16)hydride.node.42((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Starting synthesis for expr: 43
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_42 from hydride_hash_42.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.43
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.43.rkt

Completed writing to file ...
Append [; hydride.node.43
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.43.rkt /tmp/test.ll
Storing synth log map synth_hash_43 to /tmp/hydride_hash_43.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_43 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_43.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.073257seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 43

Optimized expression: (uint16x16)hydride.node.43((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
rm: cannot remove '/tmp/base_3277_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_min_epu16 with score: 3 belonging to target agnostic class _m_pminub
Adding:  _mm256_min_epu8 with score: 3 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 11
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_43 from hydride_hash_43.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_3277

base_3277_grammar.rkt
/tmp/base_3277_grammar.rkt
Writing [{ 
"name": "base_3277" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3277_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3277_spec.JSON /tmp/base_3277_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_3277 ... 

Grammar:
#<procedure:base_3277>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x74e0edeac6db650d160f192d40d0cf1729f20277145a9287669281376d9f28bc 256)
invoke-spec-lane with env: #((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512))
Concrete counter examples:
(#((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512)) #((bv #xfa39eb5406b2e951689a0dcdb80a834e8f82f7718da54607ea44969c4f9654023831c4e0cda3ef90d902316ec65ade386eaba567176b01e3c2cac6567aba0e8c 512) (bv #x8b81597431f3fc9933be352cbf2c612338e8fc1257c05186e68555086041616cbd72c69c2cefabc8ca2948adf3688ce56c66bba663cc0f09edd7711e990a328b 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512))
Spec Produced:
(bv #xbc 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfa39eb5406b2e951689a0dcdb80a834e8f82f7718da54607ea44969c4f9654023831c4e0cda3ef90d902316ec65ade386eaba567176b01e3c2cac6567aba0e8c 512) (bv #x8b81597431f3fc9933be352cbf2c612338e8fc1257c05186e68555086041616cbd72c69c2cefabc8ca2948adf3688ce56c66bba663cc0f09edd7711e990a328b 512))
Spec Produced:
(bv #x8c 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 7 0 (ite (bvule (extract 511 496 sym_bv$2) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #x00820100000201000002010000010100000201000002010000020100000201000002010000020100000201000002010000020100000201000002010000020100 512)]
 [sym_bv$3 (bv #x008100000001000000010000ffff0000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000 512)] ...)
Verification failed :(
#((bv #x00820100000201000002010000010100000201000002010000020100000201000002010000020100000201000002010000020100000201000002010000020100 512) (bv #x008100000001000000010000ffff0000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000 512))
invoke-spec with env: #((bv #x00820100000201000002010000010100000201000002010000020100000201000002010000020100000201000002010000020100000201000002010000020100 512) (bv #x008100000001000000010000ffff0000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x8100010001000100010001000100010001000100010001000100010001000100 256)
(bv #x8100010001000100010001000100010001000100010001000100010001000100 256)
Verification failed ...
	spec produced: (bv #x8100010001000100010001000100010001000100010001000100010001000100 256) 256 
	synthesized result produced: (bv #x0100010001000100010001000100010001000100010001000100010001000100 256) 256

invoke-spec with env: #((bv #x00820100000201000002010000010100000201000002010000020100000201000002010000020100000201000002010000020100000201000002010000020100 512) (bv #x008100000001000000010000ffff0000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x8100010001000100010001000100010001000100010001000100010001000100 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(31)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x74e0edeac6db650d160f192d40d0cf1729f20277145a9287669281376d9f28bc 256)
invoke-spec-lane with env: #((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512))
Concrete counter examples:
(#((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512)) #((bv #xfa39eb5406b2e951689a0dcdb80a834e8f82f7718da54607ea44969c4f9654023831c4e0cda3ef90d902316ec65ade386eaba567176b01e3c2cac6567aba0e8c 512) (bv #x8b81597431f3fc9933be352cbf2c612338e8fc1257c05186e68555086041616cbd72c69c2cefabc8ca2948adf3688ce56c66bba663cc0f09edd7711e990a328b 512)) #((bv #x00820100000201000002010000010100000201000002010000020100000201000002010000020100000201000002010000020100000201000002010000020100 512) (bv #x008100000001000000010000ffff0000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000 512)))
Failing lanes examples:
(0 0 31)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8b7449e0b1edee13daadfc73eae45b0d4e16c4b393ecaecdc72f51d018cfa1896a29dab80b028775dc79315ad27420871566e9590281455f466d629f55282abc 512) (bv #xdae5d75fc28e01ea72c627db0f65f07dcb0a2e0f1319122d5f406656d4566117be57bef23a5107778514a6eab3929a50c63e88926a7b07375040e643ce063f9f 512))
Spec Produced:
(bv #xbc 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfa39eb5406b2e951689a0dcdb80a834e8f82f7718da54607ea44969c4f9654023831c4e0cda3ef90d902316ec65ade386eaba567176b01e3c2cac6567aba0e8c 512) (bv #x8b81597431f3fc9933be352cbf2c612338e8fc1257c05186e68555086041616cbd72c69c2cefabc8ca2948adf3688ce56c66bba663cc0f09edd7711e990a328b 512))
Spec Produced:
(bv #x8c 8)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x00820100000201000002010000010100000201000002010000020100000201000002010000020100000201000002010000020100000201000002010000020100 512) (bv #x008100000001000000010000ffff0000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000 512))
Spec Produced:
(bv #x81 8)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x980b1bf3b3a7a464685b1a2a9018695795d72a6330f4a82f5a7ecd56a76d09f1 256)
invoke-spec-lane with env: #((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512))
Concrete counter examples:
(#((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512)) #((bv #x86eac7a8807162618701edde66cb5596c631bb2c63daa9e175841e3653977c255c7161f784018c883c269fb08b6978e8d753a9a39e34124b570eea07a09a9848 512) (bv #x1509086d70b3e13e1074f55dc6853e759f1d6f36c0f980eacbe72467566937c826cf18dd2611237680d4bbb74a019d644af014bb27d39a2b5a78f38296061835 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512))
Spec Produced:
(bv #xf1 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x86eac7a8807162618701edde66cb5596c631bb2c63daa9e175841e3653977c255c7161f784018c883c269fb08b6978e8d753a9a39e34124b570eea07a09a9848 512) (bv #x1509086d70b3e13e1074f55dc6853e759f1d6f36c0f980eacbe72467566937c826cf18dd2611237680d4bbb74a019d644af014bb27d39a2b5a78f38296061835 512))
Spec Produced:
(bv #x35 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x1 4)) 256 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x1 4)) 256 8 16 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec with env: #(sym_bv$6 sym_bv$7)
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 7 0 (ite (bvule (extract 511 496 sym_bv$6) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 1 seconds

(model
 [sym_bv$6 (bv #x00800001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010080000100010001 512)]
 [sym_bv$7 (bv #xff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000 512)] ...)
Verification failed :(
#((bv #x00800001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010080000100010001 512) (bv #xff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000 512))
invoke-spec with env: #((bv #x00800001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010080000100010001 512) (bv #xff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000040000000 256)
(bv #x8000000000000000000000000000000000000000000000000000000040000000 256)
Verification failed ...
	spec produced: (bv #x8000000000000000000000000000000000000000000000000000000040000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000040000000 256) 256

invoke-spec with env: #((bv #x00800001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010080000100010001 512) (bv #xff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000040000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(31)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512))
(uint8x32 (vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x980b1bf3b3a7a464685b1a2a9018695795d72a6330f4a82f5a7ecd56a76d09f1 256)
invoke-spec-lane with env: #((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512))
Concrete counter examples:
(#((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512)) #((bv #x86eac7a8807162618701edde66cb5596c631bb2c63daa9e175841e3653977c255c7161f784018c883c269fb08b6978e8d753a9a39e34124b570eea07a09a9848 512) (bv #x1509086d70b3e13e1074f55dc6853e759f1d6f36c0f980eacbe72467566937c826cf18dd2611237680d4bbb74a019d644af014bb27d39a2b5a78f38296061835 512)) #((bv #x00800001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010080000100010001 512) (bv #xff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000 512)))
Failing lanes examples:
(0 0 31)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0498a99c53c48553341eb7de20a43064fe81505b341a922ab18e751897690f57e59edfe2a8ea1763fb9764f48b298e95ce5a7b80d9b035563f5e156d59b5619c 512) (bv #x78cc110b151b55f31ab305a75b658384ea6865c0934eed179690de54d2bd46396b957cd7582ae2d8f630912010a8122fe47e0b7ec9cd92df33a774be25093af1 512))
Spec Produced:
(bv #xf1 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x86eac7a8807162618701edde66cb5596c631bb2c63daa9e175841e3653977c255c7161f784018c883c269fb08b6978e8d753a9a39e34124b570eea07a09a9848 512) (bv #x1509086d70b3e13e1074f55dc6853e759f1d6f36c0f980eacbe72467566937c826cf18dd2611237680d4bbb74a019d644af014bb27d39a2b5a78f38296061835 512))
Spec Produced:
(bv #x35 8)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x00800001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010080000100010001 512) (bv #xff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000 512))
Spec Produced:
(bv #x80 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
 256
 8
 16
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
verify-across-lanes returned #t ... 

Test elapsed time: 
12
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512)))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (regrm: cannot remove '/tmp/base_3307_spec.JSON': No such file or directory
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 512
Pruning _mm512_cvtepu8_epi16 as it has an argument of size 256 which is smaller than 512
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 2
 (bv #x0 4)) 512 16) 256 8 16 0)
Cost
7
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_3307

base_3307_grammar.rkt
/tmp/base_3307_grammar.rkt
Writing [{ 
"name": "base_3307" , 
"semantics": [ "(extract bvadd zero-extend)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3307_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3307_spec.JSON /tmp/base_3307_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_3307 ... 

Grammar:
#<procedure:base_3307>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x32136095f9fa5d79b9b4429a06eaf8e410f1c007ca84bbb5de9cdbdda3b867a4a8ede8fbc35ef305e3011bc0a8f709a81f30d689d336f04af697344cc919213f 512) (bv #x25b2d6bbe37a7208f9b15df98cd52884411199f219fe323f3d317815fb2ddfebf3535f2b9f8fbfe65777f009cf34e86869847c0d3e2228f38e49ee744705a92f 512))
(vec-add (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x57c53750dd74cf81b365a09393bf2168520259f9e482edf41bcd53f29ee5478f9c40482662edb2eb3a780bc9782bf21088b452961158193d84e022c0101eca6e 512)
invoke-spec-lane with env: #((bv #x32136095f9fa5d79b9b4429a06eaf8e410f1c007ca84bbb5de9cdbdda3b867a4a8ede8fbc35ef305e3011bc0a8f709a81f30d689d336f04af697344cc919213f 512) (bv #x25b2d6bbe37a7208f9b15df98cd52884411199f219fe323f3d317815fb2ddfebf3535f2b9f8fbfe65777f009cf34e86869847c0d3e2228f38e49ee744705a92f 512))
Concrete counter examples:
(#((bv #x32136095f9fa5d79b9b4429a06eaf8e410f1c007ca84bbb5de9cdbdda3b867a4a8ede8fbc35ef305e3011bc0a8f709a81f30d689d336f04af697344cc919213f 512) (bv #x25b2d6bbe37a7208f9b15df98cd52884411199f219fe323f3d317815fb2ddfebf3535f2b9f8fbfe65777f009cf34e86869847c0d3e2228f38e49ee744705a92f 512)) #((bv #x95aaa85032e15c0d2d6ca9651b17e338aa1b306a34c9199689c6036e5dfa36b67bd6ada05249b8e297791441addc6a3a6450d80f6b32a8d9c646702155723f7b 512) (bv #x7eeb024181b69c14b3d847ec5a973867e2fa731ad2171a6af2833272d03ae424bbacc81dd5af25f74167ebd9775741a20c0f2ee16a4d8126cb782c469289ba7d 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x32136095f9fa5d79b9b4429a06eaf8e410f1c007ca84bbb5de9cdbdda3b867a4a8ede8fbc35ef305e3011bc0a8f709a81f30d689d336f04af697344cc919213f 512) (bv #x25b2d6bbe37a7208f9b15df98cd52884411199f219fe323f3d317815fb2ddfebf3535f2b9f8fbfe65777f009cf34e86869847c0d3e2228f38e49ee744705a92f 512))
Spec Produced:
(bv #xca6e 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x95aaa85032e15c0d2d6ca9651b17e338aa1b306a34c9199689c6036e5dfa36b67bd6ada05249b8e297791441addc6a3a6450d80f6b32a8d9c646702155723f7b 512) (bv #x7eeb024181b69c14b3d847ec5a973867e2fa731ad2171a6af2833272d03ae424bbacc81dd5af25f74167ebd9775741a20c0f2ee16a4d8126cb782c469289ba7d 512))
Spec Produced:
(bv #xf9f8 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$10 sym_bv$11)

invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_5084_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 2
#(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf uint16 512) '(buf uint16 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5084

base_5084_grammar.rkt
/tmp/base_5084_grammar.rkt
Writing [{ 
"name": "base_5084" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 32], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[255, 16]] 
}
] to file /tmp/base_5084_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5084_spec.JSON /tmp/base_5084_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_5084 ... 

Grammar:
#<procedure:base_5084>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x32 (int-imm (bv #x00ff 16) #f))
Spec result
(bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x32 (int-imm (bv #x00ff 16) #f))
#(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.44
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.44.rkt

Completed writing to file ...
Append [; hydride.node.44
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.44.rkt /tmp/test.ll
Storing synth log map synth_hash_44 to /tmp/hydride_hash_44.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_44 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)))
] to file /tmp/hydride_hash_44.rkt

Completed writing to file ...
Starting synthesis for expr: 44
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t873, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 17.517469seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 44

Optimized expression: (uint8x32)hydride.node.44((uint16x32)sobel_x[ramp(0, 1, 32)], (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_44 from hydride_hash_44.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0)
Cost
7
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.45
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.45.rkt

Completed writing to file ...
Append [; hydride.node.45
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.45.rkt /tmp/test.ll
Storing synth log map synth_hash_45 to /tmp/hydride_hash_45.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_45 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_45.rkt

Completed writing to file ...
Starting synthesis for expr: 45
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t876, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.719806seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 45

Optimized expression: (uint8x32)hydride.node.45((uint16x32)sobel_x[ramp(32, 1, 32)], (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_45 from hydride_hash_45.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.46
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.46.rkt

Completed writing to file ...
Append [; hydride.node.46
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.46.rkt /tmp/test.ll
Storing synth log map synth_hash_46 to /tmp/hydride_hash_46.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_46 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_46.rkt

Completed writing to file ...
Starting synthesis for expr: 46
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t891, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t892, 1, 16)] + (uint16x16)input_16[ramp(t893, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.292203seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 46

Optimized expression: (uint16x16)hydride.node.46((uint16x16)input_16[ramp(t432 + -63, 1, 16)], (uint16x16)input_16[ramp(t432 + -62, 1, 16)], (uint16x16)input_16[ramp(t432 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_46 from hydride_hash_46.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.47
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.47.rkt

Completed writing to file ...
Append [; hydride.node.47
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.47.rkt /tmp/test.ll
Storing synth log map synth_hash_47 to /tmp/hydride_hash_47.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_47 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_47.rkt

Completed writing to file ...
Starting synthesis for expr: 47
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t894, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t895, 1, 16)] + (uint16x16)input_16[ramp(t896, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.341296seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 47

Optimized expression: (uint16x16)hydride.node.47((uint16x16)input_16[ramp(t432 + -47, 1, 16)], (uint16x16)input_16[ramp(t432 + -46, 1, 16)], (uint16x16)input_16[ramp(t432 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_47 from hydride_hash_47.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.48
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.48.rkt

Completed writing to file ...
Append [; hydride.node.48
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.48.rkt /tmp/test.ll
Storing synth log map synth_hash_48 to /tmp/hydride_hash_48.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_48 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_48.rkt

Completed writing to file ...
Starting synthesis for expr: 48
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t897, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t898, 1, 16)] + (uint16x16)input_16[ramp(t899, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.321553seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 48

Optimized expression: (uint16x16)hydride.node.48((uint16x16)input_16[ramp(t432 + -31, 1, 16)], (uint16x16)input_16[ramp(t432 + -30, 1, 16)], (uint16x16)input_16[ramp(t432 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_48 from hydride_hash_48.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.49
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.49.rkt

Completed writing to file ...
Append [; hydride.node.49
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.49.rkt /tmp/test.ll
Storing synth log map synth_hash_49 to /tmp/hydride_hash_49.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_49 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_49.rkt

Completed writing to file ...
Starting synthesis for expr: 49
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t900, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t901, 1, 16)] + (uint16x16)input_16[ramp(t902, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.297374seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 49

Optimized expression: (uint16x16)hydride.node.49((uint16x16)input_16[ramp(t432 + -15, 1, 16)], (uint16x16)input_16[ramp(t432 + -14, 1, 16)], (uint16x16)input_16[ramp(t432 + -16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_49 from hydride_hash_49.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.50
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.50.rkt

Completed writing to file ...
Append [; hydride.node.50
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.50.rkt /tmp/test.ll
Storing synth log map synth_hash_50 to /tmp/hydride_hash_50.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_50 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_50.rkt

Completed writing to file ...
Starting synthesis for expr: 50
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t903, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t904, 1, 16)] + (uint16x16)input_16[ramp(t905, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.277726seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 50

Optimized expression: (uint16x16)hydride.node.50((uint16x16)input_16[ramp(t433 + -63, 1, 16)], (uint16x16)input_16[ramp(t433 + -62, 1, 16)], (uint16x16)input_16[ramp(t433 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_50 from hydride_hash_50.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.51
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.51.rkt

Completed writing to file ...
Append [; hydride.node.51
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.51.rkt /tmp/test.ll
Storing synth log map synth_hash_51 to /tmp/hydride_hash_51.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_51 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_51.rkt

Completed writing to file ...
Starting synthesis for expr: 51
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t906, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t907, 1, 16)] + (uint16x16)input_16[ramp(t908, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.230968seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 51

Optimized expression: (uint16x16)hydride.node.51((uint16x16)input_16[ramp(t433 + -47, 1, 16)], (uint16x16)input_16[ramp(t433 + -46, 1, 16)], (uint16x16)input_16[ramp(t433 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_51 from hydride_hash_51.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.52
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.52.rkt

Completed writing to file ...
Append [; hydride.node.52
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.52.rkt /tmp/test.ll
Storing synth log map synth_hash_52 to /tmp/hydride_hash_52.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_52 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_52.rkt

Completed writing to file ...
Starting synthesis for expr: 52
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t909, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t910, 1, 16)] + (uint16x16)input_16[ramp(t911, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.610597seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 52

Optimized expression: (uint16x16)hydride.node.52((uint16x16)input_16[ramp(t433 + -31, 1, 16)], (uint16x16)input_16[ramp(t433 + -30, 1, 16)], (uint16x16)input_16[ramp(t433 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_52 from hydride_hash_52.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.53
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.53.rkt

Completed writing to file ...
Append [; hydride.node.53
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.53.rkt /tmp/test.ll
Storing synth log map synth_hash_53 to /tmp/hydride_hash_53.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_53 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_53.rkt

Completed writing to file ...
Starting synthesis for expr: 53
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t912, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t913, 1, 16)] + (uint16x16)input_16[ramp(t914, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.296687seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 53

Optimized expression: (uint16x16)hydride.node.53((uint16x16)input_16[ramp(t433 + -15, 1, 16)], (uint16x16)input_16[ramp(t433 + -14, 1, 16)], (uint16x16)input_16[ramp(t433 + -16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_53 from hydride_hash_53.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.54
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.54.rkt

Completed writing to file ...
Append [; hydride.node.54
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.54.rkt /tmp/test.ll
Storing synth log map synth_hash_54 to /tmp/hydride_hash_54.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_54 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_54.rkt

Completed writing to file ...
Starting synthesis for expr: 54
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t915, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t916, 1, 16)] + (uint16x16)input_16[ramp(t917, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.392918seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 54

Optimized expression: (uint16x16)hydride.node.54((uint16x16)input_16[ramp(t434 + -63, 1, 16)], (uint16x16)input_16[ramp(t434 + -62, 1, 16)], (uint16x16)input_16[ramp(t434 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_54 from hydride_hash_54.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.55
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.55.rkt

Completed writing to file ...
Append [; hydride.node.55
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.55.rkt /tmp/test.ll
Storing synth log map synth_hash_55 to /tmp/hydride_hash_55.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_55 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_55.rkt

Completed writing to file ...
Starting synthesis for expr: 55
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t918, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t919, 1, 16)] + (uint16x16)input_16[ramp(t920, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.284290seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 55

Optimized expression: (uint16x16)hydride.node.55((uint16x16)input_16[ramp(t434 + -47, 1, 16)], (uint16x16)input_16[ramp(t434 + -46, 1, 16)], (uint16x16)input_16[ramp(t434 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_55 from hydride_hash_55.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.56
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.56.rkt

Completed writing to file ...
Append [; hydride.node.56
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.56.rkt /tmp/test.ll
Storing synth log map synth_hash_56 to /tmp/hydride_hash_56.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_56 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_56.rkt

Completed writing to file ...
Starting synthesis for expr: 56
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t921, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t922, 1, 16)] + (uint16x16)input_16[ramp(t923, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.321509seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 56

Optimized expression: (uint16x16)hydride.node.56((uint16x16)input_16[ramp(t434 + -31, 1, 16)], (uint16x16)input_16[ramp(t434 + -30, 1, 16)], (uint16x16)input_16[ramp(t434 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_56 from hydride_hash_56.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.57
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.57.rkt

Completed writing to file ...
Append [; hydride.node.57
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.57.rkt /tmp/test.ll
Storing synth log map synth_hash_57 to /tmp/hydride_hash_57.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_57 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_57.rkt

Completed writing to file ...
Starting synthesis for expr: 57
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t924, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t925, 1, 16)] + (uint16x16)input_16[ramp(t926, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.272913seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 57

Optimized expression: (uint16x16)hydride.node.57((uint16x16)input_16[ramp(t434 + -15, 1, 16)], (uint16x16)input_16[ramp(t434 + -14, 1, 16)], (uint16x16)input_16[ramp(t434 + -16, 1, 16)])
Starting synthesis for expr: 58
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_57 from hydride_hash_57.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.58
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.58.rkt

Completed writing to file ...
Append [; hydride.node.58
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.58.rkt /tmp/test.ll
Storing synth log map synth_hash_58 to /tmp/hydride_hash_58.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_58 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_58.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.173633seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 58

Optimized expression: (uint16x16)hydride.node.58((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Starting synthesis for expr: 59
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_58 from hydride_hash_58.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.59
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.59.rkt

Completed writing to file ...
Append [; hydride.node.59
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.59.rkt /tmp/test.ll
Storing synth log map synth_hash_59 to /tmp/hydride_hash_59.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_59 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_59.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.263448seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 59

Optimized expression: (uint16x16)hydride.node.59((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Starting synthesis for expr: 60
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_59 from hydride_hash_59.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.60
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.60.rkt

Completed writing to file ...
Append [; hydride.node.60
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.60.rkt /tmp/test.ll
Storing synth log map synth_hash_60 to /tmp/hydride_hash_60.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_60 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_60.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.099005seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 60

Optimized expression: (uint16x16)hydride.node.60((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Starting synthesis for expr: 61
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_60 from hydride_hash_60.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Hashed expression
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
 (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.61
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.61.rkt

Completed writing to file ...
Append [; hydride.node.61
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.61.rkt /tmp/test.ll
Storing synth log map synth_hash_61 to /tmp/hydride_hash_61.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_61 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_61.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.124686seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 61

Optimized expression: (uint16x16)hydride.node.61((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_61 from hydride_hash_61.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)))
=======================================
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0)
Cost
7
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.62
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.62.rkt

Completed writing to file ...
Append [; hydride.node.62
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.62.rkt /tmp/test.ll
Storing synth log map synth_hash_62 to /tmp/hydride_hash_62.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_62 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)))
] to file /tmp/hydride_hash_62.rkt

Completed writing to file ...
Starting synthesis for expr: 62
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t927, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.341729seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 62

Optimized expression: (uint8x32)hydride.node.62((uint16x32)sobel_x[ramp(0, 1, 32)], (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_62 from hydride_hash_62.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)) (#(struct:uint8x32 #(struct:vec-min (buf uint16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 256 8 16 0) 3)) (#(struct:vec-sub #(struct:vec-max (buf uint16 256) (buf uint16 256)) #(struct:vec-min (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 5)) (#(struct:vec-add #(struct:vec-shl (buf uint16 256) (buf uint16 256)) #(struct:vec-add (buf uint16 256) (buf uint16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 8)))
=======================================
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0)
Cost
7
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.63
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.63.rkt

Completed writing to file ...
Append [; hydride.node.63
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.63.rkt /tmp/test.ll
Storing synth log map synth_hash_63 to /tmp/hydride_hash_63.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_63 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 3)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 5)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 8)))
] to file /tmp/hydride_hash_63.rkt

Completed writing to file ...
Starting synthesis for expr: 63
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t928, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.448463seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 63

Optimized expression: (uint8x32)hydride.node.63((uint16x32)sobel_x[ramp(32, 1, 32)], (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)])
Hydride Function: declare <32 x i16> @hydride.node.0(<32 x i8>)

Generating Hydride Call:   %3241 = call <32 x i16> @hydride.node.0(<32 x i8> %3240) #17
Hydride Function: declare <32 x i16> @hydride.node.1(<32 x i8>)

Generating Hydride Call:   %3250 = call <32 x i16> @hydride.node.1(<32 x i8> %3249) #17
Hydride Function: declare <32 x i16> @hydride.node.2(<32 x i8>)

Generating Hydride Call:   %4299 = call <32 x i16> @hydride.node.2(<32 x i8> %4298) #17
Hydride Function: declare <32 x i16> @hydride.node.3(<32 x i8>)

Generating Hydride Call:   %4308 = call <32 x i16> @hydride.node.3(<32 x i8> %4307) #17
Hydride Function: declare <32 x i16> @hydride.node.4(<32 x i8>)

Generating Hydride Call:   %4317 = call <32 x i16> @hydride.node.4(<32 x i8> %4316) #17
Hydride Function: declare <32 x i16> @hydride.node.5(<32 x i8>)

Generating Hydride Call:   %4326 = call <32 x i16> @hydride.node.5(<32 x i8> %4325) #17
Hydride Function: declare <32 x i16> @hydride.node.6(<32 x i8>)

Generating Hydride Call:   %4335 = call <32 x i16> @hydride.node.6(<32 x i8> %4334) #17
Hydride Function: declare <32 x i16> @hydride.node.7(<32 x i8>)

Generating Hydride Call:   %4344 = call <32 x i16> @hydride.node.7(<32 x i8> %4343) #17
Hydride Function: declare <32 x i16> @hydride.node.8(<32 x i8>)

Generating Hydride Call:   %4353 = call <32 x i16> @hydride.node.8(<32 x i8> %4352) #17
Hydride Function: declare <32 x i16> @hydride.node.9(<32 x i8>)

Generating Hydride Call:   %4362 = call <32 x i16> @hydride.node.9(<32 x i8> %4361) #17
Hydride Function: declare <32 x i16> @hydride.node.10(<32 x i8>)

Generating Hydride Call:   %4371 = call <32 x i16> @hydride.node.10(<32 x i8> %4370) #17
Hydride Function: declare <16 x i16> @hydride.node.11(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4455 = call <16 x i16> @hydride.node.11(<16 x i16> %4432, <16 x i16> %4443, <16 x i16> %4454) #17
Hydride Function: declare <16 x i16> @hydride.node.12(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4492 = call <16 x i16> @hydride.node.12(<16 x i16> %4467, <16 x i16> %4479, <16 x i16> %4491) #17
Hydride Function: declare <16 x i16> @hydride.node.13(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4530 = call <16 x i16> @hydride.node.13(<16 x i16> %4505, <16 x i16> %4517, <16 x i16> %4529) #17
Hydride Function: declare <16 x i16> @hydride.node.14(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4568 = call <16 x i16> @hydride.node.14(<16 x i16> %4543, <16 x i16> %4555, <16 x i16> %4567) #17
Hydride Function: declare <16 x i16> @hydride.node.15(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4606 = call <16 x i16> @hydride.node.15(<16 x i16> %4581, <16 x i16> %4593, <16 x i16> %4605) #17
Hydride Function: declare <16 x i16> @hydride.node.16(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4644 = call <16 x i16> @hydride.node.16(<16 x i16> %4619, <16 x i16> %4631, <16 x i16> %4643) #17
Hydride Function: declare <16 x i16> @hydride.node.17(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4682 = call <16 x i16> @hydride.node.17(<16 x i16> %4657, <16 x i16> %4669, <16 x i16> %4681) #17
Hydride Function: declare <16 x i16> @hydride.node.18(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4720 = call <16 x i16> @hydride.node.18(<16 x i16> %4695, <16 x i16> %4707, <16 x i16> %4719) #17
Hydride Function: declare <16 x i16> @hydride.node.19(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4758 = call <16 x i16> @hydride.node.19(<16 x i16> %4733, <16 x i16> %4745, <16 x i16> %4757) #17
Hydride Function: declare <16 x i16> @hydride.node.20(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4766 = call <16 x i16> @hydride.node.20(<16 x i16> %4762, <16 x i16> %4765) #17
Hydride Function: declare <16 x i16> @hydride.node.21(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4778 = call <16 x i16> @hydride.node.21(<16 x i16> %4774, <16 x i16> %4777) #17
Hydride Function: declare <16 x i16> @hydride.node.22(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4791 = call <16 x i16> @hydride.node.22(<16 x i16> %4787, <16 x i16> %4790) #17
Hydride Function: declare <16 x i16> @hydride.node.23(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4804 = call <16 x i16> @hydride.node.23(<16 x i16> %4800, <16 x i16> %4803) #17
Hydride Function: declare <16 x i16> @hydride.node.24(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4817 = call <16 x i16> @hydride.node.24(<16 x i16> %4813, <16 x i16> %4816) #17
Hydride Function: declare <16 x i16> @hydride.node.25(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4830 = call <16 x i16> @hydride.node.25(<16 x i16> %4826, <16 x i16> %4829) #17
Hydride Function: declare <16 x i16> @hydride.node.26(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4843 = call <16 x i16> @hydride.node.26(<16 x i16> %4839, <16 x i16> %4842) #17
Hydride Function: declare <16 x i16> @hydride.node.27(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4856 = call <16 x i16> @hydride.node.27(<16 x i16> %4852, <16 x i16> %4855) #17
Hydride Function: declare <16 x i16> @hydride.node.28(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4892 = call <16 x i16> @hydride.node.28(<16 x i16> %4881, <16 x i16> %4886, <16 x i16> %4891) #17
Hydride Function: declare <16 x i16> @hydride.node.29(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4910 = call <16 x i16> @hydride.node.29(<16 x i16> %4899, <16 x i16> %4904, <16 x i16> %4909) #17
Hydride Function: declare <16 x i16> @hydride.node.30(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4929 = call <16 x i16> @hydride.node.30(<16 x i16> %4918, <16 x i16> %4923, <16 x i16> %4928) #17
Hydride Function: declare <16 x i16> @hydride.node.31(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4948 = call <16 x i16> @hydride.node.31(<16 x i16> %4937, <16 x i16> %4942, <16 x i16> %4947) #17
Hydride Function: declare <16 x i16> @hydride.node.32(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4967 = call <16 x i16> @hydride.node.32(<16 x i16> %4956, <16 x i16> %4961, <16 x i16> %4966) #17
Hydride Function: declare <16 x i16> @hydride.node.33(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4986 = call <16 x i16> @hydride.node.33(<16 x i16> %4975, <16 x i16> %4980, <16 x i16> %4985) #17
Hydride Function: declare <16 x i16> @hydride.node.34(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5005 = call <16 x i16> @hydride.node.34(<16 x i16> %4994, <16 x i16> %4999, <16 x i16> %5004) #17
Hydride Function: declare <16 x i16> @hydride.node.35(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5024 = call <16 x i16> @hydride.node.35(<16 x i16> %5013, <16 x i16> %5018, <16 x i16> %5023) #17
Hydride Function: declare <16 x i16> @hydride.node.36(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5043 = call <16 x i16> @hydride.node.36(<16 x i16> %5032, <16 x i16> %5037, <16 x i16> %5042) #17
Hydride Function: declare <16 x i16> @hydride.node.37(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5061 = call <16 x i16> @hydride.node.37(<16 x i16> %5050, <16 x i16> %5055, <16 x i16> %5060) #17
Hydride Function: declare <16 x i16> @hydride.node.38(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5079 = call <16 x i16> @hydride.node.38(<16 x i16> %5068, <16 x i16> %5073, <16 x i16> %5078) #17
Hydride Function: declare <16 x i16> @hydride.node.39(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5097 = call <16 x i16> @hydride.node.39(<16 x i16> %5086, <16 x i16> %5091, <16 x i16> %5096) #17
Hydride Function: declare <16 x i16> @hydride.node.40(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5105 = call <16 x i16> @hydride.node.40(<16 x i16> %5101, <16 x i16> %5104) #17
Hydride Function: declare <16 x i16> @hydride.node.41(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5113 = call <16 x i16> @hydride.node.41(<16 x i16> %5109, <16 x i16> %5112) #17
Hydride Function: declare <16 x i16> @hydride.node.42(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5122 = call <16 x i16> @hydride.node.42(<16 x i16> %5118, <16 x i16> %5121) #17
Hydride Function: declare <16 x i16> @hydride.node.43(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5131 = call <16 x i16> @hydride.node.43(<16 x i16> %5127, <16 x i16> %5130) #17
Hydride Function: declare <32 x i8> @hydride.node.44(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5144 = call <32 x i8> @hydride.node.44(<32 x i16> %5135, <32 x i16> %5143) #17
Hydride Function: declare <32 x i8> @hydride.node.45(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5162 = call <32 x i8> @hydride.node.45(<32 x i16> %5153, <32 x i16> %5161) #17
Hydride Function: declare <16 x i16> @hydride.node.46(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5198 = call <16 x i16> @hydride.node.46(<16 x i16> %5187, <16 x i16> %5192, <16 x i16> %5197) #17
Hydride Function: declare <16 x i16> @hydride.node.47(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5215 = call <16 x i16> @hydride.node.47(<16 x i16> %5204, <16 x i16> %5209, <16 x i16> %5214) #17
Hydride Function: declare <16 x i16> @hydride.node.48(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5233 = call <16 x i16> @hydride.node.48(<16 x i16> %5222, <16 x i16> %5227, <16 x i16> %5232) #17
Hydride Function: declare <16 x i16> @hydride.node.49(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5251 = call <16 x i16> @hydride.node.49(<16 x i16> %5240, <16 x i16> %5245, <16 x i16> %5250) #17
Hydride Function: declare <16 x i16> @hydride.node.50(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5269 = call <16 x i16> @hydride.node.50(<16 x i16> %5258, <16 x i16> %5263, <16 x i16> %5268) #17
Hydride Function: declare <16 x i16> @hydride.node.51(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5287 = call <16 x i16> @hydride.node.51(<16 x i16> %5276, <16 x i16> %5281, <16 x i16> %5286) #17
Hydride Function: declare <16 x i16> @hydride.node.52(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5305 = call <16 x i16> @hydride.node.52(<16 x i16> %5294, <16 x i16> %5299, <16 x i16> %5304) #17
Hydride Function: declare <16 x i16> @hydride.node.53(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5323 = call <16 x i16> @hydride.node.53(<16 x i16> %5312, <16 x i16> %5317, <16 x i16> %5322) #17
Hydride Function: declare <16 x i16> @hydride.node.54(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5341 = call <16 x i16> @hydride.node.54(<16 x i16> %5330, <16 x i16> %5335, <16 x i16> %5340) #17
Hydride Function: declare <16 x i16> @hydride.node.55(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5359 = call <16 x i16> @hydride.node.55(<16 x i16> %5348, <16 x i16> %5353, <16 x i16> %5358) #17
Hydride Function: declare <16 x i16> @hydride.node.56(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5377 = call <16 x i16> @hydride.node.56(<16 x i16> %5366, <16 x i16> %5371, <16 x i16> %5376) #17
Hydride Function: declare <16 x i16> @hydride.node.57(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5395 = call <16 x i16> @hydride.node.57(<16 x i16> %5384, <16 x i16> %5389, <16 x i16> %5394) #17
Hydride Function: declare <16 x i16> @hydride.node.58(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5403 = call <16 x i16> @hydride.node.58(<16 x i16> %5399, <16 x i16> %5402) #17
Hydride Function: declare <16 x i16> @hydride.node.59(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5411 = call <16 x i16> @hydride.node.59(<16 x i16> %5407, <16 x i16> %5410) #17
Hydride Function: declare <16 x i16> @hydride.node.60(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5420 = call <16 x i16> @hydride.node.60(<16 x i16> %5416, <16 x i16> %5419) #17
Hydride Function: declare <16 x i16> @hydride.node.61(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5429 = call <16 x i16> @hydride.node.61(<16 x i16> %5425, <16 x i16> %5428) #17
Hydride Function: declare <32 x i8> @hydride.node.62(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5439 = call <32 x i8> @hydride.node.62(<32 x i16> %5433, <32 x i16> %5438) #17
Hydride Function: declare <32 x i8> @hydride.node.63(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5452 = call <32 x i8> @hydride.node.63(<32 x i16> %5446, <32 x i16> %5451) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'sobel3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
