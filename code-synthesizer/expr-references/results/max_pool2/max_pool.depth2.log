mkdir max_pool/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g max_pool/src/max_pool_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o max_pool/bin/max_pool_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=2 HL_ENABLE_HYDRIDE=1 ./max_pool/bin/max_pool_generator \
	-t 0 \
	-o max_pool/bin \
	-g max_pool \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f max_pool target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_3470_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_3470

base_3470_grammar.rkt
/tmp/base_3470_grammar.rkt
Writing [{ 
"name": "base_3470" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3470_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3470_spec.JSON /tmp/base_3470_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_3470 ... 

Grammar:
#<procedure:base_3470>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #xa64eb9e9f4c073be9881b120e569e8b9e0fcffa0b4ddf197e3824ce4c6fbcde1 256)
invoke-spec-lane with env: #((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256))
Concrete counter examples:
(#((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256)) #((bv #xcb3fd40b466295a132d411e3d47e225e906034fbc2a36a06b7da0d8ccf0010aa 256) (bv #x2fe8c13a4952fef25499075e5b02d6342b7b4d679ef694723bd73158a52dd942 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256))
Spec Produced:
(bv #xe1 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xcb3fd40b466295a132d411e3d47e225e906034fbc2a36a06b7da0d8ccf0010aa 256) (bv #x2fe8c13a4952fef25499075e5b02d6342b7b4d679ef694723bd73158a52dd942 256))
Spec Produced:
(bv #xaa 8)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$3) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)]
 [sym_bv$3 (bv #x014d010100000000000000000000000040000000000000000000000000000000 256)])
Verification failed :(
#((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
invoke-spec with env: #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)
(bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0))
differing-lanes
'(30)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #xa64eb9e9f4c073be9881b120e569e8b9e0fcffa0b4ddf197e3824ce4c6fbcde1 256)
invoke-spec-lane with env: #((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256))
Concrete counter examples:
(#((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256)) #((bv #xcb3fd40b466295a132d411e3d47e225e906034fbc2a36a06b7da0d8ccf0010aa 256) (bv #x2fe8c13a4952fef25499075e5b02d6342b7b4d679ef694723bd73158a52dd942 256)) #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 30)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x26004e10f48a31889881071245696ab986fcff10b4dd4497e32e40e4c6fbcde1 256) (bv #xa64eb9e9c1c073be4217b120e504e8b9e029d4a0aed2f14cda824c04180b0075 256))
Spec Produced:
(bv #xe1 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xcb3fd40b466295a132d411e3d47e225e906034fbc2a36a06b7da0d8ccf0010aa 256) (bv #x2fe8c13a4952fef25499075e5b02d6342b7b4d679ef694723bd73158a52dd942 256))
Spec Produced:
(bv #xaa 8)
Synthesize by lane...
Lane Index
30
invoke-spec-lane with env: #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
Spec Produced:
(bv #x4d 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-max '(buf uint8 256) '(buf uint8 256))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 1)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.0
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 1)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Expression before InlineLets: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Expression after InlineLets: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Expression before abstraction: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Input expression to synthesize: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(t781, 1, 32)])
Synthesis completed with return code:	0
Synthesis took 5.823444seconds ...
Expression after replacae abstraction: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (uint8x32)hydride.node.0((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
rm: cannot remove '/tmp/base_6399_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_min_epu8 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_broadcastmb_epi64 with score: 3 belonging to target agnostic class _mm256_broadcastmw_epi32
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 7
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 1)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Hashed expression
(vec-min '(buf uint8 256) (x32 '(buf uint8 8)))
Leaves are bitvectors of sizes:
(256 8)
get-expr-grammar with base_name: base_6399

base_6399_grammar.rkt
/tmp/base_6399_grammar.rkt
Writing [{ 
"name": "base_6399" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,32], [1,1]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_8"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6399_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6399_spec.JSON /tmp/base_6399_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_6399 ... 

Grammar:
#<procedure:base_6399>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa79f554ae5a3a7118a9ac0c7f4ce25c037eb5c303a091f36d5e4623dc5b23dfe 256) (bv #xa6 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #xa69f554aa6a3a6118a9aa6a6a6a625a637a65c303a091f36a6a6623da6a63da6 256)
invoke-spec-lane with env: #((bv #xa79f554ae5a3a7118a9ac0c7f4ce25c037eb5c303a091f36d5e4623dc5b23dfe 256) (bv #xa6 8))
Concrete counter examples:
(#((bv #xa79f554ae5a3a7118a9ac0c7f4ce25c037eb5c303a091f36d5e4623dc5b23dfe 256) (bv #xa6 8)) #((bv #x4a0d780bff913be1945cb28b8bb8a69b22d6eb254d5b5673a08e14679bea3f50 256) (bv #xc4 8)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa79f554ae5a3a7118a9ac0c7f4ce25c037eb5c303a091f36d5e4623dc5b23dfe 256) (bv #xa6 8))
Spec Produced:
(bv #xa6 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4a0d780bff913be1945cb28b8bb8a69b22d6eb254d5b5673a08e14679bea3f50 256) (bv #xc4 8))
Spec Produced:
(bv #x50 8)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #x93876a38b6b1b6b6b6a89f1f9b369cb6b69d3a1a4faba47721242eb6b646b6b6 256)
invoke-spec-lane with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
Concrete counter examples:
(#((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8)) #((bv #x970562500ccde7ae39700f1795e5df419812e11ba621edabc49f4acea8036df8 256) (bv #x0e 8)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
Spec Produced:
(bv #xb6 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x970562500ccde7ae39700f1795e5df419812e11ba621edabc49f4acea8036df8 256) (bv #x0e 8))
Spec Produced:
(bv #x0e 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$2) sym_bv$3) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256)]
 [sym_bv$3 (bv #x40 8)])
Verification failed :(
#((bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256) (bv #x40 8))
invoke-spec with env: #((bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256) (bv #x40 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #x004000000000404040401c404040404040084000404000404040404040404000 256)
(bv #x004000000000404040401c404040404040084000404000404040404040404000 256)
Verification failed ...
	spec produced: (bv #x004000000000404040401c404040404040084000404000404040404040404000 256) 256 
	synthesized result produced: (bv #x4040404040404040404040404040404040404040404040404040404040404040 256) 256

invoke-spec with env: #((bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256) (bv #x40 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #x004000000000404040401c404040404040084000404000404040404040404000 256)
Difference  Predicate
'((1 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 0 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #x93876a38b6b1b6b6b6a89f1f9b369cb6b69d3a1a4faba47721242eb6b646b6b6 256)
invoke-spec-lane with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
Concrete counter examples:
(#((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8)) #((bv #x970562500ccde7ae39700f1795e5df419812e11ba621edabc49f4acea8036df8 256) (bv #x0e 8)) #((bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256) (bv #x40 8)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
Spec Produced:
(bv #xb6 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x970562500ccde7ae39700f1795e5df419812e11ba621edabc49f4acea8036df8 256) (bv #x0e 8))
Spec Produced:
(bv #x0e 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256) (bv #x40 8))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (_mm256_broadcastmw_epi32_dsl (reg (bv #x1 4)) 32 8 64) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl
 (_mm256_broadcastmw_epi32_dsl (reg (bv #x1 4)) 32 8 64)
 (reg (bv #x0 4))
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec with env: #(sym_bv$6 sym_bv$7)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$6) sym_bv$7) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$6 (bv #x00018008828020008b01a80198099000eb051c5abc156600dc04848873ec0900 256)]
 [sym_bv$7 (bv #x7f 8)])
Verification failed :(
#((bv #x00018008828020008b01a80198099000eb051c5abc156600dc04848873ec0900 256) (bv #x7f 8))
invoke-spec with env: #((bv #x00018008828020008b01a80198099000eb051c5abc156600dc04848873ec0900 256) (bv #x7f 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #x00017f087f7f20007f017f017f097f007f051c5a7f1566007f047f7f737f0900 256)
(bv #x00017f087f7f20007f017f017f097f007f051c5a7f1566007f047f7f737f0900 256)
Verification failed ...
	spec produced: (bv #x00017f087f7f20007f017f017f097f007f051c5a7f1566007f047f7f737f0900 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x00018008828020008b01a80198099000eb051c5abc156600dc04848873ec0900 256) (bv #x7f 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #x00017f087f7f20007f017f017f097f007f051c5a7f1566007f047f7f737f0900 256)
Difference  Predicate
'((0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Spec result
(bv #x93876a38b6b1b6b6b6a89f1f9b369cb6b69d3a1a4faba47721242eb6b646b6b6 256)
invoke-spec-lane with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
Concrete counter examples:
(#((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8)) #((bv #x970562500ccde7ae39700f1795e5df419812e11ba621edabc49f4acea8036df8 256) (bv #x0e 8)) #((bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256) (bv #x40 8)) #((bv #x00018008828020008b01a80198099000eb051c5abc156600dc04848873ec0900 256) (bv #x7f 8)))
Failing lanes examples:
(0 0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x93876a38b9b1ffffc5a89f1f9b369cedef9d3a1a4faba47721242ec0c746c6e6 256) (bv #xb6 8))
Spec Produced:
(bv #xb6 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x970562500ccde7ae39700f1795e5df419812e11ba621edabc49f4acea8036df8 256) (bv #x0e 8))
Spec Produced:
(bv #x0e 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00f100000000fde341ed1c414141aa404008eb00714100414141414141414100 256) (bv #x40 8))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x00018008828020008b01a80198099000eb051c5abc156600dc04848873ec0900 256) (bv #x7f 8))
Spec Produced:
(bv #x09 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
verify-across-lanes returned #t ... 

Test elapsed time: 
16
(vec-min '(buf uint8 256) (x32 '(buf uint8 8)))
#(#t #(struct:_m_pminub_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)
Synthesis step completed!
Solution
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
(_m_pminub_dsl (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
Cost
8
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 8)
 (reg (bv #x00 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <1 x i8>

(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.1
; (reg 0) <32 x i8>
; (reg 1) <1 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <32 x i8>
; (reg 1) <1 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 1)
(vec-min '(buf uint8 256) (x32 '(buf uint8 8))) (vector #t (_m_pminub_dsl (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Expression before InlineLets: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Expression after InlineLets: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Expression before abstraction: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Input expression to synthesize: min((uint8x32)maximum[ramp(t795, 1, 32)], x32((uint8)output_max))
output_max maps to reg_1
Synthesis completed with return code:	0
Synthesis took 18.201139seconds ...
Expression after replacae abstraction: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (uint8x32)hydride.node.1((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], (uint8)output_max)
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 1)) (#(struct:vec-min (buf uint8 256) #(struct:x32 (buf uint8 8))) . #(#t #(struct:_m_pminub_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Hashed expression
(vec-min '(buf uint8 256) (x32 '(buf uint8 8)))
Leaves are bitvectors of sizes:
(256 8)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
(_m_pminub_dsl (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
Cost
8
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 8)
 (reg (bv #x00 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <1 x i8>

(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.2
; (reg 0) <32 x i8>
; (reg 1) <1 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 0) <32 x i8>
; (reg 1) <1 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 1)
(vec-min '(buf uint8 256) (x32 '(buf uint8 8))) (vector #t (_m_pminub_dsl (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Expression before InlineLets: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Expression after InlineLets: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Expression before abstraction: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Input expression to synthesize: min((uint8x32)maximum[ramp(t804, 1, 32)], x32((uint8)output_max))
output_max maps to reg_1
Synthesis completed with return code:	0
Synthesis took 2.619387seconds ...
Expression after replacae abstraction: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 2

Optimized expression: (uint8x32)hydride.node.2((uint8x32)maximum[ramp(t581 + -32, 1, 32)], (uint8)output_max)
Hydride Function: declare <32 x i8> @hydride.node.0(<32 x i8>, <32 x i8>)

Generating Hydride Call:   %875 = call <32 x i8> @hydride.node.0(<32 x i8> %863, <32 x i8> %874) #17
Hydride Function: declare <32 x i8> @hydride.node.1(<32 x i8>, i8)

Generating Hydride Call:   %902 = call <32 x i8> @hydride.node.1(<32 x i8> %901, i8 %output_max37) #17
Hydride Function: declare <32 x i8> @hydride.node.2(<32 x i8>, i8)

Generating Hydride Call:   %922 = call <32 x i8> @hydride.node.2(<32 x i8> %921, i8 %output_max37) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'max_pool' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
