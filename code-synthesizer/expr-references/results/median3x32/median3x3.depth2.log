mkdir median3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g median3x3/src/median3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o median3x3/bin/median3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=2 HL_ENABLE_HYDRIDE=1 ./median3x3/bin/median3x3_generator \
	-t 0 \
	-o median3x3/bin \
	-g median3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f median3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_7207_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
get-expr-grammar with base_name: base_7207

base_7207_grammar.rkt
/tmp/base_7207_grammar.rkt
Writing [{ 
"name": "base_7207" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,32], [1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7207_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7207_spec.JSON /tmp/base_7207_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_7207 ... 

Grammar:
#<procedure:base_7207>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xb7b3aace5fe9d3bdabc1afd7d9bcc1f9caca85e5e57d7ec6eed8f1f5f3c6b0b5 256)
invoke-spec-lane with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
Concrete counter examples:
(#((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256)) #((bv #x267608b2c253f5d64032a7b29946fa2f83adb33dbbbb905e8bf22ed1f139babe 256) (bv #xb17a4c0cb0cba4d7e0c7f8df08086d672a274c7778d9b97e6e4dc8e67fc16231 256) (bv #xd2d418069e000155fedcef477c73bca1e08258924580874d51a91ba34ffa3b19 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
Spec Produced:
(bv #xb5 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x267608b2c253f5d64032a7b29946fa2f83adb33dbbbb905e8bf22ed1f139babe 256) (bv #xb17a4c0cb0cba4d7e0c7f8df08086d672a274c7778d9b97e6e4dc8e67fc16231 256) (bv #xd2d418069e000155fedcef477c73bca1e08258924580874d51a91ba34ffa3b19 256))
Spec Produced:
(bv #xbe 8)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1 sym_bv$2)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$3 sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$3 sym_bv$4 sym_bv$5)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (ite (bvule (extract 255 248 sym_bv$5) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$3 (bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256)]
 [sym_bv$4 (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256)]
 [sym_bv$5 (bv #x9119810400482040214001000140802000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256) (bv #x9119810400482040214001000140802000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256) (bv #x9119810400482040214001000140802000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x911981c228482a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256)
(bv #x911981c228482a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x911981c228482a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256) (bv #x9119810400482040214001000140802000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x911981c228482a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1))
differing-lanes
'(26)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xb7b3aace5fe9d3bdabc1afd7d9bcc1f9caca85e5e57d7ec6eed8f1f5f3c6b0b5 256)
invoke-spec-lane with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
Concrete counter examples:
(#((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256)) #((bv #x267608b2c253f5d64032a7b29946fa2f83adb33dbbbb905e8bf22ed1f139babe 256) (bv #xb17a4c0cb0cba4d7e0c7f8df08086d672a274c7778d9b97e6e4dc8e67fc16231 256) (bv #xd2d418069e000155fedcef477c73bca1e08258924580874d51a91ba34ffa3b19 256)) #((bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256) (bv #x9119810400482040214001000140802000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 26)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
Spec Produced:
(bv #xb5 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x267608b2c253f5d64032a7b29946fa2f83adb33dbbbb905e8bf22ed1f139babe 256) (bv #xb17a4c0cb0cba4d7e0c7f8df08086d672a274c7778d9b97e6e4dc8e67fc16231 256) (bv #xd2d418069e000155fedcef477c73bca1e08258924580874d51a91ba34ffa3b19 256))
Spec Produced:
(bv #xbe 8)
Synthesize by lane...
Lane Index
26
invoke-spec-lane with env: #((bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256) (bv #x9119810400482040214001000140802000000000000000000000000000000000 256))
Spec Produced:
(bv #x48 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$9 sym_bv$10 sym_bv$11)

invoke-spec with env: #(sym_bv$9 sym_bv$10 sym_bv$11)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (ite (bvule (extract 255 248 sym_bv$11) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$9 (bv #x184079408205203c000281c81c00004000000000000000000000000000000000 256)]
 [sym_bv$10 (bv #x811ed78002121a540252828a8848482200000000000000000000000000000020 256)]
 [sym_bv$11 (bv #x3d21040002202603349c7e3e161c1c4000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x184079408205203c000281c81c00004000000000000000000000000000000000 256) (bv #x811ed78002121a540252828a8848482200000000000000000000000000000020 256) (bv #x3d21040002202603349c7e3e161c1c4000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x184079408205203c000281c81c00004000000000000000000000000000000000 256) (bv #x811ed78002121a540252828a8848482200000000000000000000000000000020 256) (bv #x3d21040002202603349c7e3e161c1c4000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x8140d78082202654349c82c88848484000000000000000000000000000000020 256)
(bv #x8140d78082202654349c82c88848484000000000000000000000000000000020 256)
Verification failed ...
	spec produced: (bv #x8140d78082202654349c82c88848484000000000000000000000000000000020 256) 256 
	synthesized result produced: (bv #x3d4079408220263c349c81c81c1c1c4000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x184079408205203c000281c81c00004000000000000000000000000000000000 256) (bv #x811ed78002121a540252828a8848482200000000000000000000000000000020 256) (bv #x3d21040002202603349c7e3e161c1c4000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x8140d78082202654349c82c88848484000000000000000000000000000000020 256)
Difference  Predicate
'((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 0 0 1 0 0 0 1 1 0 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #xb7b3aace5fe9d3bdabc1afd7d9bcc1f9caca85e5e57d7ec6eed8f1f5f3c6b0b5 256)
invoke-spec-lane with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
Concrete counter examples:
(#((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256)) #((bv #x267608b2c253f5d64032a7b29946fa2f83adb33dbbbb905e8bf22ed1f139babe 256) (bv #xb17a4c0cb0cba4d7e0c7f8df08086d672a274c7778d9b97e6e4dc8e67fc16231 256) (bv #xd2d418069e000155fedcef477c73bca1e08258924580874d51a91ba34ffa3b19 256)) #((bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256) (bv #x9119810400482040214001000140802000000000000000000000000000000000 256)) #((bv #x184079408205203c000281c81c00004000000000000000000000000000000000 256) (bv #x811ed78002121a540252828a8848482200000000000000000000000000000020 256) (bv #x3d21040002202603349c7e3e161c1c4000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 26 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x546764ce49e9121878c1af1441b6b15fbe9a8518b0657ec6a6d8e5f5f39bb0b5 256) (bv #x6fb3aa235f3f9f7aa14643d7d90ec16dcaca689b307d3418ee800fe19b07499b 256) (bv #xb750a67d2692d3bdab8915b66cbc31f9c3583be5e50f7d33130bf10ba6c6515d 256))
Spec Produced:
(bv #xb5 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x267608b2c253f5d64032a7b29946fa2f83adb33dbbbb905e8bf22ed1f139babe 256) (bv #xb17a4c0cb0cba4d7e0c7f8df08086d672a274c7778d9b97e6e4dc8e67fc16231 256) (bv #xd2d418069e000155fedcef477c73bca1e08258924580874d51a91ba34ffa3b19 256))
Spec Produced:
(bv #xbe 8)
Synthesize by lane...
Lane Index
26
invoke-spec-lane with env: #((bv #x59096cc2282e2a4ac0d8c0d4e0fcdcfc00000000000000000000000000000000 256) (bv #x85067b80003a1632030203620102020200000000000000000000000000000000 256) (bv #x9119810400482040214001000140802000000000000000000000000000000000 256))
Spec Produced:
(bv #x48 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x184079408205203c000281c81c00004000000000000000000000000000000000 256) (bv #x811ed78002121a540252828a8848482200000000000000000000000000000020 256) (bv #x3d21040002202603349c7e3e161c1c4000000000000000000000000000000000 256))
Spec Produced:
(bv #x20 8)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x9cf8e0f892f190aaf5a6f5e9e7a6e52cb2f458efd5eefd4afdb2f58eeeeceea8 256)
invoke-spec-lane with env: #((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256))
Concrete counter examples:
(#((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256)) #((bv #x022c718aa892531fe83b4059d32e0d783e1a24399a89198f00f89b3f2da621bf 256) (bv #x88cfa388d797ec3a393bcfaa73183f6d690c6be2f61ea1568526b1f06750881a 256) (bv #xd93e1772685ab167121b3e7304f9099207aeb59723d4d7056b3868e43a1b2c4f 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256))
Spec Produced:
(bv #xa8 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x022c718aa892531fe83b4059d32e0d783e1a24399a89198f00f89b3f2da621bf 256) (bv #x88cfa388d797ec3a393bcfaa73183f6d690c6be2f61ea1568526b1f06750881a 256) (bv #xd93e1772685ab167121b3e7304f9099207aeb59723d4d7056b3868e43a1b2c4f 256))
Spec Produced:
(bv #xbf 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13 sym_bv$14)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$15 sym_bv$16 sym_bv$17)

invoke-spec with env: #(sym_bv$15 sym_bv$16 sym_bv$17)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (ite (bvule (extract 255 248 sym_bv$17) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$15 (bv #x683e903f050680105e8a7e7e5e5e5ede00000000000000000000000000000000 256)]
 [sym_bv$16 (bv #x287e8d41010800001ca83c1c191c1c1c00000000000000000000000000000000 256)]
 [sym_bv$17 (bv #x00c0304143081f11206080200000000000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x683e903f050680105e8a7e7e5e5e5ede00000000000000000000000000000000 256) (bv #x287e8d41010800001ca83c1c191c1c1c00000000000000000000000000000000 256) (bv #x00c0304143081f11206080200000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x683e903f050680105e8a7e7e5e5e5ede00000000000000000000000000000000 256) (bv #x287e8d41010800001ca83c1c191c1c1c00000000000000000000000000000000 256) (bv #x00c0304143081f11206080200000000000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x68c09041430880115ea8807e5e5e5ede00000000000000000000000000000000 256)
(bv #x68c09041430880115ea8807e5e5e5ede00000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x68c09041430880115ea8807e5e5e5ede00000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x68c09041430880115e8a807e5e5e5ede00000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x683e903f050680105e8a7e7e5e5e5ede00000000000000000000000000000000 256) (bv #x287e8d41010800001ca83c1c191c1c1c00000000000000000000000000000000 256) (bv #x00c0304143081f11206080200000000000000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x68c09041430880115ea8807e5e5e5ede00000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0))
differing-lanes
'(22)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x9cf8e0f892f190aaf5a6f5e9e7a6e52cb2f458efd5eefd4afdb2f58eeeeceea8 256)
invoke-spec-lane with env: #((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256))
Concrete counter examples:
(#((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256)) #((bv #x022c718aa892531fe83b4059d32e0d783e1a24399a89198f00f89b3f2da621bf 256) (bv #x88cfa388d797ec3a393bcfaa73183f6d690c6be2f61ea1568526b1f06750881a 256) (bv #xd93e1772685ab167121b3e7304f9099207aeb59723d4d7056b3868e43a1b2c4f 256)) #((bv #x683e903f050680105e8a7e7e5e5e5ede00000000000000000000000000000000 256) (bv #x287e8d41010800001ca83c1c191c1c1c00000000000000000000000000000000 256) (bv #x00c0304143081f11206080200000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 22)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x9cc2e09867ac25140f0ff577baa6e50f32e34aefaaeec8161a6a668eeeabafa2 256) (bv #x2f5d0e986db29096ea71f478e766c22cb2dc58a986d5334a62b2955a2eecee2f 256) (bv #x7cf855f892f168aaf5a69be9748b422457f42be7d5d3fd19fd4cf550d8d206a8 256))
Spec Produced:
(bv #xa8 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x022c718aa892531fe83b4059d32e0d783e1a24399a89198f00f89b3f2da621bf 256) (bv #x88cfa388d797ec3a393bcfaa73183f6d690c6be2f61ea1568526b1f06750881a 256) (bv #xd93e1772685ab167121b3e7304f9099207aeb59723d4d7056b3868e43a1b2c4f 256))
Spec Produced:
(bv #xbf 8)
Synthesize by lane...
Lane Index
22
invoke-spec-lane with env: #((bv #x683e903f050680105e8a7e7e5e5e5ede00000000000000000000000000000000 256) (bv #x287e8d41010800001ca83c1c191c1c1c00000000000000000000000000000000 256) (bv #x00c0304143081f11206080200000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xa8 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$18 sym_bv$19 sym_bv$20)

invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
verify-across-lanes returned #t ... 

Test elapsed time: 
12
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x00 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.0
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: max((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t710), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)], max((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t710), 0) - t707)*(t650 + 34)) + t559, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t710 + 2, input.extent.1), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)]))
Expression before InlineLets: max((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t710), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)], max((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t710), 0) - t707)*(t650 + 34)) + t559, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t710 + 2, input.extent.1), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)]))
Expression after InlineLets: max((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t710), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)], max((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t710), 0) - t707)*(t650 + 34)) + t559, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t710 + 2, input.extent.1), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)]))
Expression before abstraction: max((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t710), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)], max((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t710), 0) - t707)*(t650 + 34)) + t559, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t710 + 2, input.extent.1), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)]))
Input expression to synthesize: max((uint8x32)bounded_input[ramp(t957, 1, 32)], max((uint8x32)bounded_input[ramp(t965, 1, 32)], (uint8x32)bounded_input[ramp(t972, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 15.477582seconds ...
Expression after replacae abstraction: max((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t710), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)], max((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t710), 0) - t707)*(t650 + 34)) + t559, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t710 + 2, input.extent.1), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (uint8x32)hydride.node.0((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t710), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)], (uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t710), 0) - t707)*(t650 + 34)) + t559, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t710 + 2, input.extent.1), 1) - t707)*(t650 + 34)) - t650) + t559) + -34, 1, 32)])
rm: cannot remove '/tmp/base_5799_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_min_epu8 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
get-expr-grammar with base_name: base_5799

base_5799_grammar.rkt
/tmp/base_5799_grammar.rkt
Writing [{ 
"name": "base_5799" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,32], [1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5799_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5799_spec.JSON /tmp/base_5799_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_5799 ... 

Grammar:
#<procedure:base_5799>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0b5f326c470240085b464ea4107b33072320b2485673c58c147f101111ab1f28 256)
invoke-spec-lane with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
Concrete counter examples:
(#((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256)) #((bv #xbdd864437cfaab826beeca8a3bc49a4daf1d76c3c9f5c250397c3f7005361d22 256) (bv #x7edea09449aa707d8250df4b31b8ec19d91f9f71b4afd55ef6947f8676c967ab 256) (bv #xfc96098d734f05a19511eeb6a42066e701145c95c8774b5395a9778795cb948f 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
Spec Produced:
(bv #x28 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xbdd864437cfaab826beeca8a3bc49a4daf1d76c3c9f5c250397c3f7005361d22 256) (bv #x7edea09449aa707d8250df4b31b8ec19d91f9f71b4afd55ef6947f8676c967ab 256) (bv #xfc96098d734f05a19511eeb6a42066e701145c95c8774b5395a9778795cb948f 256))
Spec Produced:
(bv #x22 8)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1 sym_bv$2)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$3 sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$3 sym_bv$4 sym_bv$5)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$3) (ite ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$3 (bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256)]
 [sym_bv$4 (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256)]
 [sym_bv$5 (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256)] ...)
Verification failed :(
#((bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256) (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256))
invoke-spec with env: #((bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256) (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x00007a0000000000000000000000000000000000000000000000000000000000 256)
(bv #x00007a0000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x00007a0000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256) (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x00007a0000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0))
differing-lanes
'(29)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0b5f326c470240085b464ea4107b33072320b2485673c58c147f101111ab1f28 256)
invoke-spec-lane with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
Concrete counter examples:
(#((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256)) #((bv #xbdd864437cfaab826beeca8a3bc49a4daf1d76c3c9f5c250397c3f7005361d22 256) (bv #x7edea09449aa707d8250df4b31b8ec19d91f9f71b4afd55ef6947f8676c967ab 256) (bv #xfc96098d734f05a19511eeb6a42066e701145c95c8774b5395a9778795cb948f 256)) #((bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256) (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256)))
Failing lanes examples:
(0 0 29)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
Spec Produced:
(bv #x28 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xbdd864437cfaab826beeca8a3bc49a4daf1d76c3c9f5c250397c3f7005361d22 256) (bv #x7edea09449aa707d8250df4b31b8ec19d91f9f71b4afd55ef6947f8676c967ab 256) (bv #xfc96098d734f05a19511eeb6a42066e701145c95c8774b5395a9778795cb948f 256))
Spec Produced:
(bv #x22 8)
Synthesize by lane...
Lane Index
29
invoke-spec-lane with env: #((bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256) (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256))
Spec Produced:
(bv #x7a 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7 sym_bv$8)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$9 sym_bv$10 sym_bv$11)

invoke-spec with env: #(sym_bv$9 sym_bv$10 sym_bv$11)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$9) (ite ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$9 (bv #x2c93010100010101010101010101010001010101010101010101010101010101 256)]
 [sym_bv$10 (bv #x38120101ff01010101010101010101ff01010101010101010101010101010101 256)]
 [sym_bv$11 (bv #x5c920000fe00000000000000000000fe00000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x2c93010100010101010101010101010001010101010101010101010101010101 256) (bv #x38120101ff01010101010101010101ff01010101010101010101010101010101 256) (bv #x5c920000fe00000000000000000000fe00000000000000000000000000000000 256))
invoke-spec with env: #((bv #x2c93010100010101010101010101010001010101010101010101010101010101 256) (bv #x38120101ff01010101010101010101ff01010101010101010101010101010101 256) (bv #x5c920000fe00000000000000000000fe00000000000000000000000000000000 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x2c12000000000000000000000000000000000000000000000000000000000000 256)
(bv #x2c12000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x2c12000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x2c92000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x2c93010100010101010101010101010001010101010101010101010101010101 256) (bv #x38120101ff01010101010101010101ff01010101010101010101010101010101 256) (bv #x5c920000fe00000000000000000000fe00000000000000000000000000000000 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x2c12000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0))
differing-lanes
'(30)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0b5f326c470240085b464ea4107b33072320b2485673c58c147f101111ab1f28 256)
invoke-spec-lane with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
Concrete counter examples:
(#((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256)) #((bv #xbdd864437cfaab826beeca8a3bc49a4daf1d76c3c9f5c250397c3f7005361d22 256) (bv #x7edea09449aa707d8250df4b31b8ec19d91f9f71b4afd55ef6947f8676c967ab 256) (bv #xfc96098d734f05a19511eeb6a42066e701145c95c8774b5395a9778795cb948f 256)) #((bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256) (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256)) #((bv #x2c93010100010101010101010101010001010101010101010101010101010101 256) (bv #x38120101ff01010101010101010101ff01010101010101010101010101010101 256) (bv #x5c920000fe00000000000000000000fe00000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 29 30)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0b5fb5a389a6dfd55bc17aee107be085237dd748978dcc8c72c5671111de7128 256) (bv #x906f997cc202c208a2d6a1a41aa63326d020b265e073c5e0147f92979aab81a5 256) (bv #xfbf4326c47694098b4464ec1fcef5c07adf8e08d5689eaf5e8e0108018b31fc6 256))
Spec Produced:
(bv #x28 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xbdd864437cfaab826beeca8a3bc49a4daf1d76c3c9f5c250397c3f7005361d22 256) (bv #x7edea09449aa707d8250df4b31b8ec19d91f9f71b4afd55ef6947f8676c967ab 256) (bv #xfc96098d734f05a19511eeb6a42066e701145c95c8774b5395a9778795cb948f 256))
Spec Produced:
(bv #x22 8)
Synthesize by lane...
Lane Index
29
invoke-spec-lane with env: #((bv #x0000fa0000000000000000000000000000000000000000000000000000000000 256) (bv #x81fffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffff 256) (bv #x0cfe7afefefefefcfefefefefefefefefefefefefefefefefefefefefefefefe 256))
Spec Produced:
(bv #x7a 8)
Synthesize by lane...
Lane Index
30
invoke-spec-lane with env: #((bv #x2c93010100010101010101010101010001010101010101010101010101010101 256) (bv #x38120101ff01010101010101010101ff01010101010101010101010101010101 256) (bv #x5c920000fe00000000000000000000fe00000000000000000000000000000000 256))
Spec Produced:
(bv #x12 8)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x4141144c19513229a6ba1b041f420b07665140484d691b48bb861946297c153e 256)
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Concrete counter examples:
(#((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256)) #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Spec Produced:
(bv #x3e 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256))
Spec Produced:
(bv #xb6 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13 sym_bv$14)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13 sym_bv$14)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$15 sym_bv$16 sym_bv$17)

invoke-spec with env: #(sym_bv$15 sym_bv$16 sym_bv$17)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$15) (ite ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$15 (bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256)]
 [sym_bv$16 (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256)]
 [sym_bv$17 (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256)] ...)
Verification failed :(
#((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256))
invoke-spec with env: #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0c00000000000020000000000000000000000000000000000000000000000000 256)
(bv #x0c00000000000020000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x0c00000000000020000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0d00000400000040000000000000100000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0c00000000000020000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 1))
differing-lanes
'(17)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x4141144c19513229a6ba1b041f420b07665140484d691b48bb861946297c153e 256)
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Concrete counter examples:
(#((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256)) #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256)) #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256)))
Failing lanes examples:
(0 0 17)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Spec Produced:
(bv #x3e 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256))
Spec Produced:
(bv #xb6 8)
Synthesize by lane...
Lane Index
17
invoke-spec-lane with env: #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Z3 Synthesized Solution
(deinterleave-vector_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(deinterleave-vector_dsl
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$18 sym_bv$19 sym_bv$20)

invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19 sym_bv$20)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$21 sym_bv$22 sym_bv$23)

invoke-spec with env: #(sym_bv$21 sym_bv$22 sym_bv$23)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$21) (ite ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$21 (bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256)]
 [sym_bv$22 (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256)]
 [sym_bv$23 (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256)] ...)
Verification failed :(
#((bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256) (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256) (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256))
invoke-spec with env: #((bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256) (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256) (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0a00026e02000200010001000100010000000000000000000000000000000000 256)
(bv #x0a00026e02000200010001000100010000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x0a00026e02000200010001000100010000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0a02026e02020202010101010101010100a00000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256) (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256) (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0a00026e02000200010001000100010000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0))
differing-lanes
'(14)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x4141144c19513229a6ba1b041f420b07665140484d691b48bb861946297c153e 256)
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Concrete counter examples:
(#((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256)) #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256)) #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256)) #((bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256) (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256) (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256)))
Failing lanes examples:
(0 0 17 14)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Spec Produced:
(bv #x3e 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256))
Spec Produced:
(bv #xb6 8)
Synthesize by lane...
Lane Index
17
invoke-spec-lane with env: #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
14
invoke-spec-lane with env: #((bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256) (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256) (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (deinterleave-vector_dsl (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl
 (deinterleave-vector_dsl (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$24 sym_bv$25 sym_bv$26)

invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$27 sym_bv$28 sym_bv$29)

invoke-spec with env: #(sym_bv$27 sym_bv$28 sym_bv$29)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$27) (ite ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$27 (bv #x63fe00002000000600000000000000000000000000ff00000000000000000000 256)]
 [sym_bv$28 (bv #x010108c7dfff76c5ffffff00ffff8dcfffffffffff01ffffffffffffffc7ffff 256)]
 [sym_bv$29 (bv #x28effec6defefeb3fefefefefefe82fffefefefefe00fefefefefefefedffefe 256)] ...)
Verification failed :(
#((bv #x63fe00002000000600000000000000000000000000ff00000000000000000000 256) (bv #x010108c7dfff76c5ffffff00ffff8dcfffffffffff01ffffffffffffffc7ffff 256) (bv #x28effec6defefeb3fefefefefefe82fffefefefefe00fefefefefefefedffefe 256))
invoke-spec with env: #((bv #x63fe00002000000600000000000000000000000000ff00000000000000000000 256) (bv #x010108c7dfff76c5ffffff00ffff8dcfffffffffff01ffffffffffffffc7ffff 256) (bv #x28effec6defefeb3fefefefefefe82fffefefefefe00fefefefefefefedffefe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0101000020000006000000000000000000000000000000000000000000000000 256)
(bv #x0101000020000006000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x0101000020000006000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0108000020000006000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x63fe00002000000600000000000000000000000000ff00000000000000000000 256) (bv #x010108c7dfff76c5ffffff00ffff8dcfffffffffff01ffffffffffffffc7ffff 256) (bv #x28effec6defefeb3fefefefefefe82fffefefefefe00fefefefefefefedffefe 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0101000020000006000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0))
differing-lanes
'(30)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x4141144c19513229a6ba1b041f420b07665140484d691b48bb861946297c153e 256)
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Concrete counter examples:
(#((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256)) #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256)) #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256)) #((bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256) (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256) (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256)) #((bv #x63fe00002000000600000000000000000000000000ff00000000000000000000 256) (bv #x010108c7dfff76c5ffffff00ffff8dcfffffffffff01ffffffffffffffc7ffff 256) (bv #x28effec6defefeb3fefefefefefe82fffefefefefe00fefefefefefefedffefe 256)))
Failing lanes examples:
(0 0 17 14 30)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa94114c82e573229a6bad9047dd60b0eac51fe834dc51b53f9869c9a29d7793e 256) (bv #x41c65b611951a0e6dcd578c1fddedf07668240489469ec48bb871985a87c1599 256) (bv #xdba5324c56c3ce87acc11b301f4285ccc3626d84a1b424f8fcacfa46c5b7ced4 256))
Spec Produced:
(bv #x3e 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x35ff3ad4b0b0a02bd84812ff4395cd0c289dd7907db9c3e72af9fe710a4207f9 256) (bv #xa3d7a77047d838606790162cf7e189d114ecd414cea4c97e6bf4752f7e19bdb6 256) (bv #x8ce5eab81b21258b33e886449e4e4b484456f2c95925102b9a2e05aa202b20c0 256))
Spec Produced:
(bv #xb6 8)
Synthesize by lane...
Lane Index
17
invoke-spec-lane with env: #((bv #x0d0001040001016b010101010101100001010101010101010101010101000101 256) (bv #xc0fb00f3ff000040000000000000ffff00000000000000000000000000b50000 256) (bv #x0cecfe00fefefe20fefefefefefe00fefefefefefefefefefefefefefe9efefe 256))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
14
invoke-spec-lane with env: #((bv #xc300ffdd02006e00020002000200020001000100010001000100ff0001000100 256) (bv #x0af302a0ffff841f03ff03ff03ff03ff03ff03ff03ff03ff03ff01ff03f103ff 256) (bv #x2efbfe6efefe021f01fe01fe01fe01fe00fe00fe00fe00fe00fe00fe00ff00fe 256))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
30
invoke-spec-lane with env: #((bv #x63fe00002000000600000000000000000000000000ff00000000000000000000 256) (bv #x010108c7dfff76c5ffffff00ffff8dcfffffffffff01ffffffffffffffc7ffff 256) (bv #x28effec6defefeb3fefefefefefe82fffefefefefe00fefefefefefefedffefe 256))
Spec Produced:
(bv #x01 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$30 sym_bv$31 sym_bv$32)

invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31 sym_bv$32)
verify-across-lanes returned #t ... 

Test elapsed time: 
27
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256)))
#(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)
Synthesis step completed!
Solution
(_m_pminub_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
(_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
Cost
7
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_m_pminub_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
 (reg (bv #x00 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.1
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: min((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t720), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)], min((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t720), 0) - t713)*(t650 + 34)) + t564, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t720 + 2, input.extent.1), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)]))
Expression before InlineLets: min((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t720), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)], min((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t720), 0) - t713)*(t650 + 34)) + t564, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t720 + 2, input.extent.1), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)]))
Expression after InlineLets: min((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t720), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)], min((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t720), 0) - t713)*(t650 + 34)) + t564, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t720 + 2, input.extent.1), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)]))
Expression before abstraction: min((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t720), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)], min((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t720), 0) - t713)*(t650 + 34)) + t564, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t720 + 2, input.extent.1), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)]))
Input expression to synthesize: min((uint8x32)bounded_input[ramp(t1012, 1, 32)], min((uint8x32)bounded_input[ramp(t1020, 1, 32)], (uint8x32)bounded_input[ramp(t1027, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 31.014234seconds ...
Expression after replacae abstraction: min((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t720), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)], min((uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t720), 0) - t713)*(t650 + 34)) + t564, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t720 + 2, input.extent.1), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (uint8x32)hydride.node.1((uint8x32)bounded_input[ramp(((((max(min(input.extent.1, t720), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)], (uint8x32)bounded_input[ramp(((max(min(input.extent.1 + -1, t720), 0) - t713)*(t650 + 34)) + t564, 1, 32)], (uint8x32)bounded_input[ramp(((((max(min(t720 + 2, input.extent.1), 1) - t713)*(t650 + 34)) - t650) + t564) + -34, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
(_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
Cost
7
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_m_pminub_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
 (reg (bv #x00 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.2
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: min((uint8x32)max_y[ramp(t565 + 32, 1, 32)], min((uint8x32)max_y[ramp(t565 + 33, 1, 32)], (uint8x32)max_y[ramp(t565 + 34, 1, 32)]))
Expression before InlineLets: min((uint8x32)max_y[ramp(t565 + 32, 1, 32)], min((uint8x32)max_y[ramp(t565 + 33, 1, 32)], (uint8x32)max_y[ramp(t565 + 34, 1, 32)]))
Expression after InlineLets: min((uint8x32)max_y[ramp(t565 + 32, 1, 32)], min((uint8x32)max_y[ramp(t565 + 33, 1, 32)], (uint8x32)max_y[ramp(t565 + 34, 1, 32)]))
Expression before abstraction: min((uint8x32)max_y[ramp(t565 + 32, 1, 32)], min((uint8x32)max_y[ramp(t565 + 33, 1, 32)], (uint8x32)max_y[ramp(t565 + 34, 1, 32)]))
Input expression to synthesize: min((uint8x32)max_y[ramp(t1081, 1, 32)], min((uint8x32)max_y[ramp(t1082, 1, 32)], (uint8x32)max_y[ramp(t1083, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.730168seconds ...
Expression after replacae abstraction: min((uint8x32)max_y[ramp(t565 + 32, 1, 32)], min((uint8x32)max_y[ramp(t565 + 33, 1, 32)], (uint8x32)max_y[ramp(t565 + 34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 2

Optimized expression: (uint8x32)hydride.node.2((uint8x32)max_y[ramp(t565 + 32, 1, 32)], (uint8x32)max_y[ramp(t565 + 33, 1, 32)], (uint8x32)max_y[ramp(t565 + 34, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x00 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.3
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Starting synthesis for expr: 3
Expression before lower intrinsic: (let t760 = (t567 + t727) in max((uint8x32)min_y[ramp(t760 + 32, 1, 32)], max((uint8x32)min_y[ramp(t760 + 33, 1, 32)], (uint8x32)min_y[ramp(t760 + 34, 1, 32)])))
Expression before InlineLets: (let t760 = (t567 + t727) in max((uint8x32)min_y[ramp(t760 + 32, 1, 32)], max((uint8x32)min_y[ramp(t760 + 33, 1, 32)], (uint8x32)min_y[ramp(t760 + 34, 1, 32)])))
Expression after InlineLets: max((uint8x32)min_y[ramp((t567 + t727) + 32, 1, 32)], max((uint8x32)min_y[ramp((t567 + t727) + 33, 1, 32)], (uint8x32)min_y[ramp((t567 + t727) + 34, 1, 32)]))
Expression before abstraction: max((uint8x32)min_y[ramp((t567 + t727) + 32, 1, 32)], max((uint8x32)min_y[ramp((t567 + t727) + 33, 1, 32)], (uint8x32)min_y[ramp((t567 + t727) + 34, 1, 32)]))
Input expression to synthesize: max((uint8x32)min_y[ramp(t1096, 1, 32)], max((uint8x32)min_y[ramp(t1098, 1, 32)], (uint8x32)min_y[ramp(t1100, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.090858seconds ...
Expression after replacae abstraction: max((uint8x32)min_y[ramp((t567 + t727) + 32, 1, 32)], max((uint8x32)min_y[ramp((t567 + t727) + 33, 1, 32)], (uint8x32)min_y[ramp((t567 + t727) + 34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 3

Optimized expression: (uint8x32)hydride.node.3((uint8x32)min_y[ramp((t567 + t727) + 32, 1, 32)], (uint8x32)min_y[ramp((t567 + t727) + 33, 1, 32)], (uint8x32)min_y[ramp((t567 + t727) + 34, 1, 32)])
rm: cannot remove '/tmp/base_6517_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_min_epu8 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)))
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
get-expr-grammar with base_name: base_6517

base_6517_grammar.rkt
/tmp/base_6517_grammar.rkt
Writing [{ 
"name": "base_6517" , 
"semantics": [ "(extract #<procedure:bvumax> zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,32], [1,32], [1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8, 8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6517_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6517_spec.JSON /tmp/base_6517_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_6517 ... 

Grammar:
#<procedure:base_6517>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x29e1fa07f9dfee4158ff367ca2edb60753e1185332c57442be725c80d34f3cbe 256) (bv #x2fa786ec6491ade21f1903f4be2221b80c09db11ecfcca1df9eff60fd91a056f 256) (bv #x3da1f72aaf5f868f6eb29c56e90c90c6fbefefafdfbcaaf477470d958979e51f 256) (bv #xcd6ab68389105cf815c26af48623993f8225af9bf46b3464043ed252f4d90c8f 256))
(vec-max (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x3da7b62a8991ad8f1fb26a7ca222903f8225af9bdfc57464be725c52d3790c6f 256)
invoke-spec-lane with env: #((bv #x29e1fa07f9dfee4158ff367ca2edb60753e1185332c57442be725c80d34f3cbe 256) (bv #x2fa786ec6491ade21f1903f4be2221b80c09db11ecfcca1df9eff60fd91a056f 256) (bv #x3da1f72aaf5f868f6eb29c56e90c90c6fbefefafdfbcaaf477470d958979e51f 256) (bv #xcd6ab68389105cf815c26af48623993f8225af9bf46b3464043ed252f4d90c8f 256))
Concrete counter examples:
(#((bv #x29e1fa07f9dfee4158ff367ca2edb60753e1185332c57442be725c80d34f3cbe 256) (bv #x2fa786ec6491ade21f1903f4be2221b80c09db11ecfcca1df9eff60fd91a056f 256) (bv #x3da1f72aaf5f868f6eb29c56e90c90c6fbefefafdfbcaaf477470d958979e51f 256) (bv #xcd6ab68389105cf815c26af48623993f8225af9bf46b3464043ed252f4d90c8f 256)) #((bv #x132cd16cfe49c2c2f678375b910d75a2c74dec8465ecfc1d3a01b201ff6a8c72 256) (bv #x808cd2d11d31ff477020d4b3f75995fe1c257a5da2acf8adf85e98e5eea00485 256) (bv #xc92ea7333a324e482912d7ea0f37f87ef9d498743ade0769a9b676434731d7f4 256) (bv #xacc3cc42036056a9d7139886988307caa4fa1f78a9046084b66216aac3d671c0 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x29e1fa07f9dfee4158ff367ca2edb60753e1185332c57442be725c80d34f3cbe 256) (bv #x2fa786ec6491ade21f1903f4be2221b80c09db11ecfcca1df9eff60fd91a056f 256) (bv #x3da1f72aaf5f868f6eb29c56e90c90c6fbefefafdfbcaaf477470d958979e51f 256) (bv #xcd6ab68389105cf815c26af48623993f8225af9bf46b3464043ed252f4d90c8f 256))
Spec Produced:
(bv #x6f 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x132cd16cfe49c2c2f678375b910d75a2c74dec8465ecfc1d3a01b201ff6a8c72 256) (bv #x808cd2d11d31ff477020d4b3f75995fe1c257a5da2acf8adf85e98e5eea00485 256) (bv #xc92ea7333a324e482912d7ea0f37f87ef9d498743ade0769a9b676434731d7f4 256) (bv #xacc3cc42036056a9d7139886988307caa4fa1f78a9046084b66216aac3d671c0 256))
Spec Produced:
(bv #xc0 8)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256))
(vec-max (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x2a12523d50275f822e8c37bb7d08464abc74a48391166f838b225732769e1f63 256)
invoke-spec-lane with env: #((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256))
Concrete counter examples:
(#((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256)) #((bv #x2042bb87ca8004539ac63f0ca03300d5fa6d599ed4e8ac056a73c2f727f7d4d1 256) (bv #x88af1922685206867c0d727a6d7bcb9ce9af7ef4f4753724dd0ed556645fab0e 256) (bv #x13579b53207f83b642dc228e7d987cde279bc32a0e33acecef67b59b5480188e 256) (bv #xdc27edb306659b6d166b4b6f45a265787f943665392d593037bac4fb2df5ca47 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256))
Spec Produced:
(bv #x63 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2042bb87ca8004539ac63f0ca03300d5fa6d599ed4e8ac056a73c2f727f7d4d1 256) (bv #x88af1922685206867c0d727a6d7bcb9ce9af7ef4f4753724dd0ed556645fab0e 256) (bv #x13579b53207f83b642dc228e7d987cde279bc32a0e33acecef67b59b5480188e 256) (bv #xdc27edb306659b6d166b4b6f45a265787f943665392d593037bac4fb2df5ca47 256))
Spec Produced:
(bv #x47 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x3 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 (reg (bv #x3 4))
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5 sym_bv$6 sym_bv$7)

invoke-spec with env: #(sym_bv$4 sym_bv$5 sym_bv$6 sym_bv$7)
(vec-max (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (ite (bvule (extract 255 248 sym_bv$6) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #x0674d66e33a04cf1860e868786eb868600000080000000000000008000000000 256)]
 [sym_bv$5 (bv #x44b4d6f3829cf153a802b892e66cf4b0ffffffffffffffffffffffffffffffff 256)]
 [sym_bv$6 (bv #x0080008b1e81200b070303bd0101030101010170010101010101808001010101 256)] ...)
Verification failed :(
#((bv #x0674d66e33a04cf1860e868786eb868600000080000000000000008000000000 256) (bv #x44b4d6f3829cf153a802b892e66cf4b0ffffffffffffffffffffffffffffffff 256) (bv #x0080008b1e81200b070303bd0101030101010170010101010101808001010101 256) (bv #x458e34c03a0e043b406040a740007c4000000069000000000000002300000000 256))
invoke-spec with env: #((bv #x0674d66e33a04cf1860e868786eb868600000080000000000000008000000000 256) (bv #x44b4d6f3829cf153a802b892e66cf4b0ffffffffffffffffffffffffffffffff 256) (bv #x0080008b1e81200b070303bd0101030101010170010101010101808001010101 256) (bv #x458e34c03a0e043b406040a740007c4000000069000000000000002300000000 256))
(vec-max (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0680d68b339c4c53860386a7866c868600000080000000000000008000000000 256)
(bv #x0680d68b339c4c53860386a7866c868600000080000000000000008000000000 256)
Verification failed ...
	spec produced: (bv #x0680d68b339c4c53860386a7866c868600000080000000000000008000000000 256) 256 
	synthesized result produced: (bv #x458ed6c03a9c4c53866086a7866c868600000080000000000000008000000000 256) 256

invoke-spec with env: #((bv #x0674d66e33a04cf1860e868786eb868600000080000000000000008000000000 256) (bv #x44b4d6f3829cf153a802b892e66cf4b0ffffffffffffffffffffffffffffffff 256) (bv #x0080008b1e81200b070303bd0101030101010170010101010101808001010101 256) (bv #x458e34c03a0e043b406040a740007c4000000069000000000000002300000000 256))
(vec-max (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x0680d68b339c4c53860386a7866c868600000080000000000000008000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 1))
differing-lanes
'(22)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256))
(vec-max (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)) (vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256)))
Spec result
(bv #x2a12523d50275f822e8c37bb7d08464abc74a48391166f838b225732769e1f63 256)
invoke-spec-lane with env: #((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256))
Concrete counter examples:
(#((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256)) #((bv #x2042bb87ca8004539ac63f0ca03300d5fa6d599ed4e8ac056a73c2f727f7d4d1 256) (bv #x88af1922685206867c0d727a6d7bcb9ce9af7ef4f4753724dd0ed556645fab0e 256) (bv #x13579b53207f83b642dc228e7d987cde279bc32a0e33acecef67b59b5480188e 256) (bv #xdc27edb306659b6d166b4b6f45a265787f943665392d593037bac4fb2df5ca47 256)) #((bv #x0674d66e33a04cf1860e868786eb868600000080000000000000008000000000 256) (bv #x44b4d6f3829cf153a802b892e66cf4b0ffffffffffffffffffffffffffffffff 256) (bv #x0080008b1e81200b070303bd0101030101010170010101010101808001010101 256) (bv #x458e34c03a0e043b406040a740007c4000000069000000000000002300000000 256)))
Failing lanes examples:
(0 0 22)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2a1252185027f8822d8c341ff5644603da49a63472aee383c122a4a876fda963 256) (bv #x9261f355d2575ff20ebdab2a3108f84abcf1a478cb096fa48b662211769e05f4 256) (bv #x124162e6a40d0ad6847137d790e8d686b4743ed19669c726d3397b3230e81fc2 256) (bv #xe60b1d3d4719ad232e83cfbb7d000e4ae2c59783911606a71307575f8874df5b 256))
Spec Produced:
(bv #x63 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2042bb87ca8004539ac63f0ca03300d5fa6d599ed4e8ac056a73c2f727f7d4d1 256) (bv #x88af1922685206867c0d727a6d7bcb9ce9af7ef4f4753724dd0ed556645fab0e 256) (bv #x13579b53207f83b642dc228e7d987cde279bc32a0e33acecef67b59b5480188e 256) (bv #xdc27edb306659b6d166b4b6f45a265787f943665392d593037bac4fb2df5ca47 256))
Spec Produced:
(bv #x47 8)
Synthesize by lane...
Lane Index
22
invoke-spec-lane with env: #((bv #x0674d66e33a04cf1860e868786eb868600000080000000000000008000000000 256) (bv #x44b4d6f3829cf153a802b892e66cf4b0ffffffffffffffffffffffffffffffff 256) (bv #x0080008b1e81200b070303bd0101030101010170010101010101808001010101 256) (bv #x458e34c03a0e043b406040a740007c4000000069000000000000002300000000 256))
Spec Produced:
(bv #x03 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
verify-across-lanes returned #t ... 

Test elapsed time: 
15
(vec-max
 (vec-min '(buf uint8 256) '(buf uint8 256))
 (vec-min '(buf uint8 256) '(buf uint8 256)))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5819

base_5819_grammar.rkt
/tmp/base_5819_grammar.rkt
Writing [{ 
"name": "base_5819" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5819_spec.JSON
rm: cannot remove '/tmp/base_5819_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5819_spec.JSON /tmp/base_5819_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_5819 ... 

Grammar:
#<procedure:base_5819>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x4b5268dd75bbddebde82ebb1dafe32dc77db665dd1b1f0fdb092e4bcb3ddcfa2 256)
invoke-spec-lane with env: #((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256))
Concrete counter examples:
(#((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256)) #((bv #x53ad74f14339da5d65f72a9845a5ea97bd59f76474e23380a8583a42686c6eac 256) (bv #xc23635684838d29aba5e80db08607a7c01d47944745e990ab74d851fa634ab8c 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256))
Spec Produced:
(bv #xa2 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x53ad74f14339da5d65f72a9845a5ea97bd59f76474e23380a8583a42686c6eac 256) (bv #xc23635684838d29aba5e80db08607a7c01d47944745e990ab74d851fa634ab8c 256))
Spec Produced:
(bv #xac 8)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$14 sym_bv$15)

invoke-spec with env: #(sym_bv$14 sym_bv$15)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$15) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$14 (bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)]
 [sym_bv$15 (bv #x014d010100000000000000000000000040000000000000000000000000000000 256)])
Verification failed :(
#((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
invoke-spec with env: #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)
(bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x344d808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0))
differing-lanes
'(30)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x4b5268dd75bbddebde82ebb1dafe32dc77db665dd1b1f0fdb092e4bcb3ddcfa2 256)
invoke-spec-lane with env: #((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256))
Concrete counter examples:
(#((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256)) #((bv #x53ad74f14339da5d65f72a9845a5ea97bd59f76474e23380a8583a42686c6eac 256) (bv #xc23635684838d29aba5e80db08607a7c01d47944745e990ab74d851fa634ab8c 256)) #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 30)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4b4d68dd7583ddddde37d6b12afe1f7177170309d1a2e0fd9809e44445a44ea2 256) (bv #x33525d0409bb3cebba82eb23daa532dc75db665d9db1f0e3b0927ebcb3ddcf89 256))
Spec Produced:
(bv #xa2 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x53ad74f14339da5d65f72a9845a5ea97bd59f76474e23380a8583a42686c6eac 256) (bv #xc23635684838d29aba5e80db08607a7c01d47944745e990ab74d851fa634ab8c 256))
Spec Produced:
(bv #xac 8)
Synthesize by lane...
Lane Index
30
invoke-spec-lane with env: #((bv #x344c808082828282e2e2e2e2e2e2e2f480000000000000000000000000000000 256) (bv #x014d010100000000000000000000000040000000000000000000000000000000 256))
Spec Produced:
(bv #x4d 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$16 sym_bv$17)

invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-max '(buf uint8 256) '(buf uint8 256))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 8) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
  (reg (bv #x00 8))
  256
  8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.4
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Starting synthesis for expr: 4
Expression before lower intrinsic: max(min((uint8x32)bounded_input[ramp((t567 + t730) + -2, 1, 32)], max((uint8x32)t575, (uint8x32)t576)), min((uint8x32)t575, (uint8x32)t576))
Expression before InlineLets: max(min((uint8x32)bounded_input[ramp((t567 + t730) + -2, 1, 32)], max((uint8x32)t575, (uint8x32)t576)), min((uint8x32)t575, (uint8x32)t576))
Expression after InlineLets: max(min((uint8x32)bounded_input[ramp((t567 + t730) + -2, 1, 32)], max((uint8x32)t575, (uint8x32)t576)), min((uint8x32)t575, (uint8x32)t576))
Expression before abstraction: max(min((uint8x32)bounded_input[ramp((t567 + t730) + -2, 1, 32)], max((uint8x32)t575, (uint8x32)t576)), min((uint8x32)t575, (uint8x32)t576))
Input expression to synthesize: max(min((uint8x32)bounded_input[ramp(t1114, 1, 32)], max((uint8x32)t575, (uint8x32)t576)), min((uint8x32)t575, (uint8x32)t576))
t575 maps to reg_1
t576 maps to reg_2
Synthesis completed with return code:	0
Synthesis took 20.986039seconds ...
Expression after replacae abstraction: max(min((uint8x32)bounded_input[ramp((t567 + t730) + -2, 1, 32)], max((uint8x32)t575, (uint8x32)t576)), min((uint8x32)t575, (uint8x32)t576))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 4

Optimized expression: (uint8x32)hydride.node.4((uint8x32)bounded_input[ramp((t567 + t730) + -2, 1, 32)], (uint8x32)t575, (uint8x32)t576)
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max #(struct:vec-min (buf uint8 256) (buf uint8 256)) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)))
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 8) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
  (reg (bv #x00 8))
  256
  8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.5
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Append [; hydride.node.5
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Starting synthesis for expr: 5
Expression before lower intrinsic: max(min((uint8x32)bounded_input[ramp(((t731 - t650) + t567) + -1, 1, 32)], max((uint8x32)t581, (uint8x32)t583)), min((uint8x32)t581, (uint8x32)t583))
Expression before InlineLets: max(min((uint8x32)bounded_input[ramp(((t731 - t650) + t567) + -1, 1, 32)], max((uint8x32)t581, (uint8x32)t583)), min((uint8x32)t581, (uint8x32)t583))
Expression after InlineLets: max(min((uint8x32)bounded_input[ramp(((t731 - t650) + t567) + -1, 1, 32)], max((uint8x32)t581, (uint8x32)t583)), min((uint8x32)t581, (uint8x32)t583))
Expression before abstraction: max(min((uint8x32)bounded_input[ramp(((t731 - t650) + t567) + -1, 1, 32)], max((uint8x32)t581, (uint8x32)t583)), min((uint8x32)t581, (uint8x32)t583))
Input expression to synthesize: max(min((uint8x32)bounded_input[ramp(t1130, 1, 32)], max((uint8x32)t581, (uint8x32)t583)), min((uint8x32)t581, (uint8x32)t583))
t581 maps to reg_1
t583 maps to reg_2
Synthesis completed with return code:	0
Synthesis took 2.795198seconds ...
Expression after replacae abstraction: max(min((uint8x32)bounded_input[ramp(((t731 - t650) + t567) + -1, 1, 32)], max((uint8x32)t581, (uint8x32)t583)), min((uint8x32)t581, (uint8x32)t583))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 5

Optimized expression: (uint8x32)hydride.node.5((uint8x32)bounded_input[ramp(((t731 - t650) + t567) + -1, 1, 32)], (uint8x32)t581, (uint8x32)t583)
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max #(struct:vec-min (buf uint8 256) (buf uint8 256)) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)))
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 8)
========================================
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x03 8)) (reg (bv #x02 8)) 256 8)
========================================
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x06 8)) #(struct:reg (bv #x05 8)) 256 8) #(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x05 8)) (reg (bv #x06 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
  (reg (bv #x04 8))
  256
  8)
 256
 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x03 8)) #(struct:reg (bv #x02 8)) 256 8) #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)) 256 8) #(struct:_m_pminub_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x06 8)) #(struct:reg (bv #x05 8)) 256 8) #(struct:reg (bv #x04 8)) 256 8) 256 8) #(struct:reg (bv #x02 8)) #(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256))
  (vec-max
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (vec-max
     (buffer #<procedure:buffer-fn> 'uint8 256)
     (buffer #<procedure:buffer-fn> 'uint8 256)))
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (buffer #<procedure:buffer-fn> 'uint8 256))))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x02 8)) (reg (bv #x03 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl
   (_m_pminub_dsl (reg (bv #x05 8)) (reg (bv #x06 8)) 256 8)
   (_m_pminub_dsl
    (_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
    (reg (bv #x04 8))
    256
    8)
   256
   8)
  (_mm512_max_epu64_dsl (reg (bv #x03 8)) (reg (bv #x02 8)) 256 8)
  256
  8)
 256
 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 8) #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x03 8)) 256 8) #(struct:_m_pminub_dsl #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)) 256 8) #(struct:_m_pminub_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x06 8)) #(struct:reg (bv #x05 8)) 256 8) #(struct:reg (bv #x04 8)) 256 8) 256 8) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x03 8)) #(struct:reg (bv #x02 8)) 256 8) 256 8) 256 8) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256))
  (vec-max
   (vec-min
    (vec-max
     (buffer #<procedure:buffer-fn> 'uint8 256)
     (buffer #<procedure:buffer-fn> 'uint8 256))
    (vec-max
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (vec-max
       (buffer #<procedure:buffer-fn> 'uint8 256)
       (buffer #<procedure:buffer-fn> 'uint8 256)))
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (buffer #<procedure:buffer-fn> 'uint8 256))))
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (buffer #<procedure:buffer-fn> 'uint8 256))))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl
   (_m_pminub_dsl (reg (bv #x02 8)) (reg (bv #x03 8)) 256 8)
   (_m_pminub_dsl
    (_mm512_max_epu64_dsl
     (_m_pminub_dsl (reg (bv #x05 8)) (reg (bv #x06 8)) 256 8)
     (_m_pminub_dsl
      (_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
      (reg (bv #x04 8))
      256
      8)
     256
     8)
    (_mm512_max_epu64_dsl (reg (bv #x03 8)) (reg (bv #x02 8)) 256 8)
    256
    8)
   256
   8)
  (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 8)
  256
  8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256))
  (vec-max
   (vec-min
    (vec-max
     (buffer #<procedure:buffer-fn> 'uint8 256)
     (buffer #<procedure:buffer-fn> 'uint8 256))
    (vec-max
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (vec-max
       (buffer #<procedure:buffer-fn> 'uint8 256)
       (buffer #<procedure:buffer-fn> 'uint8 256)))
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (buffer #<procedure:buffer-fn> 'uint8 256))))
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (buffer #<procedure:buffer-fn> 'uint8 256))))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x03 8))
========================================
; (reg (bv #x05 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x04 8)) <32 x i8>
; (reg (bv #x06 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x03 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 3)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 5)  
(reg 6)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 6)  
(reg 5)  256  8  );<32 x i8>
  
(reg 4)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 3)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.6
; (reg 5) <32 x i8>
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 4) <32 x i8>
; (reg 6) <32 x i8>
; (reg 1) <32 x i8>
; (reg 3) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 3)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 5)  
(reg 6)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 6)  
(reg 5)  256  8  );<32 x i8>
  
(reg 4)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 3)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Append [; hydride.node.6
; (reg 5) <32 x i8>
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 4) <32 x i8>
; (reg 6) <32 x i8>
; (reg 1) <32 x i8>
; (reg 3) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 3)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 5)  
(reg 6)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 6)  
(reg 5)  256  8  );<32 x i8>
  
(reg 4)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 3)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Starting synthesis for expr: 6
Expression before lower intrinsic: max(min(max((uint8x32)t566, (uint8x32)t569), max(min(max((uint8x32)t577, (uint8x32)t584), max(min((uint8x32)bounded_input[ramp((t731 - t650) + t567, 1, 32)], max((uint8x32)t585, (uint8x32)t586)), min((uint8x32)t585, (uint8x32)t586))), min((uint8x32)t577, (uint8x32)t584))), min((uint8x32)t566, (uint8x32)t569))
Expression before InlineLets: max(min(max((uint8x32)t566, (uint8x32)t569), max(min(max((uint8x32)t577, (uint8x32)t584), max(min((uint8x32)bounded_input[ramp((t731 - t650) + t567, 1, 32)], max((uint8x32)t585, (uint8x32)t586)), min((uint8x32)t585, (uint8x32)t586))), min((uint8x32)t577, (uint8x32)t584))), min((uint8x32)t566, (uint8x32)t569))
Expression after InlineLets: max(min(max((uint8x32)t566, (uint8x32)t569), max(min(max((uint8x32)t577, (uint8x32)t584), max(min((uint8x32)bounded_input[ramp((t731 - t650) + t567, 1, 32)], max((uint8x32)t585, (uint8x32)t586)), min((uint8x32)t585, (uint8x32)t586))), min((uint8x32)t577, (uint8x32)t584))), min((uint8x32)t566, (uint8x32)t569))
Expression before abstraction: max(min(max((uint8x32)t566, (uint8x32)t569), max(min(max((uint8x32)t577, (uint8x32)t584), max(min((uint8x32)bounded_input[ramp((t731 - t650) + t567, 1, 32)], max((uint8x32)t585, (uint8x32)t586)), min((uint8x32)t585, (uint8x32)t586))), min((uint8x32)t577, (uint8x32)t584))), min((uint8x32)t566, (uint8x32)t569))
Input expression to synthesize: max(min(max((uint8x32)t566, (uint8x32)t569), max(min(max((uint8x32)t577, (uint8x32)t584), max(min((uint8x32)bounded_input[ramp(t1141, 1, 32)], max((uint8x32)t585, (uint8x32)t586)), min((uint8x32)t585, (uint8x32)t586))), min((uint8x32)t577, (uint8x32)t584))), min((uint8x32)t566, (uint8x32)t569))
t566 maps to reg_0
t569 maps to reg_1
t577 maps to reg_2
t584 maps to reg_3
t585 maps to reg_5
t586 maps to reg_6
Synthesis completed with return code:	0
Synthesis took 3.006162seconds ...
Expression after replacae abstraction: max(min(max((uint8x32)t566, (uint8x32)t569), max(min(max((uint8x32)t577, (uint8x32)t584), max(min((uint8x32)bounded_input[ramp((t731 - t650) + t567, 1, 32)], max((uint8x32)t585, (uint8x32)t586)), min((uint8x32)t585, (uint8x32)t586))), min((uint8x32)t577, (uint8x32)t584))), min((uint8x32)t566, (uint8x32)t569))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 6

Optimized expression: (uint8x32)hydride.node.6((uint8x32)t566, (uint8x32)t569, (uint8x32)t577, (uint8x32)t584, (uint8x32)bounded_input[ramp((t731 - t650) + t567, 1, 32)], (uint8x32)t585, (uint8x32)t586)
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max #(struct:vec-min (buf uint8 256) (buf uint8 256)) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8)
 (reg (bv #x0 4))
 256
 8)
(_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8)
Cost
7
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_m_pminub_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
 (reg (bv #x00 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.7
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Append [; hydride.node.7
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Starting synthesis for expr: 7
Expression before lower intrinsic: min((uint8x32)max_y[ramp(t740 + -32, 1, 32)], min((uint8x32)max_y[ramp(t740 + -31, 1, 32)], (uint8x32)max_y[ramp(t740 + -30, 1, 32)]))
Expression before InlineLets: min((uint8x32)max_y[ramp(t740 + -32, 1, 32)], min((uint8x32)max_y[ramp(t740 + -31, 1, 32)], (uint8x32)max_y[ramp(t740 + -30, 1, 32)]))
Expression after InlineLets: min((uint8x32)max_y[ramp(t740 + -32, 1, 32)], min((uint8x32)max_y[ramp(t740 + -31, 1, 32)], (uint8x32)max_y[ramp(t740 + -30, 1, 32)]))
Expression before abstraction: min((uint8x32)max_y[ramp(t740 + -32, 1, 32)], min((uint8x32)max_y[ramp(t740 + -31, 1, 32)], (uint8x32)max_y[ramp(t740 + -30, 1, 32)]))
Input expression to synthesize: min((uint8x32)max_y[ramp(t1188, 1, 32)], min((uint8x32)max_y[ramp(t1189, 1, 32)], (uint8x32)max_y[ramp(t1190, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.499243seconds ...
Expression after replacae abstraction: min((uint8x32)max_y[ramp(t740 + -32, 1, 32)], min((uint8x32)max_y[ramp(t740 + -31, 1, 32)], (uint8x32)max_y[ramp(t740 + -30, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 7

Optimized expression: (uint8x32)hydride.node.7((uint8x32)max_y[ramp(t740 + -32, 1, 32)], (uint8x32)max_y[ramp(t740 + -31, 1, 32)], (uint8x32)max_y[ramp(t740 + -30, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max #(struct:vec-min (buf uint8 256) (buf uint8 256)) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8)
 (reg (bv #x1 4))
 256
 8)
(_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8)
Cost
11
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x00 8)) 256 8)
 (reg (bv #x01 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

Writing [; hydride.node.8
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Append [; hydride.node.8
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 0)  256  8  );<32 x i8>
  
(reg 1)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Starting synthesis for expr: 8
Expression before lower intrinsic: max((uint8x32)min_y[ramp(t741 + -32, 1, 32)], max((uint8x32)min_y[ramp(t741 + -31, 1, 32)], (uint8x32)min_y[ramp(t741 + -30, 1, 32)]))
Expression before InlineLets: max((uint8x32)min_y[ramp(t741 + -32, 1, 32)], max((uint8x32)min_y[ramp(t741 + -31, 1, 32)], (uint8x32)min_y[ramp(t741 + -30, 1, 32)]))
Expression after InlineLets: max((uint8x32)min_y[ramp(t741 + -32, 1, 32)], max((uint8x32)min_y[ramp(t741 + -31, 1, 32)], (uint8x32)min_y[ramp(t741 + -30, 1, 32)]))
Expression before abstraction: max((uint8x32)min_y[ramp(t741 + -32, 1, 32)], max((uint8x32)min_y[ramp(t741 + -31, 1, 32)], (uint8x32)min_y[ramp(t741 + -30, 1, 32)]))
Input expression to synthesize: max((uint8x32)min_y[ramp(t1202, 1, 32)], max((uint8x32)min_y[ramp(t1203, 1, 32)], (uint8x32)min_y[ramp(t1204, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 2.276748seconds ...
Expression after replacae abstraction: max((uint8x32)min_y[ramp(t741 + -32, 1, 32)], max((uint8x32)min_y[ramp(t741 + -31, 1, 32)], (uint8x32)min_y[ramp(t741 + -30, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 8

Optimized expression: (uint8x32)hydride.node.8((uint8x32)min_y[ramp(t741 + -32, 1, 32)], (uint8x32)min_y[ramp(t741 + -31, 1, 32)], (uint8x32)min_y[ramp(t741 + -30, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max #(struct:vec-min (buf uint8 256) (buf uint8 256)) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)))
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 8) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
  (reg (bv #x00 8))
  256
  8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.9
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Append [; hydride.node.9
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Starting synthesis for expr: 9
Expression before lower intrinsic: max(min((uint8x32)bounded_input[ramp(t744 + -66, 1, 32)], max((uint8x32)t598, (uint8x32)t599)), min((uint8x32)t598, (uint8x32)t599))
Expression before InlineLets: max(min((uint8x32)bounded_input[ramp(t744 + -66, 1, 32)], max((uint8x32)t598, (uint8x32)t599)), min((uint8x32)t598, (uint8x32)t599))
Expression after InlineLets: max(min((uint8x32)bounded_input[ramp(t744 + -66, 1, 32)], max((uint8x32)t598, (uint8x32)t599)), min((uint8x32)t598, (uint8x32)t599))
Expression before abstraction: max(min((uint8x32)bounded_input[ramp(t744 + -66, 1, 32)], max((uint8x32)t598, (uint8x32)t599)), min((uint8x32)t598, (uint8x32)t599))
Input expression to synthesize: max(min((uint8x32)bounded_input[ramp(t1214, 1, 32)], max((uint8x32)t598, (uint8x32)t599)), min((uint8x32)t598, (uint8x32)t599))
t598 maps to reg_1
t599 maps to reg_2
Synthesis completed with return code:	0
Synthesis took 2.769045seconds ...
Expression after replacae abstraction: max(min((uint8x32)bounded_input[ramp(t744 + -66, 1, 32)], max((uint8x32)t598, (uint8x32)t599)), min((uint8x32)t598, (uint8x32)t599))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 9

Optimized expression: (uint8x32)hydride.node.9((uint8x32)bounded_input[ramp(t744 + -66, 1, 32)], (uint8x32)t598, (uint8x32)t599)
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max #(struct:vec-min (buf uint8 256) (buf uint8 256)) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)))
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 8) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 8)
  (reg (bv #x00 8))
  256
  8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.10
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Append [; hydride.node.10
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 2)  
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Starting synthesis for expr: 10
Expression before lower intrinsic: max(min((uint8x32)bounded_input[ramp((t745 - t650) + -65, 1, 32)], max((uint8x32)t604, (uint8x32)t606)), min((uint8x32)t604, (uint8x32)t606))
Expression before InlineLets: max(min((uint8x32)bounded_input[ramp((t745 - t650) + -65, 1, 32)], max((uint8x32)t604, (uint8x32)t606)), min((uint8x32)t604, (uint8x32)t606))
Expression after InlineLets: max(min((uint8x32)bounded_input[ramp((t745 - t650) + -65, 1, 32)], max((uint8x32)t604, (uint8x32)t606)), min((uint8x32)t604, (uint8x32)t606))
Expression before abstraction: max(min((uint8x32)bounded_input[ramp((t745 - t650) + -65, 1, 32)], max((uint8x32)t604, (uint8x32)t606)), min((uint8x32)t604, (uint8x32)t606))
Input expression to synthesize: max(min((uint8x32)bounded_input[ramp(t1226, 1, 32)], max((uint8x32)t604, (uint8x32)t606)), min((uint8x32)t604, (uint8x32)t606))
t604 maps to reg_1
t606 maps to reg_2
Synthesis completed with return code:	0
Synthesis took 2.522882seconds ...
Expression after replacae abstraction: max(min((uint8x32)bounded_input[ramp((t745 - t650) + -65, 1, 32)], max((uint8x32)t604, (uint8x32)t606)), min((uint8x32)t604, (uint8x32)t606))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 10

Optimized expression: (uint8x32)hydride.node.10((uint8x32)bounded_input[ramp((t745 - t650) + -65, 1, 32)], (uint8x32)t604, (uint8x32)t606)
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) #(struct:vec-max (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x0 4)) 256 8) #(struct:reg (bv #x1 4)) 256 8) 4)) (#(struct:vec-min (buf uint8 256) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_m_pminub_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 8) #(struct:reg (bv #x0 4)) 256 8) 6)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max #(struct:vec-min (buf uint8 256) (buf uint8 256)) #(struct:vec-min (buf uint8 256) (buf uint8 256))) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)) 256 8) #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 256 8) 6)))
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 8)
========================================
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x03 8)) (reg (bv #x02 8)) 256 8)
========================================
=======================================
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Hashed expression
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8)
 (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
 256
 8)
(_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8)
Cost
15
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x06 8)) #(struct:reg (bv #x05 8)) 256 8) #(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256)))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x05 8)) (reg (bv #x06 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
  (reg (bv #x04 8))
  256
  8)
 256
 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x03 8)) #(struct:reg (bv #x02 8)) 256 8) #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)) 256 8) #(struct:_m_pminub_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x06 8)) #(struct:reg (bv #x05 8)) 256 8) #(struct:reg (bv #x04 8)) 256 8) 256 8) #(struct:reg (bv #x02 8)) #(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256))
  (vec-max
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (vec-max
     (buffer #<procedure:buffer-fn> 'uint8 256)
     (buffer #<procedure:buffer-fn> 'uint8 256)))
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (buffer #<procedure:buffer-fn> 'uint8 256))))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x02 8)) (reg (bv #x03 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl
   (_m_pminub_dsl (reg (bv #x05 8)) (reg (bv #x06 8)) 256 8)
   (_m_pminub_dsl
    (_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
    (reg (bv #x04 8))
    256
    8)
   256
   8)
  (_mm512_max_epu64_dsl (reg (bv #x03 8)) (reg (bv #x02 8)) 256 8)
  256
  8)
 256
 8)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 8) #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x03 8)) 256 8) #(struct:_m_pminub_dsl #(struct:_mm512_max_epu64_dsl #(struct:_m_pminub_dsl #(struct:reg (bv #x05 8)) #(struct:reg (bv #x06 8)) 256 8) #(struct:_m_pminub_dsl #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x06 8)) #(struct:reg (bv #x05 8)) 256 8) #(struct:reg (bv #x04 8)) 256 8) 256 8) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x03 8)) #(struct:reg (bv #x02 8)) 256 8) 256 8) 256 8) #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256))
  (vec-max
   (vec-min
    (vec-max
     (buffer #<procedure:buffer-fn> 'uint8 256)
     (buffer #<procedure:buffer-fn> 'uint8 256))
    (vec-max
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (vec-max
       (buffer #<procedure:buffer-fn> 'uint8 256)
       (buffer #<procedure:buffer-fn> 'uint8 256)))
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (buffer #<procedure:buffer-fn> 'uint8 256))))
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (buffer #<procedure:buffer-fn> 'uint8 256))))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 8)
 (_m_pminub_dsl
  (_mm512_max_epu64_dsl
   (_m_pminub_dsl (reg (bv #x02 8)) (reg (bv #x03 8)) 256 8)
   (_m_pminub_dsl
    (_mm512_max_epu64_dsl
     (_m_pminub_dsl (reg (bv #x05 8)) (reg (bv #x06 8)) 256 8)
     (_m_pminub_dsl
      (_mm512_max_epu64_dsl (reg (bv #x06 8)) (reg (bv #x05 8)) 256 8)
      (reg (bv #x04 8))
      256
      8)
     256
     8)
    (_mm512_max_epu64_dsl (reg (bv #x03 8)) (reg (bv #x02 8)) 256 8)
    256
    8)
   256
   8)
  (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 8)
  256
  8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-max
   (buffer #<procedure:buffer-fn> 'uint8 256)
   (buffer #<procedure:buffer-fn> 'uint8 256))
  (vec-max
   (vec-min
    (vec-max
     (buffer #<procedure:buffer-fn> 'uint8 256)
     (buffer #<procedure:buffer-fn> 'uint8 256))
    (vec-max
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (vec-max
       (buffer #<procedure:buffer-fn> 'uint8 256)
       (buffer #<procedure:buffer-fn> 'uint8 256)))
     (vec-min
      (buffer #<procedure:buffer-fn> 'uint8 256)
      (buffer #<procedure:buffer-fn> 'uint8 256))))
   (vec-min
    (buffer #<procedure:buffer-fn> 'uint8 256)
    (buffer #<procedure:buffer-fn> 'uint8 256))))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x05 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x04 8)) <32 x i8>
; (reg (bv #x03 8)) <32 x i8>
; (reg (bv #x06 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 3)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 5)  
(reg 6)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 6)  
(reg 5)  256  8  );<32 x i8>
  
(reg 4)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 3)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.11
; (reg 2) <32 x i8>
; (reg 5) <32 x i8>
; (reg 1) <32 x i8>
; (reg 4) <32 x i8>
; (reg 3) <32 x i8>
; (reg 6) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 3)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 5)  
(reg 6)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 6)  
(reg 5)  256  8  );<32 x i8>
  
(reg 4)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 3)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Append [; hydride.node.11
; (reg 2) <32 x i8>
; (reg 5) <32 x i8>
; (reg 1) <32 x i8>
; (reg 4) <32 x i8>
; (reg 3) <32 x i8>
; (reg 6) <32 x i8>
; (reg 0) <32 x i8>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 2)  
(reg 3)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(reg 5)  
(reg 6)  256  8  );<32 x i8>
  
(_m_pminub_dsl 
(_mm512_max_epu64_dsl 
(reg 6)  
(reg 5)  256  8  );<32 x i8>
  
(reg 4)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 3)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>
  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>
  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) 6)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 8) (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 256 8) 6)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Starting synthesis for expr: 11
Expression before lower intrinsic: max(min(max((uint8x32)t589, (uint8x32)t592), max(min(max((uint8x32)t600, (uint8x32)t607), max(min((uint8x32)bounded_input[ramp((t745 - t650) + -64, 1, 32)], max((uint8x32)t608, (uint8x32)t609)), min((uint8x32)t608, (uint8x32)t609))), min((uint8x32)t600, (uint8x32)t607))), min((uint8x32)t589, (uint8x32)t592))
Expression before InlineLets: max(min(max((uint8x32)t589, (uint8x32)t592), max(min(max((uint8x32)t600, (uint8x32)t607), max(min((uint8x32)bounded_input[ramp((t745 - t650) + -64, 1, 32)], max((uint8x32)t608, (uint8x32)t609)), min((uint8x32)t608, (uint8x32)t609))), min((uint8x32)t600, (uint8x32)t607))), min((uint8x32)t589, (uint8x32)t592))
Expression after InlineLets: max(min(max((uint8x32)t589, (uint8x32)t592), max(min(max((uint8x32)t600, (uint8x32)t607), max(min((uint8x32)bounded_input[ramp((t745 - t650) + -64, 1, 32)], max((uint8x32)t608, (uint8x32)t609)), min((uint8x32)t608, (uint8x32)t609))), min((uint8x32)t600, (uint8x32)t607))), min((uint8x32)t589, (uint8x32)t592))
Expression before abstraction: max(min(max((uint8x32)t589, (uint8x32)t592), max(min(max((uint8x32)t600, (uint8x32)t607), max(min((uint8x32)bounded_input[ramp((t745 - t650) + -64, 1, 32)], max((uint8x32)t608, (uint8x32)t609)), min((uint8x32)t608, (uint8x32)t609))), min((uint8x32)t600, (uint8x32)t607))), min((uint8x32)t589, (uint8x32)t592))
Input expression to synthesize: max(min(max((uint8x32)t589, (uint8x32)t592), max(min(max((uint8x32)t600, (uint8x32)t607), max(min((uint8x32)bounded_input[ramp(t1235, 1, 32)], max((uint8x32)t608, (uint8x32)t609)), min((uint8x32)t608, (uint8x32)t609))), min((uint8x32)t600, (uint8x32)t607))), min((uint8x32)t589, (uint8x32)t592))
t589 maps to reg_0
t592 maps to reg_1
t600 maps to reg_2
t607 maps to reg_3
t608 maps to reg_5
t609 maps to reg_6
Synthesis completed with return code:	0
Synthesis took 3.288549seconds ...
Expression after replacae abstraction: max(min(max((uint8x32)t589, (uint8x32)t592), max(min(max((uint8x32)t600, (uint8x32)t607), max(min((uint8x32)bounded_input[ramp((t745 - t650) + -64, 1, 32)], max((uint8x32)t608, (uint8x32)t609)), min((uint8x32)t608, (uint8x32)t609))), min((uint8x32)t600, (uint8x32)t607))), min((uint8x32)t589, (uint8x32)t592))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 11

Optimized expression: (uint8x32)hydride.node.11((uint8x32)t589, (uint8x32)t592, (uint8x32)t600, (uint8x32)t607, (uint8x32)bounded_input[ramp((t745 - t650) + -64, 1, 32)], (uint8x32)t608, (uint8x32)t609)
Hydride Function: declare <32 x i8> @hydride.node.0(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2045 = call <32 x i8> @hydride.node.0(<32 x i8> %2013, <32 x i8> %2027, <32 x i8> %2044) #17
Hydride Function: declare <32 x i8> @hydride.node.1(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2162 = call <32 x i8> @hydride.node.1(<32 x i8> %2130, <32 x i8> %2144, <32 x i8> %2161) #17
Hydride Function: declare <32 x i8> @hydride.node.2(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2220 = call <32 x i8> @hydride.node.2(<32 x i8> %2209, <32 x i8> %2214, <32 x i8> %2219) #17
Hydride Function: declare <32 x i8> @hydride.node.3(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2245 = call <32 x i8> @hydride.node.3(<32 x i8> %2230, <32 x i8> %2237, <32 x i8> %2244) #17
Hydride Function: declare <32 x i8> @hydride.node.4(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2264 = call <32 x i8> @hydride.node.4(<32 x i8> %2263, <32 x i8> %t575, <32 x i8> %t576) #17
Hydride Function: declare <32 x i8> @hydride.node.5(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2287 = call <32 x i8> @hydride.node.5(<32 x i8> %2286, <32 x i8> %t581, <32 x i8> %t583) #17
Hydride Function: declare <32 x i8> @hydride.node.6(<32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2308 = call <32 x i8> @hydride.node.6(<32 x i8> %t566, <32 x i8> %t569, <32 x i8> %t577, <32 x i8> %t584, <32 x i8> %2307, <32 x i8> %t585, <32 x i8> %t586) #17
Hydride Function: declare <32 x i8> @hydride.node.7(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2368 = call <32 x i8> @hydride.node.7(<32 x i8> %2357, <32 x i8> %2362, <32 x i8> %2367) #17
Hydride Function: declare <32 x i8> @hydride.node.8(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2386 = call <32 x i8> @hydride.node.8(<32 x i8> %2375, <32 x i8> %2380, <32 x i8> %2385) #17
Hydride Function: declare <32 x i8> @hydride.node.9(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2399 = call <32 x i8> @hydride.node.9(<32 x i8> %2398, <32 x i8> %t598, <32 x i8> %t599) #17
Hydride Function: declare <32 x i8> @hydride.node.10(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2416 = call <32 x i8> @hydride.node.10(<32 x i8> %2415, <32 x i8> %t604, <32 x i8> %t606) #17
Hydride Function: declare <32 x i8> @hydride.node.11(<32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2433 = call <32 x i8> @hydride.node.11(<32 x i8> %t589, <32 x i8> %t592, <32 x i8> %t600, <32 x i8> %t607, <32 x i8> %2432, <32 x i8> %t608, <32 x i8> %t609) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'median3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
