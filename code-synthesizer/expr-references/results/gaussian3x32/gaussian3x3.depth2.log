mkdir gaussian3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g gaussian3x3/src/gaussian3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o gaussian3x3/bin/gaussian3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=2 HL_ENABLE_HYDRIDE=1 ./gaussian3x3/bin/gaussian3x3_generator \
	-t 0 \
	-o gaussian3x3/bin \
	-g gaussian3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f gaussian3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_4138_spec.JSON': No such file or directory
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 8
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
=======================================
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(int16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_4138

base_4138_grammar.rkt
/tmp/base_4138_grammar.rkt
Writing [{ 
"name": "base_4138" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4138_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4138_spec.JSON /tmp/base_4138_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_4138 ... 

Grammar:
#<procedure:base_4138>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x52fbf8e6530c29b20e90b3f05ef85535d1ccb3ec6e11af1bd1c611285747e821 256))
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x005200fb00f800e60053000c002900b2000e009000b300f0005e00f80055003500d100cc00b300ec006e001100af001b00d100c6001100280057004700e80021 512)
invoke-spec-lane with env: #((bv #x52fbf8e6530c29b20e90b3f05ef85535d1ccb3ec6e11af1bd1c611285747e821 256))
Concrete counter examples:
(#((bv #x52fbf8e6530c29b20e90b3f05ef85535d1ccb3ec6e11af1bd1c611285747e821 256)) #((bv #x7208f9fdf9e1fa725350d11f3dfe4fa0058b06a98ca338150f8b4a9cdb218295 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x52fbf8e6530c29b20e90b3f05ef85535d1ccb3ec6e11af1bd1c611285747e821 256))
Spec Produced:
(bv #x0021 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x7208f9fdf9e1fa725350d11f3dfe4fa0058b06a98ca338150f8b4a9cdb218295 256))
Spec Produced:
(bv #x0095 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0)

invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int16x32 '(buf uint8 256))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Expression before InlineLets: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Expression after InlineLets: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Expression before abstraction: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Input expression to synthesize: int16x32((uint8x32)input[ramp(t202, 1, 32)])
Cast operation into: int16x32
Synthesis completed with return code:	0
Synthesis took 3.345078seconds ...
Expression after replacae abstraction: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Generating Call with type: int16x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (int16x32)hydride.node.0((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(int16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Expression before InlineLets: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Expression after InlineLets: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Expression before abstraction: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Input expression to synthesize: int16x32((uint8x32)input[ramp(t208, 1, 32)])
Cast operation into: int16x32
Synthesis completed with return code:	0
Synthesis took 2.043060seconds ...
Expression after replacae abstraction: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Generating Call with type: int16x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (int16x32)hydride.node.1((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
rm: cannot remove '/tmp/base_9703_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sllv_epi16 with score: 5 belonging to target agnostic class _mm512_sllv_epi64
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 7
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
get-expr-grammar with base_name: base_9703

base_9703_grammar.rkt
/tmp/base_9703_grammar.rkt
Writing [{ 
"name": "base_9703" , 
"semantics": [ "(extract bvadd sign-extend bvshl)"] , 
"input_shapes": [[1,16], [1,16], [1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16, 16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9703_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9703_spec.JSON /tmp/base_9703_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_9703 ... 

Grammar:
#<procedure:base_9703>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x3 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #x518f640583082873c3ee56ac3f6302db41f24a3eb15aae738024814320b30770 256)
invoke-spec-lane with env: #((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256))
Concrete counter examples:
(#((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256)) #((bv #x39500674d90b8c5b7c4e0af460510e6ce05a38eb60a00175001456cb4ee68790 256) (bv #xa016b2dcccc7d2d065600657a46c3c6df2bcd81902bb4ed5e366179cf382ba2e 256) (bv #xcef2d748b6fb04e9f10b6e25d133930c71554b95719440be59ef745633dc8b59 256) (bv #xc736359fd05f858c3fc7853bfe8e34859920e85ba01287dc7cc56f78f3760866 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256))
Spec Produced:
(bv #x0770 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x39500674d90b8c5b7c4e0af460510e6ce05a38eb60a00175001456cb4ee68790 256) (bv #xa016b2dcccc7d2d065600657a46c3c6df2bcd81902bb4ed5e366179cf382ba2e 256) (bv #xcef2d748b6fb04e9f10b6e25d133930c71554b95719440be59ef745633dc8b59 256) (bv #xc736359fd05f858c3fc7853bfe8e34859920e85ba01287dc7cc56f78f3760866 256))
Spec Produced:
(bv #x93bf 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1 sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5 sym_bv$6 sym_bv$7)

invoke-spec with env: #(sym_bv$4 sym_bv$5 sym_bv$6 sym_bv$7)
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvadd (bvshl (extract 255 240 sym_bv$4) (extract 255 240 sym_bv$5)) (bvadd (extract 255 240 sym_bv$6) (extract 255 240 sym_bv$7))) (bvadd (bvshl (extract ...) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$5 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)]
 [sym_bv$6 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #x518f640583082873c3ee56ac3f6302db41f24a3eb15aae738024814320b30770 256)
invoke-spec-lane with env: #((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256))
Concrete counter examples:
(#((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256)) #((bv #x39500674d90b8c5b7c4e0af460510e6ce05a38eb60a00175001456cb4ee68790 256) (bv #xa016b2dcccc7d2d065600657a46c3c6df2bcd81902bb4ed5e366179cf382ba2e 256) (bv #xcef2d748b6fb04e9f10b6e25d133930c71554b95719440be59ef745633dc8b59 256) (bv #xc736359fd05f858c3fc7853bfe8e34859920e85ba01287dc7cc56f78f3760866 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x453a2fbe1ec05ebad88c305793e04c6fa4e4ed56156f6c02b8a188f2aa20d79d 256) (bv #x4c55964412d178f6d51fdd0003ce45bc1dfe3ea5cc3cc4c6d1291a65d41c0735 256) (bv #x6f3a0f47d9188f0404341eeb4bfd4d545630f9565b291cd28fa97a2abbe33aab 256) (bv #xe25554bea9f0996fbfba37c1f366b587ebc250e8563191a1f07b071964d0ccc5 256))
Spec Produced:
(bv #x0770 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x39500674d90b8c5b7c4e0af460510e6ce05a38eb60a00175001456cb4ee68790 256) (bv #xa016b2dcccc7d2d065600657a46c3c6df2bcd81902bb4ed5e366179cf382ba2e 256) (bv #xcef2d748b6fb04e9f10b6e25d133930c71554b95719440be59ef745633dc8b59 256) (bv #xc736359fd05f858c3fc7853bfe8e34859920e85ba01287dc7cc56f78f3760866 256))
Spec Produced:
(bv #x93bf 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #xb9b12b76a6c81a9ab667987deec6440d3c291bdd23b7d38f03f7bf344192cb12 256)
invoke-spec-lane with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
Concrete counter examples:
(#((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256)) #((bv #xd5fbde538a44548e27bf5a3551cf1433551238d5f35aab23d7c3d825fee9570d 256) (bv #x6bf278650081662bf769d84ef5c8a3c7f7b089edaa36fb6a9d2f26f8a261a77c 256) (bv #x4e1dd03153a0a2fbdf3faadf0bf90839796bb1546ca40fae219ce59697f164bf 256) (bv #xf8e00341fc398a61bf5a4facd0a4465b19d34035971452d282992070bf4f40ff 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
Spec Produced:
(bv #xcb12 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd5fbde538a44548e27bf5a3551cf1433551238d5f35aab23d7c3d825fee9570d 256) (bv #x6bf278650081662bf769d84ef5c8a3c7f7b089edaa36fb6a9d2f26f8a261a77c 256) (bv #x4e1dd03153a0a2fbdf3faadf0bf90839796bb1546ca40fae219ce59697f164bf 256) (bv #xf8e00341fc398a61bf5a4facd0a4465b19d34035971452d282992070bf4f40ff 256))
Spec Produced:
(bv #xa5be 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9 sym_bv$10 sym_bv$11)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$12 sym_bv$13 sym_bv$14 sym_bv$15)

invoke-spec with env: #(sym_bv$12 sym_bv$13 sym_bv$14 sym_bv$15)
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvadd (bvshl (extract 255 240 sym_bv$12) (extract 255 240 sym_bv$13)) (bvadd (extract 255 240 sym_bv$14) (extract 255 240 sym_bv$15))) (bvadd (bvshl (extract ...) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$12 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$13 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)]
 [sym_bv$14 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #xb9b12b76a6c81a9ab667987deec6440d3c291bdd23b7d38f03f7bf344192cb12 256)
invoke-spec-lane with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
Concrete counter examples:
(#((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256)) #((bv #xd5fbde538a44548e27bf5a3551cf1433551238d5f35aab23d7c3d825fee9570d 256) (bv #x6bf278650081662bf769d84ef5c8a3c7f7b089edaa36fb6a9d2f26f8a261a77c 256) (bv #x4e1dd03153a0a2fbdf3faadf0bf90839796bb1546ca40fae219ce59697f164bf 256) (bv #xf8e00341fc398a61bf5a4facd0a4465b19d34035971452d282992070bf4f40ff 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
Spec Produced:
(bv #xcb12 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd5fbde538a44548e27bf5a3551cf1433551238d5f35aab23d7c3d825fee9570d 256) (bv #x6bf278650081662bf769d84ef5c8a3c7f7b089edaa36fb6a9d2f26f8a261a77c 256) (bv #x4e1dd03153a0a2fbdf3faadf0bf90839796bb1546ca40fae219ce59697f164bf 256) (bv #xf8e00341fc398a61bf5a4facd0a4465b19d34035971452d282992070bf4f40ff 256))
Spec Produced:
(bv #xa5be 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x3 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x3 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16)
 256
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)

invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17 sym_bv$18 sym_bv$19)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$20 sym_bv$21 sym_bv$22 sym_bv$23)

invoke-spec with env: #(sym_bv$20 sym_bv$21 sym_bv$22 sym_bv$23)
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvadd (bvshl (extract 255 240 sym_bv$20) (extract 255 240 sym_bv$21)) (bvadd (extract 255 240 sym_bv$22) (extract 255 240 sym_bv$23))) (bvadd (bvshl (extract ...) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$20 (bv #x8cf6bfffffffffffffffffffffffffffffffffffffff00ffffff00ff0fffffff 256)]
 [sym_bv$21 (bv #x000e000000000000000000000000000000000000000000080000000800040000 256)]
 [sym_bv$22 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)] ...)
Verification failed :(
#((bv #x8cf6bfffffffffffffffffffffffffffffffffffffff00ffffff00ff0fffffff 256) (bv #x000e000000000000000000000000000000000000000000080000000800040000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #xa8b1000000000000000000000000000000000000000000080000000800040000 256))
invoke-spec with env: #((bv #x8cf6bfffffffffffffffffffffffffffffffffffffff00ffffff00ff0fffffff 256) (bv #x000e000000000000000000000000000000000000000000080000000800040000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #xa8b1000000000000000000000000000000000000000000080000000800040000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #x28b1bfffffffffffffffffffffffffffffffffffffffff08ffffff08fff4ffff 256)
(bv #x28b1bfffffffffffffffffffffffffffffffffffffffff08ffffff08fff4ffff 256)
Verification failed ...
	spec produced: (bv #x28b1bfffffffffffffffffffffffffffffffffffffffff08ffffff08fff4ffff 256) 256 
	synthesized result produced: (bv #xa8b1bfffffffffffffffffffffffffffffffffffffffff08ffffff08fff4ffff 256) 256

invoke-spec with env: #((bv #x8cf6bfffffffffffffffffffffffffffffffffffffff00ffffff00ff0fffffff 256) (bv #x000e000000000000000000000000000000000000000000080000000800040000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #xa8b1000000000000000000000000000000000000000000080000000800040000 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #x28b1bfffffffffffffffffffffffffffffffffffffffff08ffffff08fff4ffff 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(15)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
(vec-add (vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256)) (vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256)))
Spec result
(bv #xb9b12b76a6c81a9ab667987deec6440d3c291bdd23b7d38f03f7bf344192cb12 256)
invoke-spec-lane with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
Concrete counter examples:
(#((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256)) #((bv #xd5fbde538a44548e27bf5a3551cf1433551238d5f35aab23d7c3d825fee9570d 256) (bv #x6bf278650081662bf769d84ef5c8a3c7f7b089edaa36fb6a9d2f26f8a261a77c 256) (bv #x4e1dd03153a0a2fbdf3faadf0bf90839796bb1546ca40fae219ce59697f164bf 256) (bv #xf8e00341fc398a61bf5a4facd0a4465b19d34035971452d282992070bf4f40ff 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #((bv #x8cf6bfffffffffffffffffffffffffffffffffffffff00ffffff00ff0fffffff 256) (bv #x000e000000000000000000000000000000000000000000080000000800040000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #xa8b1000000000000000000000000000000000000000000080000000800040000 256)))
Failing lanes examples:
(0 0 0 15)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4e563881600f6d64433501b45106c4067968381bb6ac8aca9885793caab88794 256) (bv #x464ab74693f5a908e37fc90b79a08b496084dc49d52180460fac321dc3f3b506 256) (bv #xcc65f53efcabc6b364eff6cd35c18920777894ba24f5f2134c911c260f4672a4 256) (bv #xed4c3638aa1d53e75178a1b0b905baedc4b18723fec2e17cb766a30e324c586e 256))
Spec Produced:
(bv #xcb12 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd5fbde538a44548e27bf5a3551cf1433551238d5f35aab23d7c3d825fee9570d 256) (bv #x6bf278650081662bf769d84ef5c8a3c7f7b089edaa36fb6a9d2f26f8a261a77c 256) (bv #x4e1dd03153a0a2fbdf3faadf0bf90839796bb1546ca40fae219ce59697f164bf 256) (bv #xf8e00341fc398a61bf5a4facd0a4465b19d34035971452d282992070bf4f40ff 256))
Spec Produced:
(bv #xa5be 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
15
invoke-spec-lane with env: #((bv #x8cf6bfffffffffffffffffffffffffffffffffffffff00ffffff00ff0fffffff 256) (bv #x000e000000000000000000000000000000000000000000080000000800040000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) (bv #xa8b1000000000000000000000000000000000000000000080000000800040000 256))
Spec Produced:
(bv #x28b1 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)

invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_1060_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
#(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25 sym_bv$26 sym_bv$27)
verify-across-lanes returned #t ... 

Test elapsed time: 
28
(vec-add
 (vec-shl '(buf int16 256) '(buf uint16 256))
 (vec-add '(buf int16 256) '(buf int16 256)))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_1060

base_1060_grammar.rkt
/tmp/base_1060_grammar.rkt
Writing [{ 
"name": "base_1060" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 16]] 
}
] to file /tmp/base_1060_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1060_spec.JSON /tmp/base_1060_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1060 ... 

Grammar:
#<procedure:base_1060>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #()

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification took 0 seconds

(model)
Verification failed :(
#()
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification failed ...
	spec produced: (bv #x0001000100010001000100010001000100010001000100010001000100010001 256) 256 
	synthesized result produced: (bv #x0000000100000001000000010000000100000001000000010000000100000001 256) 256

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Difference  Predicate
'((0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #() #())
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x16 (int-imm (bv #x0001 16) #f))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.2
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)input_16[ramp(t220, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp(t224, 1, 16)] + (int16x16)input_16[ramp(t228, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 32.412628seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 2

Optimized expression: (int16x16)hydride.node.2((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], (int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)], (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.3
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Starting synthesis for expr: 3
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t238, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t239, 1, 16)] + (int16x16)rows[ramp(t240, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.861193seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 3

Optimized expression: (int16x16)hydride.node.3((int16x16)rows[ramp(t121 + 129, 1, 16)], (int16x16)rows[ramp(t121 + 130, 1, 16)], (int16x16)rows[ramp(t121 + 128, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.4
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Starting synthesis for expr: 4
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t242, 1, 16)] + (int16x16)rows[ramp(t243, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.244591seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 4

Optimized expression: (int16x16)hydride.node.4((int16x16)rows[ramp(t121 + 145, 1, 16)], (int16x16)rows[ramp(t121 + 146, 1, 16)], (int16x16)rows[ramp(t121 + 144, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.5
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Append [; hydride.node.5
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Starting synthesis for expr: 5
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t244, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t245, 1, 16)] + (int16x16)rows[ramp(t246, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.221065seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 5

Optimized expression: (int16x16)hydride.node.5((int16x16)rows[ramp(t121 + 161, 1, 16)], (int16x16)rows[ramp(t121 + 162, 1, 16)], (int16x16)rows[ramp(t121 + 160, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.6
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Append [; hydride.node.6
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Starting synthesis for expr: 6
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t247, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t248, 1, 16)] + (int16x16)rows[ramp(t249, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.283826seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 6

Optimized expression: (int16x16)hydride.node.6((int16x16)rows[ramp(t121 + 177, 1, 16)], (int16x16)rows[ramp(t121 + 178, 1, 16)], (int16x16)rows[ramp(t121 + 176, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.7
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Append [; hydride.node.7
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Starting synthesis for expr: 7
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t250, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t251, 1, 16)] + (int16x16)rows[ramp(t252, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.478684seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 7

Optimized expression: (int16x16)hydride.node.7((int16x16)rows[ramp(t121 + 193, 1, 16)], (int16x16)rows[ramp(t121 + 194, 1, 16)], (int16x16)rows[ramp(t121 + 192, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.8
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Append [; hydride.node.8
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Starting synthesis for expr: 8
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t253, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t254, 1, 16)] + (int16x16)rows[ramp(t255, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.360948seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 8

Optimized expression: (int16x16)hydride.node.8((int16x16)rows[ramp(t121 + 209, 1, 16)], (int16x16)rows[ramp(t121 + 210, 1, 16)], (int16x16)rows[ramp(t121 + 208, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.9
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Append [; hydride.node.9
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Starting synthesis for expr: 9
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t256, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t257, 1, 16)] + (int16x16)rows[ramp(t258, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.274982seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 9

Optimized expression: (int16x16)hydride.node.9((int16x16)rows[ramp(t121 + 225, 1, 16)], (int16x16)rows[ramp(t121 + 226, 1, 16)], (int16x16)rows[ramp(t121 + 224, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.10
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Append [; hydride.node.10
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Starting synthesis for expr: 10
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t259, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t260, 1, 16)] + (int16x16)rows[ramp(t261, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.636200seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 10

Optimized expression: (int16x16)hydride.node.10((int16x16)rows[ramp(t121 + 241, 1, 16)], (int16x16)rows[ramp(t121 + 242, 1, 16)], (int16x16)rows[ramp(t121 + 240, 1, 16)])
rm: cannot remove '/tmp/base_8694_spec.JSON': No such file or directory
Pruning _mm512_srai_epi16 as it has an argument of size 8 which is smaller than 256
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Pruning _mm512_sra_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_srav_epi16 with score: 3 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_avg_epu16 with score: 3 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm256_avg_epu8 with score: 3 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 12
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_8694

base_8694_grammar.rkt
/tmp/base_8694_grammar.rkt
Writing [{ 
"name": "base_8694" , 
"semantics": [ "(extract zero-extend bvashr sign-extend)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8694_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8694_spec.JSON /tmp/base_8694_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_8694 ... 

Grammar:
#<procedure:base_8694>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #xff0000ffff000000ff0000ffffffffff0000000000ffffff00ff000000ff0000 256)
invoke-spec-lane with env: #((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512))
Concrete counter examples:
(#((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512)) #((bv #xc78db82a81aec1ba9eab51e5b838b2e687ce97ffb6a63cc7803fd8cbeaceecfea64b1984836ecdfe1f8a595c499598c50d34d0bedee0d8f8c8c23cb788b240af 512) (bv #xf7d26774a9539464ce8689e4b069a0517c9f3d1f8c4b26a66800692b0194c040485191d938b0a3909b917464d200ad0f117088f9225e5772faff9f3b8758ec61 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xc78db82a81aec1ba9eab51e5b838b2e687ce97ffb6a63cc7803fd8cbeaceecfea64b1984836ecdfe1f8a595c499598c50d34d0bedee0d8f8c8c23cb788b240af 512) (bv #xf7d26774a9539464ce8689e4b069a0517c9f3d1f8c4b26a66800692b0194c040485191d938b0a3909b917464d200ad0f117088f9225e5772faff9f3b8758ec61 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 7 0 (bvashr (extract 511 496 sym_bv$2) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #x00000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$3 (bv #x00000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x00000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x00000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x0000000000001000000000000000000000000000000000000000000000000000 256)
(bv #x0000000000001000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x0000000000001000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x00000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x0000000000001000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0))
differing-lanes
'(25)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #xff0000ffff000000ff0000ffffffffff0000000000ffffff00ff000000ff0000 256)
invoke-spec-lane with env: #((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512))
Concrete counter examples:
(#((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512)) #((bv #xc78db82a81aec1ba9eab51e5b838b2e687ce97ffb6a63cc7803fd8cbeaceecfea64b1984836ecdfe1f8a595c499598c50d34d0bedee0d8f8c8c23cb788b240af 512) (bv #xf7d26774a9539464ce8689e4b069a0517c9f3d1f8c4b26a66800692b0194c040485191d938b0a3909b917464d200ad0f117088f9225e5772faff9f3b8758ec61 512)) #((bv #x00000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 25)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf4f316077b8b9126ddf2704e6a253590e2546ceb5a3faaefdb31c644a4bcd8da48431df3056c2c4c53368024b90288a32f41f67f399620c61e22c2170eb17fb7 512) (bv #x8d89166555e69930e29359dda565d12685c0add9385fcf185db8d8e868f8347fcdb9c5801f5608411a18f3b79a628963745c597c66428f7b3bb1dcaea8c42eeb 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xc78db82a81aec1ba9eab51e5b838b2e687ce97ffb6a63cc7803fd8cbeaceecfea64b1984836ecdfe1f8a595c499598c50d34d0bedee0d8f8c8c23cb788b240af 512) (bv #xf7d26774a9539464ce8689e4b069a0517c9f3d1f8c4b26a66800692b0194c040485191d938b0a3909b917464d200ad0f117088f9225e5772faff9f3b8758ec61 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
25
invoke-spec-lane with env: #((bv #x00000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x10 8)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x00ffffffff00ffffffffff00ff0000ffffff000000ff00000000ffffffff0000 256)
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Concrete counter examples:
(#((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512)) #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtsepi64_epi16_dsl (interleave-vector_dsl (reg (bv #x1 4)) 512 16) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtsepi64_epi16_dsl
 (interleave-vector_dsl (reg (bv #x1 4)) 512 16)
 256
 16
 32
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec with env: #(sym_bv$6 sym_bv$7)
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 7 0 (bvashr (extract 511 496 sym_bv$6) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$6 (bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512)]
 [sym_bv$7 (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512)] ...)
Verification failed :(
#((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512))
invoke-spec with env: #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x21600010ffff0000ffff0000ffffffffffffffff7fffffffffffffff7fffffff 256)
(bv #x21600010ffff0000ffff0000ffffffffffffffff7fffffffffffffff7fffffff 256)
Verification failed ...
	spec produced: (bv #x21600010ffff0000ffff0000ffffffffffffffff7fffffffffffffff7fffffff 256) 256 
	synthesized result produced: (bv #x316000107fff40007fff80007fff7fff7ffffff87fff7fff7ffffff87fff7fff 256) 256

invoke-spec with env: #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x21600010ffff0000ffff0000ffffffffffffffff7fffffffffffffff7fffffff 256)
Difference  Predicate
'((0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x00ffffffff00ffffffffff00ff0000ffffff000000ff00000000ffffffff0000 256)
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Concrete counter examples:
(#((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512)) #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512)) #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtsepi64_epi16_dsl (interleave-vector_dsl (reg (bv #x1 4)) 512 16) 256 32 64 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtsepi64_epi16_dsl
 (interleave-vector_dsl (reg (bv #x1 4)) 512 16)
 256
 32
 64
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$10 sym_bv$11)

invoke-spec with env: #(sym_bv$10 sym_bv$11)
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 7 0 (bvashr (extract 511 496 sym_bv$10) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$10 (bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512)]
 [sym_bv$11 (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512)] ...)
Verification failed :(
#((bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512) (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512))
invoke-spec with env: #((bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512) (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x3bff7cffffffffffffffffffffffffffffffffff80000000ffffffffffffffff 256)
(bv #x3bff7cffffffffffffffffffffffffffffffffff80000000ffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #x3bff7cffffffffffffffffffffffffffffffffff80000000ffffffffffffffff 256) 256 
	synthesized result produced: (bv #x7fffffff7fffffff7ffffffffffffffffffffffa800000007fffffff7fffffff 256) 256

invoke-spec with env: #((bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512) (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x3bff7cffffffffffffffffffffffffffffffffff80000000ffffffffffffffff 256)
Difference  Predicate
'((0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1))
differing-lanes
'(3)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x00ffffffff00ffffffffff00ff0000ffffff000000ff00000000ffffffff0000 256)
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Concrete counter examples:
(#((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512)) #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512)) #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512)) #((bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512) (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512)))
Failing lanes examples:
(0 0 1 3)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Lane Index
3
invoke-spec-lane with env: #((bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512) (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (lit (bv #x0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001f 512)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001f 512))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 16
 32
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$14 sym_bv$15)

invoke-spec with env: #(sym_bv$14 sym_bv$15)
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 7 0 (bvashr (extract 511 496 sym_bv$14) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$14 (bv #x04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$15 (bv #x00030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x8000000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(31)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
(uint8x32 (vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512)))
Spec result
(bv #x00ffffffff00ffffffffff00ff0000ffffff000000ff00000000ffffffff0000 256)
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Concrete counter examples:
(#((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512)) #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512)) #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512)) #((bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512) (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512)) #((bv #x04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 1 3 31)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x7827abf5e9adf11cf9166e859fd08c1cb27ed3b7d4a65226bab03d0a1bdddbd2ea42aae91a0e7bd77158af9a711c7042599d01ff8fddbd2cfd0b818052cb5c84 512) (bv #x9e724268b77c0dace9ae02c97fada2c40f9d0fd765c3f621818cd9c2cb1da024674f423d5e5ad057604f6584a79f0b32fe4864915fb74353f1784d7308550adf 512))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x16250e34acd86f35d4db4d46ff239b0497cf13548c8a9890b70bd255f295ed001ff8586001f1935e4903b12b05402a5e1c698066f9db0a0cbb15990db0fbb95b 512) (bv #xa1c4e27c569567f2e1aaf4dad6d6f51bbbe75fc6b858b1eebe3364813d702975fed12707cfbd8fbfdb75c65b5c795985d7c3b1ee822acaa1befc27e61f8077d0 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x00210060000000108000800000000000800080000000000080008000800081408000800080008000807f800080008000800080008000800003f8800080008000 512) (bv #x000000007fff0000400080007fff7fff7fffffff7fff7fff4000ffff400078a4316000108000400000008000800080008000fff8800080000003fff880005d80 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Lane Index
3
invoke-spec-lane with env: #((bv #x1d80800087c080008000800080008000800080008000800080008000800080008000800080008000400000000000000080008000800080008000800080008000 512) (bv #x000701000004400040004000ffffffffffffffff800080004000800040008000800080008000800000070000fffffffffffffffa800000808000800080000800 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x80 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$16 sym_bv$17)

invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_7087_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 5
#(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
verify-across-lanes returned #t ... 

Test elapsed time: 
31
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_7087

base_7087_grammar.rkt
/tmp/base_7087_grammar.rkt
Writing [{ 
"name": "base_7087" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [[8, 16]] 
}
] to file /tmp/base_7087_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7087_spec.JSON /tmp/base_7087_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_7087 ... 

Grammar:
#<procedure:base_7087>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0e36895aff199d17c184ff9817446be7fbd47325062fbfebafe639bf2e3138271a1af1df410f17c3037c3cd58a7f56c5a55c0f2782b69ac40f1f9fff56e9c601 512))
(vec-add (buffer #<procedure:buffer-fn> 'int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Spec result
(bv #x0e3e8962ff219d1fc18cffa0174c6beffbdc732d0637bff3afee39c72e39382f1a22f1e7411717cb03843cdd8a8756cda5640f2f82be9acc0f27a00756f1c609 512)
invoke-spec-lane with env: #((bv #x0e36895aff199d17c184ff9817446be7fbd47325062fbfebafe639bf2e3138271a1af1df410f17c3037c3cd58a7f56c5a55c0f2782b69ac40f1f9fff56e9c601 512))
Concrete counter examples:
(#((bv #x0e36895aff199d17c184ff9817446be7fbd47325062fbfebafe639bf2e3138271a1af1df410f17c3037c3cd58a7f56c5a55c0f2782b69ac40f1f9fff56e9c601 512)) #((bv #x55d5289ec9313a4fec61bd0ecc3bcc924a876ed02e67f30038c53f418b8e042ae1074723b60a7d7a0ffd6210639f90588480186fbfc5625bd9f79eca8e440c7d 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0e36895aff199d17c184ff9817446be7fbd47325062fbfebafe639bf2e3138271a1af1df410f17c3037c3cd58a7f56c5a55c0f2782b69ac40f1f9fff56e9c601 512))
Spec Produced:
(bv #xc609 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x55d5289ec9313a4fec61bd0ecc3bcc924a876ed02e67f30038c53f418b8e042ae1074723b60a7d7a0ffd6210639f90588480186fbfc5625bd9f79eca8e440c7d 512))
Spec Produced:
(bv #x0c85 16)
Synthesize by lane...rm: cannot remove '/tmp/base_8283_spec.JSON': No such file or directory

Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$18)

invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8283

base_8283_grammar.rkt
/tmp/base_8283_grammar.rkt
Writing [{ 
"name": "base_8283" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 32], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[4, 16]] 
}
] to file /tmp/base_8283_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8283_spec.JSON /tmp/base_8283_grammar.rkt 32 0EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 2

Generated Grammar File
Dynamically importing from base_8283 ... 

Grammar:
#<procedure:base_8283>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x32 (int-imm (bv #x0004 16) #f))
Spec result
(bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0004 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0004 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x32 (int-imm (bv #x0004 16) #f))
#(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.11
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Append [; hydride.node.11
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Starting synthesis for expr: 11
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 36.458810seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 11

Optimized expression: (uint8x32)hydride.node.11((int16x32)cols[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_11 from hydride_hash_11.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.12
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.12.rkt

Completed writing to file ...
Append [; hydride.node.12
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.12.rkt /tmp/test.ll
Storing synth log map synth_hash_12 to /tmp/hydride_hash_12.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_12 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_12.rkt

Completed writing to file ...
Starting synthesis for expr: 12
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.975776seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 12

Optimized expression: (uint8x32)hydride.node.12((int16x32)cols[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_12 from hydride_hash_12.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.13
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.13.rkt

Completed writing to file ...
Append [; hydride.node.13
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.13.rkt /tmp/test.ll
Storing synth log map synth_hash_13 to /tmp/hydride_hash_13.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_13 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_13.rkt

Completed writing to file ...
Starting synthesis for expr: 13
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.399530seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 13

Optimized expression: (uint8x32)hydride.node.13((int16x32)cols[ramp(64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_13 from hydride_hash_13.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.14
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.14.rkt

Completed writing to file ...
Append [; hydride.node.14
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.14.rkt /tmp/test.ll
Storing synth log map synth_hash_14 to /tmp/hydride_hash_14.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_14 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_14.rkt

Completed writing to file ...
Starting synthesis for expr: 14
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.508332seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 14

Optimized expression: (uint8x32)hydride.node.14((int16x32)cols[ramp(96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_14 from hydride_hash_14.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.15
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.15.rkt

Completed writing to file ...
Append [; hydride.node.15
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.15.rkt /tmp/test.ll
Storing synth log map synth_hash_15 to /tmp/hydride_hash_15.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_15 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_15.rkt

Completed writing to file ...
Starting synthesis for expr: 15
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t266, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t267, 1, 16)] + (int16x16)rows[ramp(t268, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.264150seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 15

Optimized expression: (int16x16)hydride.node.15((int16x16)rows[ramp(t153 + -127, 1, 16)], (int16x16)rows[ramp(t153 + -126, 1, 16)], (int16x16)rows[ramp(t153 + -128, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_15 from hydride_hash_15.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.16
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.16.rkt

Completed writing to file ...
Append [; hydride.node.16
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.16.rkt /tmp/test.ll
Storing synth log map synth_hash_16 to /tmp/hydride_hash_16.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_16 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_16.rkt

Completed writing to file ...
Starting synthesis for expr: 16
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t269, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t270, 1, 16)] + (int16x16)rows[ramp(t271, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.240944seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 16

Optimized expression: (int16x16)hydride.node.16((int16x16)rows[ramp(t153 + -111, 1, 16)], (int16x16)rows[ramp(t153 + -110, 1, 16)], (int16x16)rows[ramp(t153 + -112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_16 from hydride_hash_16.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.17
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.17.rkt

Completed writing to file ...
Append [; hydride.node.17
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.17.rkt /tmp/test.ll
Storing synth log map synth_hash_17 to /tmp/hydride_hash_17.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_17 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_17.rkt

Completed writing to file ...
Starting synthesis for expr: 17
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t272, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t273, 1, 16)] + (int16x16)rows[ramp(t274, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.230509seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 17

Optimized expression: (int16x16)hydride.node.17((int16x16)rows[ramp(t153 + -95, 1, 16)], (int16x16)rows[ramp(t153 + -94, 1, 16)], (int16x16)rows[ramp(t153 + -96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_17 from hydride_hash_17.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.18
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.18.rkt

Completed writing to file ...
Append [; hydride.node.18
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.18.rkt /tmp/test.ll
Storing synth log map synth_hash_18 to /tmp/hydride_hash_18.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_18 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_18.rkt

Completed writing to file ...
Starting synthesis for expr: 18
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t275, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t276, 1, 16)] + (int16x16)rows[ramp(t277, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.268916seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 18

Optimized expression: (int16x16)hydride.node.18((int16x16)rows[ramp(t153 + -79, 1, 16)], (int16x16)rows[ramp(t153 + -78, 1, 16)], (int16x16)rows[ramp(t153 + -80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_18 from hydride_hash_18.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.19
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.19.rkt

Completed writing to file ...
Append [; hydride.node.19
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.19.rkt /tmp/test.ll
Storing synth log map synth_hash_19 to /tmp/hydride_hash_19.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_19 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_19.rkt

Completed writing to file ...
Starting synthesis for expr: 19
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t278, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t279, 1, 16)] + (int16x16)rows[ramp(t280, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.591647seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 19

Optimized expression: (int16x16)hydride.node.19((int16x16)rows[ramp(t153 + -63, 1, 16)], (int16x16)rows[ramp(t153 + -62, 1, 16)], (int16x16)rows[ramp(t153 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_19 from hydride_hash_19.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.20
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.20.rkt

Completed writing to file ...
Append [; hydride.node.20
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.20.rkt /tmp/test.ll
Storing synth log map synth_hash_20 to /tmp/hydride_hash_20.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_20 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_20.rkt

Completed writing to file ...
Starting synthesis for expr: 20
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t281, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t282, 1, 16)] + (int16x16)rows[ramp(t283, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.241394seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 20

Optimized expression: (int16x16)hydride.node.20((int16x16)rows[ramp(t153 + -47, 1, 16)], (int16x16)rows[ramp(t153 + -46, 1, 16)], (int16x16)rows[ramp(t153 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_20 from hydride_hash_20.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.21
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.21.rkt

Completed writing to file ...
Append [; hydride.node.21
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.21.rkt /tmp/test.ll
Storing synth log map synth_hash_21 to /tmp/hydride_hash_21.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_21 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_21.rkt

Completed writing to file ...
Starting synthesis for expr: 21
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t284, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t285, 1, 16)] + (int16x16)rows[ramp(t286, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.224739seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 21

Optimized expression: (int16x16)hydride.node.21((int16x16)rows[ramp(t153 + -31, 1, 16)], (int16x16)rows[ramp(t153 + -30, 1, 16)], (int16x16)rows[ramp(t153 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_21 from hydride_hash_21.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Hashed expression
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256)))
Leaves are bitvectors of sizes:
(256 256 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x0 4))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16)
 256
 16)
(_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16)
Cost
20
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.22
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.22.rkt

Completed writing to file ...
Append [; hydride.node.22
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.22.rkt /tmp/test.ll
Storing synth log map synth_hash_22 to /tmp/hydride_hash_22.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_22 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_22.rkt

Completed writing to file ...
Starting synthesis for expr: 22
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t287, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t288, 1, 16)] + (int16x16)rows[ramp(t289, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 2.242119seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 22

Optimized expression: (int16x16)hydride.node.22((int16x16)rows[ramp(t153 + -15, 1, 16)], (int16x16)rows[ramp(t153 + -14, 1, 16)], (int16x16)rows[ramp(t153 + -16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_22 from hydride_hash_22.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.23
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.23.rkt

Completed writing to file ...
Append [; hydride.node.23
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.23.rkt /tmp/test.ll
Storing synth log map synth_hash_23 to /tmp/hydride_hash_23.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_23 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_23.rkt

Completed writing to file ...
Starting synthesis for expr: 23
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.480586seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 23

Optimized expression: (uint8x32)hydride.node.23((int16x32)cols[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_23 from hydride_hash_23.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.24
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.24.rkt

Completed writing to file ...
Append [; hydride.node.24
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.24.rkt /tmp/test.ll
Storing synth log map synth_hash_24 to /tmp/hydride_hash_24.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_24 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_24.rkt

Completed writing to file ...
Starting synthesis for expr: 24
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.367405seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 24

Optimized expression: (uint8x32)hydride.node.24((int16x32)cols[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_24 from hydride_hash_24.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.25
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.25.rkt

Completed writing to file ...
Append [; hydride.node.25
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.25.rkt /tmp/test.ll
Storing synth log map synth_hash_25 to /tmp/hydride_hash_25.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_25 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_25.rkt

Completed writing to file ...
Starting synthesis for expr: 25
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.403993seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 25

Optimized expression: (uint8x32)hydride.node.25((int16x32)cols[ramp(64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_25 from hydride_hash_25.rkt ... 

#hash((#(struct:vec-add (buf int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add #(struct:vec-shl (buf int16 256) (buf uint16 256)) #(struct:vec-add (buf int16 256) (buf int16 256))) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x3 4)) #(struct:reg (bv #x2 4)) 256 16) 256 16) 10)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:uint8x32 #(struct:vec-shr (buf int16 512) (buf uint16 512))) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
=======================================
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512)))
Hashed expression
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512)))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (reg (bv #x1 4))
  (lit (bv #xffff 16))
  (reg (bv #x0 4))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
(_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0)
Cost
19
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Hashed expression
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t)))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl
 (reg (bv #x0 4))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16)
Cost
4
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 512
 16)
========================================
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (reg (bv #x00 8))
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.26
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.26.rkt

Completed writing to file ...
Append [; hydride.node.26
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl 
(reg 0)  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.26.rkt /tmp/test.ll
Storing synth log map synth_hash_26 to /tmp/hydride_hash_26.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_26 (hash 
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) 256 16) 10)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 1)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 8)))
] to file /tmp/hydride_hash_26.rkt

Completed writing to file ...
Starting synthesis for expr: 26
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 2.509657seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 26

Optimized expression: (uint8x32)hydride.node.26((int16x32)cols[ramp(96, 1, 32)])
Hydride Function: declare <32 x i16> @hydride.node.0(<32 x i8>)

Generating Hydride Call:   %803 = call <32 x i16> @hydride.node.0(<32 x i8> %802) #17
Hydride Function: declare <32 x i16> @hydride.node.1(<32 x i8>)

Generating Hydride Call:   %828 = call <32 x i16> @hydride.node.1(<32 x i8> %827) #17
Hydride Function: declare <16 x i16> @hydride.node.2(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %921 = call <16 x i16> @hydride.node.2(<16 x i16> %898, <16 x i16> %909, <16 x i16> %920) #17
Hydride Function: declare <16 x i16> @hydride.node.3(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %948 = call <16 x i16> @hydride.node.3(<16 x i16> %937, <16 x i16> %942, <16 x i16> %947) #17
Hydride Function: declare <16 x i16> @hydride.node.4(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %965 = call <16 x i16> @hydride.node.4(<16 x i16> %954, <16 x i16> %959, <16 x i16> %964) #17
Hydride Function: declare <16 x i16> @hydride.node.5(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %983 = call <16 x i16> @hydride.node.5(<16 x i16> %972, <16 x i16> %977, <16 x i16> %982) #17
Hydride Function: declare <16 x i16> @hydride.node.6(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1001 = call <16 x i16> @hydride.node.6(<16 x i16> %990, <16 x i16> %995, <16 x i16> %1000) #17
Hydride Function: declare <16 x i16> @hydride.node.7(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1019 = call <16 x i16> @hydride.node.7(<16 x i16> %1008, <16 x i16> %1013, <16 x i16> %1018) #17
Hydride Function: declare <16 x i16> @hydride.node.8(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1037 = call <16 x i16> @hydride.node.8(<16 x i16> %1026, <16 x i16> %1031, <16 x i16> %1036) #17
Hydride Function: declare <16 x i16> @hydride.node.9(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1055 = call <16 x i16> @hydride.node.9(<16 x i16> %1044, <16 x i16> %1049, <16 x i16> %1054) #17
Hydride Function: declare <16 x i16> @hydride.node.10(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1073 = call <16 x i16> @hydride.node.10(<16 x i16> %1062, <16 x i16> %1067, <16 x i16> %1072) #17
Hydride Function: declare <32 x i8> @hydride.node.11(<32 x i16>)

Generating Hydride Call:   %1078 = call <32 x i8> @hydride.node.11(<32 x i16> %1077) #17
Hydride Function: declare <32 x i8> @hydride.node.12(<32 x i16>)

Generating Hydride Call:   %1088 = call <32 x i8> @hydride.node.12(<32 x i16> %1087) #17
Hydride Function: declare <32 x i8> @hydride.node.13(<32 x i16>)

Generating Hydride Call:   %1099 = call <32 x i8> @hydride.node.13(<32 x i16> %1098) #17
Hydride Function: declare <32 x i8> @hydride.node.14(<32 x i16>)

Generating Hydride Call:   %1110 = call <32 x i8> @hydride.node.14(<32 x i16> %1109) #17
Hydride Function: declare <16 x i16> @hydride.node.15(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1140 = call <16 x i16> @hydride.node.15(<16 x i16> %1129, <16 x i16> %1134, <16 x i16> %1139) #17
Hydride Function: declare <16 x i16> @hydride.node.16(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1157 = call <16 x i16> @hydride.node.16(<16 x i16> %1146, <16 x i16> %1151, <16 x i16> %1156) #17
Hydride Function: declare <16 x i16> @hydride.node.17(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1175 = call <16 x i16> @hydride.node.17(<16 x i16> %1164, <16 x i16> %1169, <16 x i16> %1174) #17
Hydride Function: declare <16 x i16> @hydride.node.18(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1193 = call <16 x i16> @hydride.node.18(<16 x i16> %1182, <16 x i16> %1187, <16 x i16> %1192) #17
Hydride Function: declare <16 x i16> @hydride.node.19(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1211 = call <16 x i16> @hydride.node.19(<16 x i16> %1200, <16 x i16> %1205, <16 x i16> %1210) #17
Hydride Function: declare <16 x i16> @hydride.node.20(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1229 = call <16 x i16> @hydride.node.20(<16 x i16> %1218, <16 x i16> %1223, <16 x i16> %1228) #17
Hydride Function: declare <16 x i16> @hydride.node.21(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1247 = call <16 x i16> @hydride.node.21(<16 x i16> %1236, <16 x i16> %1241, <16 x i16> %1246) #17
Hydride Function: declare <16 x i16> @hydride.node.22(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1265 = call <16 x i16> @hydride.node.22(<16 x i16> %1254, <16 x i16> %1259, <16 x i16> %1264) #17
Hydride Function: declare <32 x i8> @hydride.node.23(<32 x i16>)

Generating Hydride Call:   %1270 = call <32 x i8> @hydride.node.23(<32 x i16> %1269) #17
Hydride Function: declare <32 x i8> @hydride.node.24(<32 x i16>)

Generating Hydride Call:   %1278 = call <32 x i8> @hydride.node.24(<32 x i16> %1277) #17
Hydride Function: declare <32 x i8> @hydride.node.25(<32 x i16>)

Generating Hydride Call:   %1286 = call <32 x i8> @hydride.node.25(<32 x i16> %1285) #17
Hydride Function: declare <32 x i8> @hydride.node.26(<32 x i16>)

Generating Hydride Call:   %1294 = call <32 x i8> @hydride.node.26(<32 x i16> %1293) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'gaussian3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
