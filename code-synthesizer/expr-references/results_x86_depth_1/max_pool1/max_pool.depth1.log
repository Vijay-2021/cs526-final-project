mkdir max_pool/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g max_pool/src/max_pool_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o max_pool/bin/max_pool_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./max_pool/bin/max_pool_generator \
	-t 0 \
	-o max_pool/bin \
	-g max_pool \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f max_pool target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_2342_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_2342

base_2342_grammar.rkt
/tmp/base_2342_grammar.rkt
Writing [{ 
"name": "base_2342" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2342_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2342_spec.JSON /tmp/base_2342_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_2342 ... 

Grammar:
#<procedure:base_2342>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6f7bd5c7e0da1dc2b8d1a518aef144bf3f1c08d94f2141090dd60efccba58d0f 256) (bv #x2cdf0d094efcf2c00ca7d0c7e12dc09add7e58f8f4830a626531cf83ea56c589 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x6fdfd5c7e0fcf2c2b8d1d0c7e1f1c0bfdd7e58f8f483416265d6cffceaa5c589 256)
invoke-spec-lane with env: #((bv #x6f7bd5c7e0da1dc2b8d1a518aef144bf3f1c08d94f2141090dd60efccba58d0f 256) (bv #x2cdf0d094efcf2c00ca7d0c7e12dc09add7e58f8f4830a626531cf83ea56c589 256))
Concrete counter examples:
(#((bv #x6f7bd5c7e0da1dc2b8d1a518aef144bf3f1c08d94f2141090dd60efccba58d0f 256) (bv #x2cdf0d094efcf2c00ca7d0c7e12dc09add7e58f8f4830a626531cf83ea56c589 256)) #((bv #x03b7ab16571619ff92bdbb2fdba882359d974051f0ad5d1c3d32f50c508802ac 256) (bv #x6a09ad18a9d2a9b31858653dd36fff6d44682bb3afdffc60123c371d39253e29 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6f7bd5c7e0da1dc2b8d1a518aef144bf3f1c08d94f2141090dd60efccba58d0f 256) (bv #x2cdf0d094efcf2c00ca7d0c7e12dc09add7e58f8f4830a626531cf83ea56c589 256))
Spec Produced:
(bv #x89 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x03b7ab16571619ff92bdbb2fdba882359d974051f0ad5d1c3d32f50c508802ac 256) (bv #x6a09ad18a9d2a9b31858653dd36fff6d44682bb3afdffc60123c371d39253e29 256))
Spec Produced:
(bv #xac 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf uint8 256) '(buf uint8 256))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.0
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Expression before InlineLets: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Expression after InlineLets: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Expression before abstraction: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Input expression to synthesize: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(t781, 1, 32)])
Synthesis completed with return code:	0
Synthesis took 9.881922seconds ...
Expression after replacae abstraction: max((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (uint8x32)hydride.node.0((uint8x32)maximum[ramp(t574, 1, 32)], (uint8x32)input_bounded[ramp(((maximum.s1.r12$x.rebased + t571)*(t527 + 32)) + t575, 1, 32)])
rm: cannot remove '/tmp/base_38_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_min_epu8 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:x32 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-min '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_38

base_38_grammar.rkt
/tmp/base_38_grammar.rkt
Writing [{ 
"name": "base_38" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_38_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_38_spec.JSON /tmp/base_38_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_38 ... 

Grammar:
#<procedure:base_38>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x988460f5cad5e668ab790cff0c0504238ea9f2537a84ace4e20d74cb87549b0c 256) (bv #x0cea8638e84a6ca6d340ae9365f584e562f2b6b93fdae74d630cda772d971d4c 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x0c846038ca4a6c68ab400c930c05042362a9b6533f84ac4d630c74772d541d0c 256)
invoke-spec-lane with env: #((bv #x988460f5cad5e668ab790cff0c0504238ea9f2537a84ace4e20d74cb87549b0c 256) (bv #x0cea8638e84a6ca6d340ae9365f584e562f2b6b93fdae74d630cda772d971d4c 256))
Concrete counter examples:
(#((bv #x988460f5cad5e668ab790cff0c0504238ea9f2537a84ace4e20d74cb87549b0c 256) (bv #x0cea8638e84a6ca6d340ae9365f584e562f2b6b93fdae74d630cda772d971d4c 256)) #((bv #x3944a445f817f8bd9e752f69315383cc2aafb1c35954b369be5635a49307da67 256) (bv #x32902a7850323ce386fef3cdf6718de767e60e9695831051b71963cb8adc715f 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x988460f5cad5e668ab790cff0c0504238ea9f2537a84ace4e20d74cb87549b0c 256) (bv #x0cea8638e84a6ca6d340ae9365f584e562f2b6b93fdae74d630cda772d971d4c 256))
Spec Produced:
(bv #x0c 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x3944a445f817f8bd9e752f69315383cc2aafb1c35954b369be5635a49307da67 256) (bv #x32902a7850323ce386fef3cdf6718de767e60e9695831051b71963cb8adc715f 256))
Spec Produced:
(bv #x5f 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_4558_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
#(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf uint8 256) '(buf uint8 256))
#(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)
Synthesis step completed!
Solution
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x32 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x32 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
get-expr-grammar with base_name: base_4558

base_4558_grammar.rkt
/tmp/base_4558_grammar.rkt
Writing [{ 
"name": "base_4558" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 32], 
"input_precision": [8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_8"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4558_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4558_spec.JSON /tmp/base_4558_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_4558 ... 

Grammar:
#<procedure:base_4558>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x00 8))
(x32 (buffer #<procedure:buffer-fn> 'uint8 8))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #x00 8))
Concrete counter examples:
(#((bv #x00 8)) #((bv #x1c 8)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x00 8))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1c 8))
Spec Produced:
(bv #x1c 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2)

invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x32 '(buf uint8 8))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 8) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x32 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 8)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 8))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 8)
 (reg (bv #x00 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <1 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.1
; (reg 1) <1 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 1) <1 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(x32 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8) 0)
(vec-min '(buf uint8 256) '(buf uint8 256)) (vector #t (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Expression before InlineLets: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Expression after InlineLets: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Expression before abstraction: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Input expression to synthesize: min((uint8x32)maximum[ramp(t795, 1, 32)], x32((uint8)output_max))
output_max maps to reg_1
Synthesis completed with return code:	0
Synthesis took 10.827918seconds ...
Expression after replacae abstraction: min((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], x32((uint8)output_max))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (uint8x32)hydride.node.1((uint8x32)maximum[ramp(((output.s0.c.c*32) + t579) + 32, 1, 32)], (uint8)output_max)
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:vec-min (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 8) 0)) (#(struct:x32 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 8) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:x32 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-min '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x32 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x32 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x32 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 8)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 8))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 8)
 (reg (bv #x00 8))
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (x32 (buffer #<procedure:buffer-fn> 'uint8 8)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <1 x i8>
; (reg (bv #x00 8)) <32 x i8>

(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

Writing [; hydride.node.2
; (reg 1) <1 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 1) <1 x i8>
; (reg 0) <32 x i8>


(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  8  );<32 x i8>
  
(reg 0)  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(vec-min '(buf uint8 256) '(buf uint8 256)) (vector #t (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(x32 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 8) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Expression before InlineLets: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Expression after InlineLets: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Expression before abstraction: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Input expression to synthesize: min((uint8x32)maximum[ramp(t804, 1, 32)], x32((uint8)output_max))
output_max maps to reg_1
Synthesis completed with return code:	0
Synthesis took 8.005616seconds ...
Expression after replacae abstraction: min((uint8x32)maximum[ramp(t581 + -32, 1, 32)], x32((uint8)output_max))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 2

Optimized expression: (uint8x32)hydride.node.2((uint8x32)maximum[ramp(t581 + -32, 1, 32)], (uint8)output_max)
Hydride Function: declare <32 x i8> @hydride.node.0(<32 x i8>, <32 x i8>)

Generating Hydride Call:   %875 = call <32 x i8> @hydride.node.0(<32 x i8> %863, <32 x i8> %874) #17
Hydride Function: declare <32 x i8> @hydride.node.1(<32 x i8>, i8)

Generating Hydride Call:   %902 = call <32 x i8> @hydride.node.1(<32 x i8> %901, i8 %output_max37) #17
Hydride Function: declare <32 x i8> @hydride.node.2(<32 x i8>, i8)

Generating Hydride Call:   %922 = call <32 x i8> @hydride.node.2(<32 x i8> %921, i8 %output_max37) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'max_pool' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
