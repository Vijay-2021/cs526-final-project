mkdir fully_connected/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g fully_connected/src/fully_connected_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o fully_connected/bin/fully_connected_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 HL_SYNTH_BW=0 ./fully_connected/bin/fully_connected_generator \
	-t 0 \
	-o fully_connected/bin \
	-g fully_connected \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f fully_connected target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t109]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
rm: cannot remove '/tmp/base_3858_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvadd', 'sign-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvadd', 'sign-extend']
DSL Ops ['bveq']
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi32 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi32 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 9
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_3858

base_3858_grammar.rkt
/tmp/base_3858_grammar.rkt
Writing [{ 
"name": "base_3858" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3858_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3858_spec.JSON /tmp/base_3858_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3858 ... 

Grammar:
#<procedure:base_3858>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x02ffb07204490cc7c30d182771ae6459129cf3876334130d3cc8d724be473851 256) (bv #xbc1c70aeba6b9780254b465475b1e26ebcd406287defa3138eaab4d9773e1201 256))
(vec-add (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xbf1c2120beb4a447e8585e7be76046c7cf70f9afe123b620cb738bfd35854a52 256)
invoke-spec-lane with env: #((bv #x02ffb07204490cc7c30d182771ae6459129cf3876334130d3cc8d724be473851 256) (bv #xbc1c70aeba6b9780254b465475b1e26ebcd406287defa3138eaab4d9773e1201 256))
Concrete counter examples:
(#((bv #x02ffb07204490cc7c30d182771ae6459129cf3876334130d3cc8d724be473851 256) (bv #xbc1c70aeba6b9780254b465475b1e26ebcd406287defa3138eaab4d9773e1201 256)) #((bv #xcff6df011b0bc8a21b3e27dd0b75d21e094a49e3d5408830fc44c0ac009eba53 256) (bv #x9a25da7287ece5bd1ba8f925ab485cc647cee79b2c851288641219777961f035 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x02ffb07204490cc7c30d182771ae6459129cf3876334130d3cc8d724be473851 256) (bv #xbc1c70aeba6b9780254b465475b1e26ebcd406287defa3138eaab4d9773e1201 256))
Spec Produced:
(bv #x35854a52 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xcff6df011b0bc8a21b3e27dd0b75d21e094a49e3d5408830fc44c0ac009eba53 256) (bv #x9a25da7287ece5bd1ba8f925ab485cc647cee79b2c851288641219777961f035 256))
Spec Produced:
(bv #x7a00aa88 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-addGoing Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvmul', 'sign-extend', 'zero-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvmul', 'sign-extend', 'zero-extend']
DSL Ops ['bveq']
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu16_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 9 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_mullo_epi32 with score: 6 belonging to target agnostic class _mm_mulhi_pi16
Adding:  _mm256_max_epi32 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
Adding:  _mm256_dpbusds_epi32 with score: 6 belonging to target agnostic class _mm_dpbusds_epi32
Adding:  _mm256_dpwssds_epi32 with score: 5 belonging to target agnostic class _mm256_dpwssds_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_dpwssd_epi32 with score: 5 belonging to target agnostic class _mm_dpwssd_epi32
Adding:  _mm256_madd_epi16 with score: 5 belonging to target agnostic class _mm_madd_pi16
Adding:  _mm256_dpbusd_epi32 with score: 6 belonging to target agnostic class _mm256_dpbusd_epi32
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 15
 '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5943

base_5943_grammar.rkt
/tmp/base_5943_grammar.rkt
Writing [{ 
"name": "base_5943" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5943_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5943_spec.JSON /tmp/base_5943_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5943 ... 

Grammar:
#<procedure:base_5943>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x9cd3f746f8f63b67b78e2cf55545691c34789e6a83fc98d0421a038eb64afe7b 256) (bv #x63df101e62a453968618c61b255fc6f1114c834f91907e500e79ff29da9de38e 256))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x18455a343185335ac7bc3bd703079b5cfbc120b657262100f1d303be6caf393a 256)
invoke-spec-lane with env: #((bv #x9cd3f746f8f63b67b78e2cf55545691c34789e6a83fc98d0421a038eb64afe7b 256) (bv #x63df101e62a453968618c61b255fc6f1114c834f91907e500e79ff29da9de38e 256))
Concrete counter examples:
(#((bv #x9cd3f746f8f63b67b78e2cf55545691c34789e6a83fc98d0421a038eb64afe7b 256) (bv #x63df101e62a453968618c61b255fc6f1114c834f91907e500e79ff29da9de38e 256)) #((bv #x2bd69a792c89d6b99595bc84d007fd5a0204be84d53bce7c0566895f5df89afc 256) (bv #x89b65beafa47356f299d4fc00bf13c32ef950d98e8e40f0ecf1256f0e8e4cddf 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x9cd3f746f8f63b67b78e2cf55545691c34789e6a83fc98d0421a038eb64afe7b 256) (bv #x63df101e62a453968618c61b255fc6f1114c834f91907e500e79ff29da9de38e 256))
Spec Produced:
(bv #x6caf393a 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2bd69a792c89d6b99595bc84d007fd5a0204be84d53bce7c0566895f5df89afc 256) (bv #x89b65beafa47356f299d4fc00bf13c32ef950d98e8e40f0ecf1256f0e8e4cddf 256))
Spec Produced:
(bv #x581acd84 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_5763_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 128
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 2 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_set_m128i with score: 3 belonging to target agnostic class _mm256_set_m128i
Adding:  _mm256_setr_m128i with score: 3 belonging to target agnostic class _mm256_set_m128i
Adding:  _mm256_broadcast_i32x4 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_cvtepi16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_broadcastd_epi32 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_cvtepu8_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 14
#(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-mul '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)
Synthesis step completed!
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_5763

base_5763_grammar.rkt
/tmp/base_5763_grammar.rkt
Writing [{ 
"name": "base_5763" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5763_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5763_spec.JSON /tmp/base_5763_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5763 ... 

Grammar:
#<procedure:base_5763>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2902970450fa23ffd44e0186dc1d1129 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00002902ffff9704000050fa000023ffffffd44e00000186ffffdc1d00001129 256)
invoke-spec-lane with env: #((bv #x2902970450fa23ffd44e0186dc1d1129 128))
Concrete counter examples:
(#((bv #x2902970450fa23ffd44e0186dc1d1129 128)) #((bv #x4b06357a613f1118d09977e9c7bf0be7 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2902970450fa23ffd44e0186dc1d1129 128))
Spec Produced:
(bv #x00001129 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4b06357a613f1118d09977e9c7bf0be7 128))
Spec Produced:
(bv #x00000be7 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 16 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4)

invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$5)

invoke-spec with env: #(sym_bv$5)
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (sign-extend (extract 127 112 sym_bv$5) (bitvector 32)) (sign-extend (extract 111 96 sym_bv$5) (bitvector 32))) (sign-extend (extract 95 80 sym_bv$5) (bitvector 32))) (sign-extend (extract 79 64 sym_bv$5) (bitvector 32))) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$5 (bv #x80008000800080008000800080000000 128)])
Verification failed :(
#((bv #x80008000800080008000800080000000 128))
invoke-spec with env: #((bv #x80008000800080008000800080000000 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff800000000000rm: cannot remove '/tmp/base_8648_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvsub', 'sign-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvsub', 'sign-extend']
DSL Ops ['bveq']
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 23
Actual Compute ops 2
Num Broadcasts: 23
Num Computes: 15
Adding:  _mm_sub_epi16 with score: 5 belonging to target agnostic class _mm_sub_pi16
Adding:  _mm_hsub_epi16 with score: 5 belonging to target agnostic class _mm_hsub_epi32
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_max_epi16 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 24
 256)
(bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff800000000000 256)
Verification failed ...
	spec produced: (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff800000000000 256) 256 
	synthesized result produced: (bv #x0000800000008000000080000000800000008000000080000000800000000000 256) 256

invoke-spec with env: #((bv #x80008000800080008000800080000000 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff800000000000 256)
Difference  Predicate
'((0 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2902970450fa23ffd44e0186dc1d1129 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00002902ffff9704000050fa000023ffffffd44e00000186ffffdc1d00001129 256)
invoke-spec-lane with env: #((bv #x2902970450fa23ffd44e0186dc1d1129 128))
Concrete counter examples:
(#((bv #x2902970450fa23ffd44e0186dc1d1129 128)) #((bv #x4b06357a613f1118d09977e9c7bf0be7 128)) #((bv #x80008000800080008000800080000000 128)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2902970450fa23ffd44e0186dc1d1129 128))
Spec Produced:
(bv #x00001129 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4b06357a613f1118d09977e9c7bf0be7 128))
Spec Produced:
(bv #x00000be7 32)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x80008000800080008000800080000000 128))
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6)

invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int32x8 '(buf int16 128))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_8648

base_8648_grammar.rkt
/tmp/base_8648_grammar.rkt
Writing [{ 
"name": "base_8648" , 
"semantics": [ "(extract bvsub sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8648_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8648_spec.JSON /tmp/base_8648_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8648 ... 

Grammar:
#<procedure:base_8648>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x7250e940af329578c1a5c38bba8998cc 128) (bv #x4d9b1d94d34a358a22e25d410a1a1a63 128))
(vec-sub (buffer #<procedure:buffer-fn> 'int16 128) (bufferrm: cannot remove '/tmp/base_7928_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 16
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 16
 #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x24b5cbacdbe85fee9ec3664ab06f7e69 128)
invoke-spec-lane with env: #((bv #x7250e940af329578c1a5c38bba8998cc 128) (bv #x4d9b1d94d34a358a22e25d410a1a1a63 128))
Concrete counter examples:
(#((bv #x7250e940af329578c1a5c38bba8998cc 128) (bv #x4d9b1d94d34a358a22e25d410a1a1a63 128)) #((bv #x34af6627919b11a2188e77aa4bdfd55b 128) (bv #x14fb37a6f2c74a7ffba0960192e0f774 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x7250e940af329578c1a5c38bba8998cc 128) (bv #x4d9b1d94d34a358a22e25d410a1a1a63 128))
Spec Produced:
(bv #x7e69 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x34af6627919b11a2188e77aa4bdfd55b 128) (bv #x14fb37a6f2c74a7ffba0960192e0f774 128))
Spec Produced:
(bv #xdde7 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-sub '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)
Synthesis step completed!
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
get-expr-grammar with base_name: base_7928

base_7928_grammar.rkt
/tmp/base_7928_grammar.rkt
Writing [{ 
"name": "base_7928" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7928_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7928_spec.JSON /tmp/base_7928_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_7928 ... 

Grammar:
#<procedure:base_7928>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xfa3c6099b0240f65 64))
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Spec result
(bv #x00fa003c0060009900b00024000f0065 128)
invoke-spec-lane with env: #((bv #xfa3c6099b0240f65 64))
Concrete counter examples:
(#((bv #xfa3c6099b0240f65 64)) #((bv #x389be3e2d59352be 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xfa3c6099b0240f65 64))
Spec Produced:
(bv #x0065 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x389be3e2d59352be 64))
Spec Produced:
(bv #x00be 16)
Synthesize by lane...
Z3 Synthesized Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$9)

invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_5887_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _m_packuswb with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_packs_pu16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_set1_pi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _m_punpcklbw with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_unpacklo_pi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _m_packsswb with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_packs_pi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7
#(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int16x8 '(buf uint8 64))
#(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)
Synthesis step completed!
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
get-expr-grammar with base_name: base_5887

base_5887_grammar.rkt
/tmp/base_5887_grammar.rkt
Writing [{ 
"name": "base_5887" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_8"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5887_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5887_spec.JSON /tmp/base_5887_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5887 ... 

Grammar:
#<procedure:base_5887>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x09 8))
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Spec result
(bv #x0909090909090909 64)
invoke-spec-lane with env: #((bv #x09 8))
Concrete counter examples:
(#((bv #x09 8)) #((bv #xea 8)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x09 8))
Spec Produced:
(bv #x09 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xea 8))
Spec Produced:
(bv #xea 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$10)

invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 '(buf uint8 8))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
get-expr-grammar with base_name: base_1865

base_1865_grammar.rkt
/tmp/base_1865_grammar.rkt
Writing [{ 
"name": "base_1865" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_16"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1865_spec.JSON
rm: cannot remove '/tmp/base_1865_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_set1_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 21

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1865_spec.JSON /tmp/base_1865_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1865 ... 

Grammar:
#<procedure:base_1865>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xd4e9 16))
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Spec result
(bv #xd4e9d4e9d4e9d4e9d4e9d4e9d4e9d4e9 128)
invoke-spec-lane with env: #((bv #xd4e9 16))
Concrete counter examples:
(#((bv #xd4e9 16)) #((bv #x1d93 16)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xd4e9 16))
Spec Produced:
(bv #xd4e9 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1d93 16))
Spec Produced:
(bv #x1d93 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$11)

invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 '(buf int16 16))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leavesrm: cannot remove '/tmp/base_8838_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_8838

base_8838_grammar.rkt
/tmp/base_8838_grammar.rkt
Writing [{ 
"name": "base_8838" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8838_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8838_spec.JSON /tmp/base_8838_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_8838 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x678930ecb6836a6c 64) (bv #x307c79d260f12ae8 64)) 

spec produced: (bv #x6730897c3079ecd2b66083f16a2a6ce8 128)

invoke_ref_lane for swizzles on input #((bv #x678930ecb6836a6c 64) (bv #x307c79d260f12ae8 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x678930ecb6836a6c 64) (bv #x307c79d260f12ae8 64)) 

spec produced: (bv #x6730897c3079ecd2b66083f16a2a6ce8 128)

invoke ref result: (bv #x6730897c3079ecd2b66083f16a2a6ce8 128)

Concrete counter examples:
(#((bv #x678930ecb6836a6c 64) (bv #x307c79d260f12ae8 64)) #((bv #x620ff498ab40d902 64) (bv #xe725458d17cc767c 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x678930ecb6836a6c 64) (bv #x307c79d260f12ae8 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x678930ecb6836a6c 64) (bv #x307c79d260f12ae8 64)) 

spec produced: (bv #x6730897c3079ecd2b66083f16a2a6ce8 128)

invoke ref result: (bv #x6730897c3079ecd2b66083f16a2a6ce8 128)

Spec Produced:
(bv #xe8 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x678930ecb6836a6c 64) (bv #x307c79d260f12ae8 64)) 

spec produced: (bv #x6730897c3079ecd2b66083f16a2a6ce8 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x620ff498ab40d902 64) (bv #xe725458d17cc767c 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x620ff498ab40d902 64) (bv #xe725458d17cc767c 64)) 
rm: cannot remove '/tmp/base_8463_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

spec produced: (bv #x62e70f25f445988dab1740ccd976027c 128)

invoke ref result: (bv #x62e70f25f445988dab1740ccd976027c 128)

Spec Produced:
(bv #x7c 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x620ff498ab40d902 64) (bv #xe725458d17cc767c 64)) 

spec produced: (bv #x62e70f25f445988dab1740ccd976027c 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$12 sym_bv$13)

invoke_ref for swizzles on input #(sym_bv$12 sym_bv$13) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$12) (extract 63 56 sym_bv$13)) (concat (extract 55 48 sym_bv$12) (extract 55 48 sym_bv$13))) (concat (extract 47 40 sym_bv$12) (extract 47 40 sym_bv$13))) (concat (extract 39 32 ...) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_8463

base_8463_grammar.rkt
/tmp/base_8463_grammar.rkt
Writing [{ 
"name": "base_8463" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8463_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8463_spec.JSON /tmp/base_8463_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_8463 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.0
; (reg 1) <8 x i8>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 0) <8 x i32>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t266, 1, 8) aligned(8, 0)] if (uint1x8)t265) + (int32x8((int16x8(((uint8x8)filter[x8(t268) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t267)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t272))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t272 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 21.809435seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 0

Optimized expression: (int32x8)hydride.node.0((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t109]) - int16((uint8)input_zero))
Starting synthesis for expr: 1
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t110]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_1653_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_1653

base_1653_grammar.rkt
/tmp/base_1653_grammar.rkt
Writing [{ 
"name": "base_1653" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1653_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1653_spec.JSON /tmp/base_1653_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_1653 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xb777183a3fbcb4c2 64) (bv #xc5971f40c92b5eb3 64)) 

spec produced: (bv #xb7c57797181f3a403fc9bc2bb45ec2b3 128)

invoke_ref_lane for swizzles on input #((bv #xb777183a3fbcb4c2 64) (bv #xc5971f40c92b5eb3 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xb777183a3fbcb4c2 64) (bv #xc5971f40c92b5eb3 64)) 

spec produced: (bv #xb7c57797181f3a403fc9bc2bb45ec2b3 128)
rm: cannot remove '/tmp/base_5193_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #xb7c57797181f3a403fc9bc2bb45ec2b3 128)

Concrete counter examples:
(#((bv #xb777183a3fbcb4c2 64) (bv #xc5971f40c92b5eb3 64)) #((bv #xbbb196a9898d3ee3 64) (bv #x6f04a98372008df3 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xb777183a3fbcb4c2 64) (bv #xc5971f40c92b5eb3 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xb777183a3fbcb4c2 64) (bv #xc5971f40c92b5eb3 64)) 

spec produced: (bv #xb7c57797181f3a403fc9bc2bb45ec2b3 128)

invoke ref result: (bv #xb7c57797181f3a403fc9bc2bb45ec2b3 128)

Spec Produced:
(bv #xb3 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xb777183a3fbcb4c2 64) (bv #xc5971f40c92b5eb3 64)) 

spec produced: (bv #xb7c57797181f3a403fc9bc2bb45ec2b3 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xbbb196a9898d3ee3 64) (bv #x6f04a98372008df3 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xbbb196a9898d3ee3 64) (bv #x6f04a98372008df3 64)) 

spec produced: (bv #xbb6fb10496a9a98389728d003e8de3f3 128)

invoke ref result: (bv #xbb6fb10496a9a98389728d003e8de3f3 128)

Spec Produced:
(bv #xf3 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xbbb196a9898d3ee3 64) (bv #x6f04a98372008df3 64)) 

spec produced: (bv #xbb6fb10496a9a98389728d003e8de3f3 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_5193

base_5193_grammar.rkt
/tmp/base_5193_grammar.rkt
Writing [{ 
"name": "base_5193" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5193_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5193_spec.JSON /tmp/base_5193_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_5193 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.1
; (reg 1) <8 x i8>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 0) <8 x i32>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t277, 1, 8) aligned(8, 0)] if (uint1x8)t276) + (int32x8((int16x8(((uint8x8)filter[x8(t280) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t279)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t284))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t284 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 11.084940seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 1

Optimized expression: (int32x8)hydride.node.1((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t110]) - int16((uint8)input_zero))
Starting synthesis for expr: 2
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t111]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_2629_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_2629

base_2629_grammar.rkt
/tmp/base_2629_grammar.rkt
Writing [{ 
"name": "base_2629" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2629_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2629_spec.JSON /tmp/base_2629_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_2629 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x719ef444cc1a3bf8 64) (bv #xc57e879a7b73408b 64)) 

spec produced: (bv #x71c59e7ef487449acc7b1a733b40f88b 128)

invoke_ref_lane for swizzles on input #((bv #x719ef444cc1a3bf8 64) (bv #xc57e879a7b73408b 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x719ef444cc1a3bf8 64) (bv #xc57e879a7b73408b 64)) 

spec produced: (bv #x71c59e7ef487449acc7b1a733b40f88b 128)
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #x71c59e7ef487449acc7b1a733b40f88b 128)

Concrete counter examples:
(#((bv #x719ef444cc1a3bf8 64) (bv #xc57e879a7b73408b 64)) #((bv #x512c69fc52cccd7b 64) (bv #xc8beba2c0a86fe87 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x719ef444cc1a3bf8 64) (bv #xc57e879a7b73408b 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x719ef444cc1a3bf8 64) (bv #xc57e879a7b73408b 64)) 

spec produced: (bv #x71c59e7ef487449acc7b1a733b40f88b 128)

invoke ref result: (bv #x71c59e7ef487449acc7b1a733b40f88b 128)

Spec Produced:
(bv #x8b 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x719ef444cc1a3bf8 64) (bv #xc57e879a7b73408b 64)) 

spec produced: (bv #x71c59e7ef487449acc7b1a733b40f88b 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x512c69fc52cccd7b 64) (bv #xc8beba2c0a86fe87 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x512c69fc52cccd7b 64) (bv #xc8beba2c0a86fe87 64)) 

spec produced: (bv #x51c82cbe69bafc2c520acc86cdfe7b87 128)

invoke ref result: (bv #x51c82cbe69bafc2c520acc86cdfe7b87 128)

Spec Produced:
(bv #x87 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x512c69fc52cccd7b 64) (bv #xc8beba2c0a86fe87 64)) 

spec produced: (bv #x51c82cbe69bafc2c520acc86cdfe7b87 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_4379

base_4379_grammar.rkt
/tmp/base_4379_grammar.rkt
Writing [{ 
"name": "base_4379" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4379_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4379_spec.JSON /tmp/base_4379_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_4379 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.2
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t289, 1, 8) aligned(8, 0)] if (uint1x8)t288) + (int32x8((int16x8(((uint8x8)filter[x8(t292) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t291)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t296))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t296 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 10.686940seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 2

Optimized expression: (int32x8)hydride.node.2((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t111]) - int16((uint8)input_zero))
Starting synthesis for expr: 3
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t112]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_203_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_203

base_203_grammar.rkt
/tmp/base_203_grammar.rkt
Writing [{ 
"name": "base_203" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_203_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_203_spec.JSON /tmp/base_203_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_203 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x0865abbef81a452d 64) (bv #x90c1656b8eba378f 64)) 

spec produced: (bv #x089065c1ab65be6bf88e1aba45372d8f 128)

invoke_ref_lane for swizzles on input #((bv #x0865abbef81a452d 64) (bv #x90c1656b8eba378f 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x0865abbef81a452d 64) (bv #x90c1656b8eba378f 64)) 

spec produced: (bv #x089065c1ab65be6bf88e1aba45372d8f 128)
rm: cannot remove '/tmp/base_5299_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #x089065c1ab65be6bf88e1aba45372d8f 128)

Concrete counter examples:
(#((bv #x0865abbef81a452d 64) (bv #x90c1656b8eba378f 64)) #((bv #x402de9dc4b2f0f56 64) (bv #x0b2a8e41c032c7d6 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x0865abbef81a452d 64) (bv #x90c1656b8eba378f 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x0865abbef81a452d 64) (bv #x90c1656b8eba378f 64)) 

spec produced: (bv #x089065c1ab65be6bf88e1aba45372d8f 128)

invoke ref result: (bv #x089065c1ab65be6bf88e1aba45372d8f 128)

Spec Produced:
(bv #x8f 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x0865abbef81a452d 64) (bv #x90c1656b8eba378f 64)) 

spec produced: (bv #x089065c1ab65be6bf88e1aba45372d8f 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x402de9dc4b2f0f56 64) (bv #x0b2a8e41c032c7d6 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x402de9dc4b2f0f56 64) (bv #x0b2a8e41c032c7d6 64)) 

spec produced: (bv #x400b2d2ae98edc414bc02f320fc756d6 128)

invoke ref result: (bv #x400b2d2ae98edc414bc02f320fc756d6 128)

Spec Produced:
(bv #xd6 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x402de9dc4b2f0f56 64) (bv #x0b2a8e41c032c7d6 64)) 

spec produced: (bv #x400b2d2ae98edc414bc02f320fc756d6 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_5299

base_5299_grammar.rkt
/tmp/base_5299_grammar.rkt
Writing [{ 
"name": "base_5299" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5299_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5299_spec.JSON /tmp/base_5299_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_5299 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.3
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t301, 1, 8) aligned(8, 0)] if (uint1x8)t300) + (int32x8((int16x8(((uint8x8)filter[x8(t304) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t303)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t308))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t308 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 10.585129seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 3

Optimized expression: (int32x8)hydride.node.3((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t112]) - int16((uint8)input_zero))
Starting synthesis for expr: 4
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t113]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_4797_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_4797

base_4797_grammar.rkt
/tmp/base_4797_grammar.rkt
Writing [{ 
"name": "base_4797" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4797_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4797_spec.JSON /tmp/base_4797_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_4797 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x651c37a5703969cc 64) (bv #xc145ea19c3c088a4 64)) 

spec produced: (bv #x65c11c4537eaa51970c339c06988cca4 128)

invoke_ref_lane for swizzles on input #((bv #x651c37a5703969cc 64) (bv #xc145ea19c3c088a4 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x651c37a5703969cc 64) (bv #xc145ea19c3c088a4 64)) 

spec produced: (bv #x65c11c4537eaa51970c339c06988cca4 128)
rm: cannot remove '/tmp/base_3547_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #x65c11c4537eaa51970c339c06988cca4 128)

Concrete counter examples:
(#((bv #x651c37a5703969cc 64) (bv #xc145ea19c3c088a4 64)) #((bv #xda3dcc7ec6e1920a 64) (bv #x2b52b85f7f192552 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x651c37a5703969cc 64) (bv #xc145ea19c3c088a4 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x651c37a5703969cc 64) (bv #xc145ea19c3c088a4 64)) 

spec produced: (bv #x65c11c4537eaa51970c339c06988cca4 128)

invoke ref result: (bv #x65c11c4537eaa51970c339c06988cca4 128)

Spec Produced:
(bv #xa4 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x651c37a5703969cc 64) (bv #xc145ea19c3c088a4 64)) 

spec produced: (bv #x65c11c4537eaa51970c339c06988cca4 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xda3dcc7ec6e1920a 64) (bv #x2b52b85f7f192552 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xda3dcc7ec6e1920a 64) (bv #x2b52b85f7f192552 64)) 

spec produced: (bv #xda2b3d52ccb87e5fc67fe11992250a52 128)

invoke ref result: (bv #xda2b3d52ccb87e5fc67fe11992250a52 128)

Spec Produced:
(bv #x52 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xda3dcc7ec6e1920a 64) (bv #x2b52b85f7f192552 64)) 

spec produced: (bv #xda2b3d52ccb87e5fc67fe11992250a52 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_3547

base_3547_grammar.rkt
/tmp/base_3547_grammar.rkt
Writing [{ 
"name": "base_3547" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3547_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3547_spec.JSON /tmp/base_3547_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_3547 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.4
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t313, 1, 8) aligned(8, 0)] if (uint1x8)t312) + (int32x8((int16x8(((uint8x8)filter[x8(t316) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t315)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t320))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t320 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 10.981647seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 4

Optimized expression: (int32x8)hydride.node.4((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t113]) - int16((uint8)input_zero))
Starting synthesis for expr: 5
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t114]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_4317_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_4317

base_4317_grammar.rkt
/tmp/base_4317_grammar.rkt
Writing [{ 
"name": "base_4317" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4317_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4317_spec.JSON /tmp/base_4317_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_4317 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x7f7920b27738f831 64) (bv #x1a4b0b9dd33c981b 64)) 

spec produced: (bv #x7f1a794b200bb29d77d3383cf898311b 128)

invoke_ref_lane for swizzles on input #((bv #x7f7920b27738f831 64) (bv #x1a4b0b9dd33c981b 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x7f7920b27738f831 64) (bv #x1a4b0b9dd33c981b 64)) 

spec produced: (bv #x7f1a794b200bb29d77d3383cf898311b 128)
rm: cannot remove '/tmp/base_4849_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #x7f1a794b200bb29d77d3383cf898311b 128)

Concrete counter examples:
(#((bv #x7f7920b27738f831 64) (bv #x1a4b0b9dd33c981b 64)) #((bv #x06da8c93378a77e0 64) (bv #x5bd4a530ef0a1968 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x7f7920b27738f831 64) (bv #x1a4b0b9dd33c981b 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x7f7920b27738f831 64) (bv #x1a4b0b9dd33c981b 64)) 

spec produced: (bv #x7f1a794b200bb29d77d3383cf898311b 128)

invoke ref result: (bv #x7f1a794b200bb29d77d3383cf898311b 128)

Spec Produced:
(bv #x1b 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x7f7920b27738f831 64) (bv #x1a4b0b9dd33c981b 64)) 

spec produced: (bv #x7f1a794b200bb29d77d3383cf898311b 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x06da8c93378a77e0 64) (bv #x5bd4a530ef0a1968 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x06da8c93378a77e0 64) (bv #x5bd4a530ef0a1968 64)) 

spec produced: (bv #x065bdad48ca5933037ef8a0a7719e068 128)

invoke ref result: (bv #x065bdad48ca5933037ef8a0a7719e068 128)

Spec Produced:
(bv #x68 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x06da8c93378a77e0 64) (bv #x5bd4a530ef0a1968 64)) 

spec produced: (bv #x065bdad48ca5933037ef8a0a7719e068 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_4849

base_4849_grammar.rkt
/tmp/base_4849_grammar.rkt
Writing [{ 
"name": "base_4849" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4849_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4849_spec.JSON /tmp/base_4849_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_4849 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.5
; (reg 1) <8 x i8>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 0) <8 x i32>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t325, 1, 8) aligned(8, 0)] if (uint1x8)t324) + (int32x8((int16x8(((uint8x8)filter[x8(t328) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t327)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t332))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t332 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 10.984009seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 5

Optimized expression: (int32x8)hydride.node.5((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t114]) - int16((uint8)input_zero))
Starting synthesis for expr: 6
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t115]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_6490_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_6490

base_6490_grammar.rkt
/tmp/base_6490_grammar.rkt
Writing [{ 
"name": "base_6490" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6490_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6490_spec.JSON /tmp/base_6490_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_6490 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xcbbcb81a66967c9d 64) (bv #x57312f19fb5f72d8 64)) 

spec produced: (bv #xcb57bc31b82f1a1966fb965f7c729dd8 128)

invoke_ref_lane for swizzles on input #((bv #xcbbcb81a66967c9d 64) (bv #x57312f19fb5f72d8 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xcbbcb81a66967c9d 64) (bv #x57312f19fb5f72d8 64)) 

spec produced: (bv #xcb57bc31b82f1a1966fb965f7c729dd8 128)
rm: cannot remove '/tmp/base_3762_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #xcb57bc31b82f1a1966fb965f7c729dd8 128)

Concrete counter examples:
(#((bv #xcbbcb81a66967c9d 64) (bv #x57312f19fb5f72d8 64)) #((bv #x268e50e366c03a9c 64) (bv #x91bb21ccee22132a 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xcbbcb81a66967c9d 64) (bv #x57312f19fb5f72d8 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xcbbcb81a66967c9d 64) (bv #x57312f19fb5f72d8 64)) 

spec produced: (bv #xcb57bc31b82f1a1966fb965f7c729dd8 128)

invoke ref result: (bv #xcb57bc31b82f1a1966fb965f7c729dd8 128)

Spec Produced:
(bv #xd8 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xcbbcb81a66967c9d 64) (bv #x57312f19fb5f72d8 64)) 

spec produced: (bv #xcb57bc31b82f1a1966fb965f7c729dd8 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x268e50e366c03a9c 64) (bv #x91bb21ccee22132a 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x268e50e366c03a9c 64) (bv #x91bb21ccee22132a 64)) 

spec produced: (bv #x26918ebb5021e3cc66eec0223a139c2a 128)

invoke ref result: (bv #x26918ebb5021e3cc66eec0223a139c2a 128)

Spec Produced:
(bv #x2a 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x268e50e366c03a9c 64) (bv #x91bb21ccee22132a 64)) 

spec produced: (bv #x26918ebb5021e3cc66eec0223a139c2a 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_3762

base_3762_grammar.rkt
/tmp/base_3762_grammar.rkt
Writing [{ 
"name": "base_3762" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3762_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3762_spec.JSON /tmp/base_3762_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_3762 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.6
; (reg 1) <8 x i8>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 0) <8 x i32>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t337, 1, 8) aligned(8, 0)] if (uint1x8)t336) + (int32x8((int16x8(((uint8x8)filter[x8(t340) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t339)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t344))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t344 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 10.554054seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 6

Optimized expression: (int32x8)hydride.node.6((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t115]) - int16((uint8)input_zero))
Starting synthesis for expr: 7
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t116]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_9224_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_9224

base_9224_grammar.rkt
/tmp/base_9224_grammar.rkt
Writing [{ 
"name": "base_9224" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9224_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9224_spec.JSON /tmp/base_9224_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_9224 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x39445a360318eadb 64) (bv #x84ddd79615620685 64)) 

spec produced: (bv #x398444dd5ad7369603151862ea06db85 128)

invoke_ref_lane for swizzles on input #((bv #x39445a360318eadb 64) (bv #x84ddd79615620685 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x39445a360318eadb 64) (bv #x84ddd79615620685 64)) 

spec produced: (bv #x398444dd5ad7369603151862ea06db85 128)
rm: cannot remove '/tmp/base_9904_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #x398444dd5ad7369603151862ea06db85 128)

Concrete counter examples:
(#((bv #x39445a360318eadb 64) (bv #x84ddd79615620685 64)) #((bv #x88d568fff791649b 64) (bv #xcf7e60bda34c7c2c 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x39445a360318eadb 64) (bv #x84ddd79615620685 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x39445a360318eadb 64) (bv #x84ddd79615620685 64)) 

spec produced: (bv #x398444dd5ad7369603151862ea06db85 128)

invoke ref result: (bv #x398444dd5ad7369603151862ea06db85 128)

Spec Produced:
(bv #x85 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x39445a360318eadb 64) (bv #x84ddd79615620685 64)) 

spec produced: (bv #x398444dd5ad7369603151862ea06db85 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x88d568fff791649b 64) (bv #xcf7e60bda34c7c2c 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x88d568fff791649b 64) (bv #xcf7e60bda34c7c2c 64)) 

spec produced: (bv #x88cfd57e6860ffbdf7a3914c647c9b2c 128)

invoke ref result: (bv #x88cfd57e6860ffbdf7a3914c647c9b2c 128)

Spec Produced:
(bv #x2c 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x88d568fff791649b 64) (bv #xcf7e60bda34c7c2c 64)) 

spec produced: (bv #x88cfd57e6860ffbdf7a3914c647c9b2c 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_9904

base_9904_grammar.rkt
/tmp/base_9904_grammar.rkt
Writing [{ 
"name": "base_9904" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9904_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9904_spec.JSON /tmp/base_9904_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_9904 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.7
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t349, 1, 8) aligned(8, 0)] if (uint1x8)t348) + (int32x8((int16x8(((uint8x8)filter[x8(t352) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t351)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t356))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t356 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 10.988570seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 7

Optimized expression: (int32x8)hydride.node.7((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t116]) - int16((uint8)input_zero))
Starting synthesis for expr: 8
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t117]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_30_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 (reg (bv #x00 8))
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_30

base_30_grammar.rkt
/tmp/base_30_grammar.rkt
Writing [{ 
"name": "base_30" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_30_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_30_spec.JSON /tmp/base_30_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_30 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x94d82e69c42777f5 64) (bv #x9ac5ed3252ab816f 64)) 

spec produced: (bv #x949ad8c52eed6932c45227ab7781f56f 128)

invoke_ref_lane for swizzles on input #((bv #x94d82e69c42777f5 64) (bv #x9ac5ed3252ab816f 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x94d82e69c42777f5 64) (bv #x9ac5ed3252ab816f 64)) 

spec produced: (bv #x949ad8c52eed6932c45227ab7781f56f 128)
rm: cannot remove '/tmp/base_775_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 15

invoke ref result: (bv #x949ad8c52eed6932c45227ab7781f56f 128)

Concrete counter examples:
(#((bv #x94d82e69c42777f5 64) (bv #x9ac5ed3252ab816f 64)) #((bv #x287970f48044a314 64) (bv #x7e727994027156cc 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x94d82e69c42777f5 64) (bv #x9ac5ed3252ab816f 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x94d82e69c42777f5 64) (bv #x9ac5ed3252ab816f 64)) 

spec produced: (bv #x949ad8c52eed6932c45227ab7781f56f 128)

invoke ref result: (bv #x949ad8c52eed6932c45227ab7781f56f 128)

Spec Produced:
(bv #x6f 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x94d82e69c42777f5 64) (bv #x9ac5ed3252ab816f 64)) 

spec produced: (bv #x949ad8c52eed6932c45227ab7781f56f 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x287970f48044a314 64) (bv #x7e727994027156cc 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x287970f48044a314 64) (bv #x7e727994027156cc 64)) 

spec produced: (bv #x287e79727079f49480024471a35614cc 128)

invoke ref result: (bv #x287e79727079f49480024471a35614cc 128)

Spec Produced:
(bv #xcc 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x287970f48044a314 64) (bv #x7e727994027156cc 64)) 

spec produced: (bv #x287e79727079f49480024471a35614cc 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_775

base_775_grammar.rkt
/tmp/base_775_grammar.rkt
Writing [{ 
"name": "base_775" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_775_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_775_spec.JSON /tmp/base_775_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_775 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>

(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

Writing [; hydride.node.8
; (reg 1) <8 x i8>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 0) <8 x i32>


(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  
(reg 0)  256  32  );<8 x i32>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Input expression to synthesize: (((int32x8)multiplied[ramp(t361, 1, 8) aligned(8, 0)] if (uint1x8)t360) + (int32x8((int16x8(((uint8x8)filter[x8(t364) + (x8(filter.stride.1)*ramp(0, 1, 8))] if (uint1x8)t363)) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t368))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t368 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 10.685955seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 8

Optimized expression: (int32x8)hydride.node.8((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t117]) - int16((uint8)input_zero))
Starting synthesis for expr: 9
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 21
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_max_epi16 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 20
) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_6926

base_6926_grammar.rkt
/tmp/base_6926_grammar.rkt
Writing [{ 
"name": "base_6926" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6926_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6926_spec.JSON /tmp/base_6926_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6926 ... 

Grammar:
#<procedure:base_6926>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x15e9486a3432b6205f50013960382ab5 128)
invoke-spec-lane with env: #((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128))
Concrete counter examples:
(#((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128)) #((bv #x2e72661d004f9f3af6188e08c9ee627f 128) (bv #x8a664452061560148d770907d92bbc29 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128))
Spec Produced:
(bv #x2ab5 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2e72661d004f9f3af6188e08c9ee627f 128) (bv #x8a664452061560148d770907d92bbc29 128))
Spec Produced:
(bv #x627f 16)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 127 112 sym_bv$3) (extract 127 112 sym_bv$2)) (extract 127 112 sym_bv$2) (extract 127 112 sym_bv$3)) (ite (bvsle (extract 111 96 sym_bv$3) (extract 111 96 sym_bv$2)) (extract 111 96 sym_bv$2) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #x088a4000790678020000000000000000 128)]
 [sym_bv$3 (bv #xc000400200008000c720ba80ea809b00 128)])
Verification failed :(
#((bv #x088a4000790678020000000000000000 128) (bv #xc000400200008000c720ba80ea809b00 128))
invoke-spec with env: #((bv #x088a4000790678020000000000000000 128) (bv #xc000400200008000c720ba80ea809b00 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x088a4002790678020000000000000000 128)
(bv #x088a4002790678020000000000000000 128)
Verification failed ...
	spec produced: (bv #x088a4002790678020000000000000000 128) 128 
	synthesized result produced: (bv #x088a4000790678020000000000000000 128) 128

invoke-spec with env: #((bv #x088a4000790678020000000000000000 128) (bv #xc000400200008000c720ba80ea809b00 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x088a4002790678020000000000000000 128)
Difference  Predicate
'((0 0 0 0 0 0 1 0))
differing-lanes
'(6)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x15e9486a3432b6205f50013960382ab5 128)
invoke-spec-lane with env: #((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128))
Concrete counter examples:
(#((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128)) #((bv #x2e72661d004f9f3af6188e08c9ee627f 128) (bv #x8a664452061560148d770907d92bbc29 128)) #((bv #x088a4000790678020000000000000000 128) (bv #xc000400200008000c720ba80ea809b00 128)))
Failing lanes examples:
(0 0 6)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x15e9a665c6b582b25f50013986052ab5 128) (bv #x84dc486a3432b62094f5a90b6038ed14 128))
Spec Produced:
(bv #x2ab5 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2e72661d004f9f3af6188e08c9ee627f 128) (bv #x8a664452061560148d770907d92bbc29 128))
Spec Produced:
(bv #x627f 16)
Synthesize by lane...
Lane Index
6
invoke-spec-lane with env: #((bv #x088a4000790678020000000000000000 128) (bv #xc000400200008000c720ba80ea809b00 128))
Spec Produced:
(bv #x4002 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-max '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-addGoing Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend', 'bvsmin']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend', 'bvsmin']
DSL Ops ['bveq']
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 23
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_min_epi16 with score: 5 belonging to target agnostic class _mm256_min_epi16
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_max_epi16 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 23
 #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_1138

base_1138_grammar.rkt
/tmp/base_1138_grammar.rkt
Writing [{ 
"name": "base_1138" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1138_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1138_spec.JSON /tmp/base_1138_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1138 ... 

Grammar:
#<procedure:base_1138>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128))
(vec-min (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x1b66a0b3f7eaf943c8570647aad304ab 128)
invoke-spec-lane with env: #((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128))
Concrete counter examples:
(#((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128)) #((bv #x1f416035dea609709b8a6653f10d593e 128) (bv #xb2472bc216a36be7f939b0d476fa6986 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128))
Spec Produced:
(bv #x04ab 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1f416035dea609709b8a6653f10d593e 128) (bv #xb2472bc216a36be7f939b0d476fa6986 128))
Spec Produced:
(bv #x593e 16)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec with env: #(sym_bv$8 sym_bv$9)
(vec-min (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 127 112 sym_bv$8) (extract 127 112 sym_bv$9)) (extract 127 112 sym_bv$8) (extract 127 112 sym_bv$9)) (ite (bvsle (extract 111 96 sym_bv$8) (extract 111 96 sym_bv$9)) (extract 111 96 sym_bv$8) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$8 (bv #x00000000030000000010000000000000 128)]
 [sym_bv$9 (bv #x75546ffe01007ffe7fee7ffe7fff7fff 128)])
Verification failed :(
#((bv #x00000000030000000010000000000000 128) (bv #x75546ffe01007ffe7fee7ffe7fff7fff 128))
invoke-spec with env: #((bv #x00000000030000000010000000000000 128) (bv #x75546ffe01007ffe7fee7ffe7fff7fff 128))
(vec-min (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00000000010000000010000000000000 128)
(bv #x00000000010000000010000000000000 128)
Verification failed ...
	spec produced: (bv #x00000000010000000010000000000000 128) 128 
	synthesized result produced: (bv #x00000000030000000010000000000000 128) 128

invoke-spec with env: #((bv #x00000000030000000010000000000000 128) (bv #x75546ffe01007ffe7fee7ffe7fff7fff 128))
(vec-min (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00000000010000000010000000000000 128)
Difference  Predicate
'((0 0 0 0 0 1 0 0))
differing-lanes
'(5)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128))
(vec-min (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x1b66a0b3f7eaf943c8570647aad304ab 128)
invoke-spec-lane with env: #((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128))
Concrete counter examples:
(#((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128)) #((bv #x1f416035dea609709b8a6653f10d593e 128) (bv #xb2472bc216a36be7f939b0d476fa6986 128)) #((bv #x00000000030000000010000000000000 128) (bv #x75546ffe01007ffe7fee7ffe7fff7fff 128)))
Failing lanes examples:
(0 0 5)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1b66bb4052d6466ac85724b4aad304ab 128) (bv #x6278a0b3f7eaf9433c5006475ca35833 128))
Spec Produced:
(bv #x04ab 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1f416035dea609709b8a6653f10d593e 128) (bv #xb2472bc216a36be7f939b0d476fa6986 128))
Spec Produced:
(bv #x593e 16)
Synthesize by lane...
Lane Index
5
invoke-spec-lane with env: #((bv #x00000000030000000010000000000000 128) (bv #x75546ffe01007ffe7fee7ffe7fff7fff 128))
Spec Produced:
(bv #x0100 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$10 sym_bv$11)

invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000rm: cannot remove '/tmp/base_8676_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvadd', 'sign-extend', 'bvaddnsw']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvadd', 'sign-extend', 'bvaddnsw']
DSL Ops ['bveq']
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 23
Actual Compute ops 5
Num Broadcasts: 20
Num Computes: 15
18 < 21
Adding:  _mm_hadd_epi16 with score: 5 belonging to target agnostic class _mm_hadd_epi16
Adding:  _mm_adds_epi16 with score: 5 belonging to target agnostic class _m_paddsb
Adding:  _mm_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm_hadds_epi16 with score: 5 belonging to target agnostic class _mm_hadds_epi16
Adding:  _mm_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_max_epi16 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 25
 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_8676

base_8676_grammar.rkt
/tmp/base_8676_grammar.rkt
Writing [{ 
"name": "base_8676" , 
"semantics": [ "(extract bvadd sign-extend #<procedure:bvaddnsw> #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8676_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8676_spec.JSON /tmp/base_8676_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8676 ... 

Grammar:
#<procedure:base_8676>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x0ac2590e7fff4f1c7d2510b55dba2259 128)
invoke-spec-lane with env: #((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128))
Concrete counter examples:
(#((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128)) #((bv #x32ad1531de19d561baf50c88e2520df1 128) (bv #x3c82b1a855dd466b77a77f4c3aa7818a 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128))
Spec Produced:
(bv #x2259 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x32ad1531de19d561baf50c88e2520df1 128) (bv #x3c82b1a855dd466b77a77f4c3aa7818a 128))
Spec Produced:
(bv #x8f7b 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$14 sym_bv$15)

invoke-spec with env: #(sym_bv$14 sym_bv$15)
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (&& (bvslt (bv #x0000 16) (extract 127 112 sym_bv$14)) (&& (bvslt (bv #x0000 16) (extract 127 112 sym_bv$15)) (bvslt (bvadd (bv #x7fff 16) (bvneg (extract 127 112 sym_bv$15))) (extract 127 112 sym_bv$14)))) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$14 (bv #xe2336000609c80000e518000a0008000 128)]
 [sym_bv$15 (bv #xaaf96000608480001b7d800190008000 128)])
Verification failed :(
#((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
invoke-spec with env: #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128)
(bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128)
Verification failed ...
	spec produced: (bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128) 128 
	synthesized result produced: (bv #x8d2cc000c120000029ce000130000000 128) 128

invoke-spec with env: #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128)
Difference  Predicate
'((1 1 1 0 1 1 1 0))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x0ac2590e7fff4f1c7d2510b55dba2259 128)
invoke-spec-lane with env: #((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128))
Concrete counter examples:
(#((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128)) #((bv #x32ad1531de19d561baf50c88e2520df1 128) (bv #x3c82b1a855dd466b77a77f4c3aa7818a 128)) #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x30130eb8ded11537059ccb0207433746 128) (bv #xdaaf4a56922539e5778945b35677eb13 128))
Spec Produced:
(bv #x2259 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x32ad1531de19d561baf50c88e2520df1 128) (bv #x3c82b1a855dd466b77a77f4c3aa7818a 128))
Spec Produced:
(bv #x8f7b 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
Spec Produced:
(bv #x7fff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$16 sym_bv$17)

invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-sat-add '(buf int16 128) '(buf int16 128))
#(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)
Synthesis step completed!
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001rm: cannot remove '/tmp/base_2018_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 13
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm256_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 13
 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_2018

base_2018_grammar.rkt
/tmp/base_2018_grammar.rkt
Writing [{ 
"name": "base_2018" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2018_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2018_spec.JSON /tmp/base_2018_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2018 ... 

Grammar:
#<procedure:base_2018>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256))
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x221f69a7cb7047b44c3add393e85779c 128)
invoke-spec-lane with env: #((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256))
Concrete counter examples:
(#((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256)) #((bv #x4f904e7f84345c1c36ceeb4887dab1e1c15f49881f3272e534466ba73c6309e1 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256))
Spec Produced:
(bv #x779c 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4f904e7f84345c1c36ceeb4887dab1e1c15f49881f3272e534466ba73c6309e1 256))
Spec Produced:
(bv #x09e1 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 64 16 64 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 64 16 64 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$18)

invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
invoke-spec-lane with env: #(sym_bv$18)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$19)

invoke-spec with env: #(sym_bv$19)
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (extract 239 224 sym_bv$19) (extract 207 192 sym_bv$19)) (extract 175 160 sym_bv$19)) (extract 143 128 sym_bv$19)) (extract 111 96 sym_bv$19)) (extract 79 64 sym_bv$19)) (extract 47 32 sym_bv$19)) (extract ...))
Verification took 0 seconds

(model
 [sym_bv$19 (bv #x0000ffff0000ffff0000ffff0000fbff00000000000004000000fbff00000000 256)])
Verification failed :(
#((bv #x0000ffff0000ffff0000ffff0000fbff00000000000004000000fbff00000000 256))
invoke-spec with env: #((bv #x0000ffff0000ffff0000ffff0000fbff00000000000004000000fbff00000000 256))
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xfffffffffffffbff00000400fbff0000 128)
(bv #xfffffffffffffbff00000400fbff0000 128)
Verification failed ...
	spec produced: (bv #xfffffffffffffbff00000400fbff0000 128) 128 
	synthesized result produced: (bv #x0000000000000000fffffbff04000000 128) 128

invoke-spec with env: #((bv #x0000ffff0000ffff0000ffff0000fbff00000000000004000000fbff00000000 256))
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xfffffffffffffbff00000400fbff0000 128)
Difference  Predicate
'((0 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256))
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x221f69a7cb7047b44c3add393e85779c 128)
invoke-spec-lane with env: #((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256))
Concrete counter examples:
(#((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256)) #((bv #x4f904e7f84345c1c36ceeb4887dab1e1c15f49881f3272e534466ba73c6309e1 256)) #((bv #x0000ffff0000ffff0000ffff0000fbff00000000000004000000fbff00000000 256)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x22c1221f395569a7a33fcb70a34f47b4627b4c3ae22edd39929f3e854c54779c 256))
Spec Produced:
(bv #x779c 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4f904e7f84345c1c36ceeb4887dab1e1c15f49881f3272e534466ba73c6309e1 256))
Spec Produced:
(bv #x09e1 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x0000ffff0000ffff0000ffff0000fbff00000000000004000000fbff00000000 256))
Spec Produced:
(bv #xfbff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$20)

invoke-spec-lane with env: #(sym_bv$20)
invoke-spec-lane with env: #(sym_bv$20)
invoke-spec-lane with env: #(sym_bv$20)
invoke-spec-lane with env: #(sym_bv$20)
invoke-spec-lane with env: #(sym_bv$20)
invoke-spec-lane with env: #(sym_bv$20)
invoke-spec-lane with env: #(sym_bv$20)
invoke-spec-lane with env: #(sym_bv$20)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int16x8 '(buf int32 256))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dslrm: cannot remove '/tmp/base_3870_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 7
 (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_3870

base_3870_grammar.rkt
/tmp/base_3870_grammar.rkt
Writing [{ 
"name": "base_3870" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3870_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3870_spec.JSON /tmp/base_3870_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3870 ... 

Grammar:
#<procedure:base_3870>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x33e0b70f7fe3d1099027de9bf50668e6520d270dbfa3e62c817426bd7780acbe 256) (bv #x26bc7f21fa92abb9e806f42540bdc24a5739e846a5d810a1659d36c32604cca3 256))
(vec-max (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x33e0b70f7fe3d109e806f42540bdc24a5739e846bfa3e62c659d36c37780acbe 256)
invoke-spec-lane with env: #((bv #x33e0b70f7fe3d1099027de9bf50668e6520d270dbfa3e62c817426bd7780acbe 256) (bv #x26bc7f21fa92abb9e806f42540bdc24a5739e846a5d810a1659d36c32604cca3 256))
Concrete counter examples:
(#((bv #x33e0b70f7fe3d1099027de9bf50668e6520d270dbfa3e62c817426bd7780acbe 256) (bv #x26bc7f21fa92abb9e806f42540bdc24a5739e846a5d810a1659d36c32604cca3 256)) #((bv #x3e900598c6a1f0d3ed8507eb7713323883ad3e68a66a75501ad043ee8c86e0eb 256) (bv #x9c4370bc078f8d40aae9777a6852ee21efb9e00b540abdd89a6da0334bd41f84 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x33e0b70f7fe3d1099027de9bf50668e6520d270dbfa3e62c817426bd7780acbe 256) (bv #x26bc7f21fa92abb9e806f42540bdc24a5739e846a5d810a1659d36c32604cca3 256))
Spec Produced:
(bv #x7780acbe 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x3e900598c6a1f0d3ed8507eb7713323883ad3e68a66a75501ad043ee8c86e0eb 256) (bv #x9c4370bc078f8d40aae9777a6852ee21efb9e00b540abdd89a6da0334bd41f84 256))
Spec Produced:
(bv #x4bd41f84 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$21 sym_bv$22)

invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-max '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwandrm: cannot remove '/tmp/base_6556_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend', 'bvsmin']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend', 'bvsmin']
DSL Ops ['bveq']
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_min_epi32 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 8
 #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_6556

base_6556_grammar.rkt
/tmp/base_6556_grammar.rkt
Writing [{ 
"name": "base_6556" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6556_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6556_spec.JSON /tmp/base_6556_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6556 ... 

Grammar:
#<procedure:base_6556>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xaed86fcf03c182ba9e878b4093fe87ea288461c5384341c01e26c4680bd852a4 256)
invoke-spec-lane with env: #((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256))
Concrete counter examples:
(#((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256)) #((bv #xd2ed0b21719b2bcbd433df302d4b49c02552b08e68b54154a0c21fa35fc2d572 256) (bv #xa676fe23302cf793e4ab95a9651a181ea262b0476469f0cb76853eb8c65247bc 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256))
Spec Produced:
(bv #x0bd852a4 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd2ed0b21719b2bcbd433df302d4b49c02552b08e68b54154a0c21fa35fc2d572 256) (bv #xa676fe23302cf793e4ab95a9651a181ea262b0476469f0cb76853eb8c65247bc 256))
Spec Produced:
(bv #xc65247bc 32)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$23 sym_bv$24)

invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$25 sym_bv$26)

invoke-spec with env: #(sym_bv$25 sym_bv$26)
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 255 224 sym_bv$25) (extract 255 224 sym_bv$26)) (extract 255 224 sym_bv$25) (extract 255 224 sym_bv$26)) (ite (bvsle (extract 223 192 sym_bv$25) (extract 223 192 sym_bv$26)) (extract 223 192 sym_bv$25) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$25 (bv #x8000000000000001000000010000000100000001000000010000000100000001 256)]
 [sym_bv$26 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x8000000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xaed86fcf03c182ba9e878b4093fe87ea288461c5384341c01e26c4680bd852a4 256)
invoke-spec-lane with env: #((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256))
Concrete counter examples:
(#((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256)) #((bv #xd2ed0b21719b2bcbd433df302d4b49c02552b08e68b54154a0c21fa35fc2d572 256) (bv #xa676fe23302cf793e4ab95a9651a181ea262b0476469f0cb76853eb8c65247bc 256)) #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb3b902fd03c182ba9e878b4055d107a7288461c5384341c058c665ff400263a8 256) (bv #xaed86fcf7cfa01164da9ab8c93fe87ea59cc331865f1d5ac1e26c4680bd852a4 256))
Spec Produced:
(bv #x0bd852a4 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd2ed0b21719b2bcbd433df302d4b49c02552b08e68b54154a0c21fa35fc2d572 256) (bv #xa676fe23302cf793e4ab95a9651a181ea262b0476469f0cb76853eb8c65247bc 256))
Spec Produced:
(bv #xc65247bc 32)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #x80000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$27 sym_bv$28)

invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
invoke-spec-lane with env: #(sym_bv$27 sym_bv$28)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64)rm: cannot remove '/tmp/base_8861_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvashr', 'sign-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvashr', 'sign-extend']
DSL Ops ['bveq']
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_srav_epi32 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_rorv_epi32 with score: 5 belonging to target agnostic class _mm256_rorv_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_rolv_epi32 with score: 5 belonging to target agnostic class _mm_rolv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 10
 #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_8861

base_8861_grammar.rkt
/tmp/base_8861_grammar.rkt
Writing [{ 
"name": "base_8861" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8861_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8861_spec.JSON /tmp/base_8861_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8861 ... 

Grammar:
#<procedure:base_8861>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xffffffff00000000ffffffffffffffffffffffffffffffff0000000000000000 256)
invoke-spec-lane with env: #((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256))
Concrete counter examples:
(#((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256)) #((bv #x92b2705f820f8d80d48b0f2710c01c8675b5e4444a5717cc94ab5ef5b0dd9049 256) (bv #x2bc865c65aa2190b78c501ed093d04f909c72b67f5faba6f5e1f14ce0f606dee 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x92b2705f820f8d80d48b0f2710c01c8675b5e4444a5717cc94ab5ef5b0dd9049 256) (bv #x2bc865c65aa2190b78c501ed093d04f909c72b67f5faba6f5e1f14ce0f606dee 256))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 256)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 256))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$29 sym_bv$30)

invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
invoke-spec-lane with env: #(sym_bv$29 sym_bv$30)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$31 sym_bv$32)

invoke-spec with env: #(sym_bv$31 sym_bv$32)
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (bvashr (extract 255 224 sym_bv$31) (extract 255 224 sym_bv$32)) (bvashr (extract 223 192 sym_bv$31) (extract 223 192 sym_bv$32))) (bvashr (extract 191 160 sym_bv$31) (extract 191 160 sym_bv$32))) (bvashr (extract ...) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$31 (bv #x4000000000000000000000000000000000000000000000000000000000000000 256)]
 [sym_bv$32 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x4000000000000000000000000000000000000000000000000000000000000000 256)
(bv #x4000000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x4000000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x4000000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xffffffff00000000ffffffffffffffffffffffffffffffff0000000000000000 256)
invoke-spec-lane with env: #((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256))
Concrete counter examples:
(#((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256)) #((bv #x92b2705f820f8d80d48b0f2710c01c8675b5e4444a5717cc94ab5ef5b0dd9049 256) (bv #x2bc865c65aa2190b78c501ed093d04f909c72b67f5faba6f5e1f14ce0f606dee 256)) #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8f7c54463912987bc653d184b4f3721e8e0a0555bb8d6d716661999258cdb06d 256) (bv #xf970e4b1cfdc62ed244528f3930ca68f6e50406190b0723bf693b4caa1af524b 256))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x92b2705f820f8d80d48b0f2710c01c8675b5e4444a5717cc94ab5ef5b0dd9049 256) (bv #x2bc865c65aa2190b78c501ed093d04f909c72b67f5faba6f5e1f14ce0f606dee 256))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #x40000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$33 sym_bv$34)

invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
invoke-spec-lane with env: #(sym_bv$33 sym_bv$34)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-shr '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend', 'zero-extend']
DSL Ops ['bveq']
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_cvtepu16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 9 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 10
 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_7893

base_7893_grammar.rkt
/tmp/base_7893_grammar.rkt
Writing [{ 
"name": "base_7893" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7893_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7893_spec.JSON /tmp/base_7893_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_7893 ... 

Grammar:
#<procedure:base_7893>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xda870f53cc7964bcdb82790a8b4127be2ca6b82a627bdcf8ee3eb89945aa2f70f73003538eca3c7d3dc405f1cf111223c11ff8eaea16d2e1b38ecaad1d130dbe 512))
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #xcc7964bc8b4127be627bdcf845aa2f708eca3c7dcf111223ea16d2e11d130dbe 256)
invoke-spec-lane with env: #((bv #xda870f53cc7964bcdb82790a8b4127be2ca6b82a627bdcf8ee3eb89945aa2f70f73003538eca3c7d3dc405f1cf111223c11ff8eaea16d2e1b38ecaad1d130dbe 512))
Concrete counter examples:
(#((bv #xda870f53cc7964bcdb82790a8b4127be2ca6b82a627bdcf8ee3eb89945aa2f70f73003538eca3c7d3dc405f1cf111223c11ff8eaea16d2e1b38ecaad1d130dbe 512)) #((bv #x9d35632bb8790045c41c18ec4620f29026e88bdd44c6ed3c04fbc103a02669a75cc24a223556a487dd2a9e0bbe5f34f9ebd5f623fbd4ffd54adaa34158c512d9 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xda870f53cc7964bcdb82790a8b4127be2ca6b82a627bdcf8ee3eb89945aa2f70f73003538eca3c7d3dc405f1cf111223c11ff8eaea16d2e1b38ecaad1d130dbe 512))
Spec Produced:
(bv #x1d130dbe 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9d35632bb8790045c41c18ec4620f29026e88bdd44c6ed3c04fbc103a02669a75cc24a223556a487dd2a9e0bbe5f34f9ebd5f623fbd4ffd54adaa34158c512d9 512))
Spec Produced:
(bv #x58c512d9 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$35)

invoke-spec-lane with env: #(sym_bv$35)
invoke-spec-lane with env: #(sym_bv$35)
invoke-spec-lane with env: #(sym_bv$35)
invoke-spec-lane with env: #(sym_bv$35)
invoke-spec-lane with env: #(sym_bv$35)
invoke-spec-lane with env: #(sym_bv$35)
invoke-spec-lane with env: #(sym_bv$35)
invoke-spec-lane with env: #(sym_bv$35)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int32x8 '(buf int64 512))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 4
)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_878

base_878_grammar.rkt
/tmp/base_878_grammar.rkt
Writing [{ 
"name": "base_878" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_878_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_878_spec.JSON /tmp/base_878_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_878 ... 

Grammar:
#<procedure:base_878>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x66dceaa6fe4f2990ddf894dc3b816a12c9a32016feabb9487658e67a36aac5d0360aaee479424e3f398b914312fe6fef3e6f020946258e2462edbc0fc491e0fe 512)
invoke-spec-lane with env: #((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512))
Concrete counter examples:
(#((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512)) #((bv #x003c27fede780260ee9da2bed9fab317ed2900d600831d7c5a168b18eee4f64ae4eacf5f514723d56805a453d0dcbb5a747b13f1fcc51fe3c9b35cd2426ef867 512) (bv #x05a781e0d58f987039b0949f0da99e75270cba8660ec2c7ad6b11693a6b19cdcc1689d264a9c9251eed7deba57301cacd76958840e0d949bd64f9e657dcf89d1 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512))
Spec Produced:
(bv #x62edbc0fc491e0fe 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x003c27fede780260ee9da2bed9fab317ed2900d600831d7c5a168b18eee4f64ae4eacf5f514723d56805a453d0dcbb5a747b13f1fcc51fe3c9b35cd2426ef867 512) (bv #x05a781e0d58f987039b0949f0da99e75270cba8660ec2c7ad6b11693a6b19cdcc1689d264a9c9251eed7deba57301cacd76958840e0d949bd64f9e657dcf89d1 512))
Spec Produced:
(bv #xd64f9e657dcf89d1 64)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$36 sym_bv$37)

invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
invoke-spec-lane with env: #(sym_bv$36 sym_bv$37)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$38 sym_bv$39)

invoke-spec with env: #(sym_bv$38 sym_bv$39)
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 511 448 sym_bv$39) (extract 511 448 sym_bv$38)) (extract 511 448 sym_bv$38) (extract 511 448 sym_bv$39)) (ite (bvsle (extract 447 384 sym_bv$39) (extract 447 384 sym_bv$38)) (extract 447 384 sym_bv$38) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$38 (bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512)]
 [sym_bv$39 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x66dceaa6fe4f2990ddf894dc3b816a12c9a32016feabb9487658e67a36aac5d0360aaee479424e3f398b914312fe6fef3e6f020946258e2462edbc0fc491e0fe 512)
invoke-spec-lane with env: #((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512))
Concrete counter examples:
(#((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512)) #((bv #x003c27fede780260ee9da2bed9fab317ed2900d600831d7c5a168b18eee4f64ae4eacf5f514723d56805a453d0dcbb5a747b13f1fcc51fe3c9b35cd2426ef867 512) (bv #x05a781e0d58f987039b0949f0da99e75270cba8660ec2c7ad6b11693a6b19cdcc1689d264a9c9251eed7deba57301cacd76958840e0d949bd64f9e657dcf89d1 512)) #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x66dceaa6fe4f2990836989a99e494ac8c9a32016feabb948507362aa69d2451e360aaee479424e3f398b914312fe6fef3ce3d86ccfa6d6aea03527e5cd0e7d17 512) (bv #xf83e3eaec756c4feddf894dc3b816a12a05bce8e547d35467658e67a36aac5d09282c73fc8324ef6149d860116794fd43e6f020946258e2462edbc0fc491e0fe 512))
Spec Produced:
(bv #x62edbc0fc491e0fe 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x003c27fede780260ee9da2bed9fab317ed2900d600831d7c5a168b18eee4f64ae4eacf5f514723d56805a453d0dcbb5a747b13f1fcc51fe3c9b35cd2426ef867 512) (bv #x05a781e0d58f987039b0949f0da99e75270cba8660ec2c7ad6b11693a6b19cdcc1689d264a9c9251eed7deba57301cacd76958840e0d949bd64f9e657dcf89d1 512))
Spec Produced:
(bv #xd64f9e657dcf89d1 64)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$40 sym_bv$41)

invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-max '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fnrm: cannot remove '/tmp/base_5340_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend', 'bvsmin']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend', 'bvsmin']
DSL Ops ['bveq']
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_min_epi64 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 5
> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_5340

base_5340_grammar.rkt
/tmp/base_5340_grammar.rkt
Writing [{ 
"name": "base_5340" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5340_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5340_spec.JSON /tmp/base_5340_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5340 ... 

Grammar:
#<procedure:base_5340>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc224228e482a1c46c5d42663808ef24d88247e613fef0a4d33efb3f451ed5cd9a242605e4fdf74e588be8d7c4e458914320e52e6ec0182dbd916dd1274929d12 512) (bv #xccd5c219e7f6cacb3e6814b8f85830107874bf92dbcb430f19259e8e03fcfeae822a24dfb1a9d512cb610c741e726cd5f4a65592f045fb3ac3ba2895a936c698 512))
(vec-min (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #xc224228e482a1c46c5d42663808ef24d88247e613fef0a4d19259e8e03fcfeae822a24dfb1a9d51288be8d7c4e458914f4a65592f045fb3ac3ba2895a936c698 512)
invoke-spec-lane with env: #((bv #xc224228e482a1c46c5d42663808ef24d88247e613fef0a4d33efb3f451ed5cd9a242605e4fdf74e588be8d7c4e458914320e52e6ec0182dbd916dd1274929d12 512) (bv #xccd5c219e7f6cacb3e6814b8f85830107874bf92dbcb430f19259e8e03fcfeae822a24dfb1a9d512cb610c741e726cd5f4a65592f045fb3ac3ba2895a936c698 512))
Concrete counter examples:
(#((bv #xc224228e482a1c46c5d42663808ef24d88247e613fef0a4d33efb3f451ed5cd9a242605e4fdf74e588be8d7c4e458914320e52e6ec0182dbd916dd1274929d12 512) (bv #xccd5c219e7f6cacb3e6814b8f85830107874bf92dbcb430f19259e8e03fcfeae822a24dfb1a9d512cb610c741e726cd5f4a65592f045fb3ac3ba2895a936c698 512)) #((bv #x84ec2cb20cecbef1aca4f02448ae5af1876970f7f7251844cd6e58bb42ecebb10ce6a7f107a0656357c973dc9ed0d667af250c16d35f1eb429aa0f02c28cde9b 512) (bv #x13265bd62977a18f8a189ea9b93f4476b39b74e89f142a02fc6fe8542901a985c977c2d0cff5bba713b3b326a385acbb7cc65501f054d4f25c0bde6723e9d860 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc224228e482a1c46c5d42663808ef24d88247e613fef0a4d33efb3f451ed5cd9a242605e4fdf74e588be8d7c4e458914320e52e6ec0182dbd916dd1274929d12 512) (bv #xccd5c219e7f6cacb3e6814b8f85830107874bf92dbcb430f19259e8e03fcfeae822a24dfb1a9d512cb610c741e726cd5f4a65592f045fb3ac3ba2895a936c698 512))
Spec Produced:
(bv #xc3ba2895a936c698rm: cannot remove '/tmp/base_5864_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvashr', 'sign-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvashr', 'sign-extend']
DSL Ops ['bveq']
Pruning _mm512_sra_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 8 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_srav_epi64 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_rorv_epi64 with score: 5 belonging to target agnostic class _mm256_rorv_epi32
Adding:  _mm512_rolv_epi64 with score: 5 belonging to target agnostic class _mm_rolv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 7
 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x84ec2cb20cecbef1aca4f02448ae5af1876970f7f7251844cd6e58bb42ecebb10ce6a7f107a0656357c973dc9ed0d667af250c16d35f1eb429aa0f02c28cde9b 512) (bv #x13265bd62977a18f8a189ea9b93f4476b39b74e89f142a02fc6fe8542901a985c977c2d0cff5bba713b3b326a385acbb7cc65501f054d4f25c0bde6723e9d860 512))
Spec Produced:
(bv #x29aa0f02c28cde9b 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$42 sym_bv$43)

invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-min '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_5864

base_5864_grammar.rkt
/tmp/base_5864_grammar.rkt
Writing [{ 
"name": "base_5864" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5864_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5864_spec.JSON /tmp/base_5864_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5864 ... 

Grammar:
#<procedure:base_5864>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf5dd5189e68b7f688a217f0ed97ea81518628343cd2a35fe246ac73a20658e6b0707402ff2449050da1a27c25e3f352f77fb1a25c524bdad4257ff7c1c7e6c23 512) (bv #xe8b6e60e80f11813f5335aa3f3f4308770a397248c969571d98f99355cd056ee814bf1be4df7fdc463a28f213eefdf3977a3709af9f219f0a6a0a2f91adc20f5 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #xffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffff00000000000000000000000000000000 512)
invoke-spec-lane with env: #((bv #xf5dd5189e68b7f688a217f0ed97ea81518628343cd2a35fe246ac73a20658e6b0707402ff2449050da1a27c25e3f352f77fb1a25c524bdad4257ff7c1c7e6c23 512) (bv #xe8b6e60e80f11813f5335aa3f3f4308770a397248c969571d98f99355cd056ee814bf1be4df7fdc463a28f213eefdf3977a3709af9f219f0a6a0a2f91adc20f5 512))
Concrete counter examples:
(#((bv #xf5dd5189e68b7f688a217f0ed97ea81518628343cd2a35fe246ac73a20658e6b0707402ff2449050da1a27c25e3f352f77fb1a25c524bdad4257ff7c1c7e6c23 512) (bv #xe8b6e60e80f11813f5335aa3f3f4308770a397248c969571d98f99355cd056ee814bf1be4df7fdc463a28f213eefdf3977a3709af9f219f0a6a0a2f91adc20f5 512)) #((bv #xec2ebf4d5b61abc679f192023a072404c1ef7d037d6efa006374ab818833f04ccdfdeffc5766d22a0d9a0ada1f746a6f44b791037f785b42ec9990e0fe433f7f 512) (bv #x68b3edd2b26567a2a491c1e1779742f93a4232a8e507b2d2ac5eced7b81c4844c7588f89c7292c293f845f688e904a2fb2d2913c26fba22af95092afc5e019c6 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf5dd5189e68b7f688a217f0ed97ea81518628343cd2a35fe246ac73a20658e6b0707402ff2449050da1a27c25e3f352f77fb1a25c524bdad4257ff7c1c7e6c23 512) (bv #xe8b6e60e80f11813f5335aa3f3f4308770a397248c969571d98f99355cd056ee814bf1be4df7fdc463a28f213eefdf3977a3709af9f219f0a6a0a2f91adc20f5 512))
Spec Produced:
(bv #x0000000000000000 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xec2ebf4d5b61abc679f192023a072404c1ef7d037d6efa006374ab818833f04ccdfdeffc5766d22a0d9a0ada1f746a6f44b791037f785b42ec9990e0fe433f7f 512) (bv #x68b3edd2b26567a2a491c1e1779742f93a4232a8e507b2d2ac5eced7b81c4844c7588f89c7292c293f845f688e904a2fb2d2913c26fba22af95092afc5e019c6 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$44 sym_bv$45)

invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-shr '(buf int64 512) '(buf uint64 512))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwandrm: cannot remove '/tmp/base_2505_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvadd', 'sign-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvadd', 'sign-extend']
DSL Ops ['bveq']
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_add_epi64 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 5
 #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_2505

base_2505_grammar.rkt
/tmp/base_2505_grammar.rkt
Writing [{ 
"name": "base_2505" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2505_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2505_spec.JSON /tmp/base_2505_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2505 ... 

Grammar:
#<procedure:base_2505>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1edcb4133293c208fb740f3284bab8d3605d61a1acfb1652456ce698bb3e7e5f0675ccd61062eb600207661cec6a185d454746b94372015e23e87acf0a217604 512) (bv #xee1b59c9d17e87e6e36ecc51122294597e8ffc93e248725a7237eace0b5113b19d5accce77b9b02165442f77e15d6db969f72d371b3a07cb97b9b2bc2562a4a6 512))
(vec-add (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x0cf80ddd041249eedee2db8396dd4d2cdeed5e358f4388acb7a4d166c68f9210a3d099a4881c9b81674b9594cdc78616af3e73f05eac0929bba22d8b2f841aaa 512)
invoke-spec-lane with env: #((bv #x1edcb4133293c208fb740f3284bab8d3605d61a1acfb1652456ce698bb3e7e5f0675ccd61062eb600207661cec6a185d454746b94372015e23e87acf0a217604 512) (bv #xee1b59c9d17e87e6e36ecc51122294597e8ffc93e248725a7237eace0b5113b19d5accce77b9b02165442f77e15d6db969f72d371b3a07cb97b9b2bc2562a4a6 512))
Concrete counter examples:
(#((bv #x1edcb4133293c208fb740f3284bab8d3605d61a1acfb1652456ce698bb3e7e5f0675ccd61062eb600207661cec6a185d454746b94372015e23e87acf0a217604 512) (bv #xee1b59c9d17e87e6e36ecc51122294597e8ffc93e248725a7237eace0b5113b19d5accce77b9b02165442f77e15d6db969f72d371b3a07cb97b9b2bc2562a4a6 512)) #((bv #x4ff91f0050aae62d37e00560079ff79c4305560a96fb44fcc4623760445673610a72f5c0d8610a3223f8f5b46f156f98825f14cde725f9a232fbd99e26c07516 512) (bv #x691b3070cf38c5e09591fa75601a9d54a43b4ea3d6bb12e6458e2d9440850e200e89e2cbe1d96a3836efc8aafd413912b108d64fd8c743b8c504a76ca10b8aec 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1edcb4133293c208fb740f3284bab8d3605d61a1acfb1652456ce698bb3e7e5f0675ccd61062eb600207661cec6a185d454746b94372015e23e87acf0a217604 512) (bv #xee1b59c9d17e87e6e36ecc51122294597e8ffc93e248725a7237eace0b5113b19d5accce77b9b02165442f77e15d6db969f72d371b3a07cb97b9b2bc2562a4a6 512))
Spec Produced:
(bv #xbba22d8b2f841aaa 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4ff91f0050aae62d37e00560079ff79c4305560a96fb44fcc4623760445673610a72f5c0d8610a3223f8f5b46f156f98825f14cde725f9a232fbd99e26c07516 512) (bv #x691b3070cf38c5e09591fa75601a9d54a43b4ea3d6bb12e6458e2d9440850e200e89e2cbe1d96a3836efc8aafd413912b108d64fd8c743b8c504a76ca10b8aec 512))
Spec Produced:
(bv #xf800810ac7cc0002 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$46 sym_bv$47)

invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_318

base_318_grammar.rkt
/tmp/base_318_grammar.rkt
Writing [{ 
"name": "base_318" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_318_spec.JSON
rm: cannot remove '/tmp/base_318_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvmul', 'sign-extend', 'zero-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvmul', 'sign-extend', 'zero-extend']
DSL Ops ['bveq']
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Pruning _mm512_broadcastmb_epi64 as it has an argument of size 8 which is smaller than 512
Pruning _mm512_cvtepu16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepu32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_cvtepu8_epi64 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 11 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_madd52lo_epu64 with score: 5 belonging to target agnostic class _mm512_madd52lo_epu64
Adding:  _mm512_madd52hi_epu64 with score: 5 belonging to target agnostic class _mm512_madd52lo_epu64
Adding:  _mm512_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_mullo_epi64 with score: 6 belonging to target agnostic class _mm_mulhi_epu16
Adding:  _mm512_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_318_spec.JSON /tmp/base_318_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_318 ... 

Grammar:
#<procedure:base_318>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0cfb8976061a2f74af4f5b554ad60ef2dbc203bf0278f61508af9650d8b7177ca8a2b030d7def87f70d71045429bdc9c28ebbe18e7cab5b7d4aaa208732b7a82 512) (bv #xacffcc382e5b342bffe8b6c4049c3a43cefe476cfff2da70bb7780a84e8516f908bcd0a5abde23a3eaf3a395f4ac87f5111aca31b8c3d1429ac17101840d0613 512))
(vec-mul (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #xc04fc1460e45887ced6eaa3bf8e0bd56d036c2ffa1538b308645f0e981867f9cca1b59d0421395dd5baf2231d950654ca350c7b33302402e92875a35d1b323a6 512)
invoke-spec-lane with env: #((bv #x0cfb8976061a2f74af4f5b554ad60ef2dbc203bf0278f61508af9650d8b7177ca8a2b030d7def87f70d71045429bdc9c28ebbe18e7cab5b7d4aaa208732b7a82 512) (bv #xacffcc382e5b342bffe8b6c4049c3a43cefe476cfff2da70bb7780a84e8516f908bcd0a5abde23a3eaf3a395f4ac87f5111aca31b8c3d1429ac17101840d0613 512))
Concrete counter examples:
(#((bv #x0cfb8976061a2f74af4f5b554ad60ef2dbc203bf0278f61508af9650d8b7177ca8a2b030d7def87f70d71045429bdc9c28ebbe18e7cab5b7d4aaa208732b7a82 512) (bv #xacffcc382e5b342bffe8b6c4049c3a43cefe476cfff2da70bb7780a84e8516f908bcd0a5abde23a3eaf3a395f4ac87f5111aca31b8c3d1429ac17101840d0613 512)) #((bv #xf0f3a01598c1edc10920cffb342f7ee021e2a298762413bf1d472d9e0c70cb28de8cf926bba2ed90875bff20a67b04d33d6759efd89611442ed2bcdc756840c6 512) (bv #xe3cc234d76faa1fe6ce2fa667adc6c12a8ba510a6f6ee8e3597a1d7e7471bc951c518bcff7085a6871fc5e27cf5bf1885e66a55a9eb8ae0a4109f717d3882cbc 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0cfb8976061a2f74af4f5b554ad60ef2dbc203bf0278f61508af9650d8b7177ca8a2b030d7def87f70d71045429bdc9c28ebbe18e7cab5b7d4aaa208732b7a82 512) (bv #xacffcc382e5b342bffe8b6c4049c3a43cefe476cfff2da70bb7780a84e8516f908bcd0a5abde23a3eaf3a395f4ac87f5111aca31b8c3d1429ac17101840d0613 512))
Spec Produced:
(bv #x92875a35d1b323a6 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf0f3a01598c1edc10920cffb342f7ee021e2a298762413bf1d472d9e0c70cb28de8cf926bba2ed90875bff20a67b04d33d6759efd89611442ed2bcdc756840c6 512) (bv #xe3cc234d76faa1fe6ce2fa667adc6c12a8ba510a6f6ee8e3597a1d7e7471bc951c518bcff7085a6871fc5e27cf5bf1885e66a55a9eb8ae0a4109f717d3882cbc 512))
Spec Produced:
(bv #x54eebea3bee19968 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$48 sym_bv$49)

invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-mul '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)
Synthesis step completed!
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (bufferrm: cannot remove '/tmp/base_8255_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['sign-extend']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['sign-extend']
DSL Ops ['bveq']
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 256
Prunning Based of non-immediate usage pruned 5 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_broadcast_i64x4 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi64 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6
 #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_8255

base_8255_grammar.rkt
/tmp/base_8255_grammar.rkt
Writing [{ 
"name": "base_8255" , 
"semantics": [ "(extract sign-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8255_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8255_spec.JSON /tmp/base_8255_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8255 ... 

Grammar:
#<procedure:base_8255>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb2f54fc2d81b255eecd2e23881d40a7c0d2613d4831ca4d3149c9ee70e7ccdf5 256))
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xffffffffb2f54fc2ffffffffd81b255effffffffecd2e238ffffffff81d40a7c000000000d2613d4ffffffff831ca4d300000000149c9ee7000000000e7ccdf5 512)
invoke-spec-lane with env: #((bv #xb2f54fc2d81b255eecd2e23881d40a7c0d2613d4831ca4d3149c9ee70e7ccdf5 256))
Concrete counter examples:
(#((bv #xb2f54fc2d81b255eecd2e23881d40a7c0d2613d4831ca4d3149c9ee70e7ccdf5 256)) #((bv #xbb86f5c1b97d0798cc5f2f1f389200a134c98a5be1ba12003a48e316c4f85b1a 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb2f54fc2d81b255eecd2e23881d40a7c0d2613d4831ca4d3149c9ee70e7ccdf5 256))
Spec Produced:
(bv #x000000000e7ccdf5 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xbb86f5c1b97d0798cc5f2f1f389200a134c98a5be1ba12003a48e316c4f85b1a 256))
Spec Produced:
(bv #xffffffffc4f85b1a 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$50)

invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int64x8 '(buf int32 256))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32rm: cannot remove '/tmp/base_7313_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 8
 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
get-expr-grammar with base_name: base_7313

base_7313_grammar.rkt
/tmp/base_7313_grammar.rkt
Writing [{ 
"name": "base_7313" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_32"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7313_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7313_spec.JSON /tmp/base_7313_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_7313 ... 

Grammar:
#<procedure:base_7313>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xcd5b39f3 32))
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Spec result
(bv #xcd5b39f3cd5b39f3cd5b39f3cd5b39f3cd5b39f3cd5b39f3cd5b39f3cd5b39f3 256)
invoke-spec-lane with env: #((bv #xcd5b39f3 32))
Concrete counter examples:
(#((bv #xcd5b39f3 32)) #((bv #x0ce201b5 32)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xcd5b39f3 32))
Spec Produced:
(bv #xcd5b39f3 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0ce201b5 32))
Spec Produced:
(bv #x0ce201b5 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$51)

invoke-spec-lane with env: #(sym_bv$51)
invoke-spec-lane with env: #(sym_bv$51)
invoke-spec-lane with env: #(sym_bv$51)
invoke-spec-lane with env: #(sym_bv$51)
invoke-spec-lane with env: #(sym_bv$51)
invoke-spec-lane with env: #(sym_bv$51)
invoke-spec-lane with env: #(sym_bv$51)
invoke-spec-lane with env: #(sym_bv$51)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 '(buf int32 32))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dslrm: cannot remove '/tmp/base_8353_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8353

base_8353_grammar.rkt
/tmp/base_8353_grammar.rkt
Writing [{ 
"name": "base_8353" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 64]] 
}
] to file /tmp/base_8353_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8353_spec.JSON /tmp/base_8353_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8353 ... 

Grammar:
#<procedure:base_8353>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000000000000001 64) #f))
Spec result
(bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000000000000001 64) #f))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-immrm: cannot remove '/tmp/base_7749_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_7749

base_7749_grammar.rkt
/tmp/base_7749_grammar.rkt
Writing [{ 
"name": "base_7749" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1073741823, 64]] 
}
] to file /tmp/base_7749_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7749_spec.JSON /tmp/base_7749_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_7749 ... 

Grammar:
#<procedure:base_7749>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Spec result
(bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000003fffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000003fffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000003fffffff 64) #t))
#(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_1663

base_1663_grammar.rkt
/tmp/base_1663_grammar.rkt
Writing [{ 
"name": "base_1663" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1663_spec.JSON
rm: cannot remove '/tmp/base_1663_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvand']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvand']
DSL Ops ['bveq']
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_andnot_epi64 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_si512 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_epi32 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_and_si512 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi64 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi32 with score: 3 belonging to target agnostic class _mm256_and_si256
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 10

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1663_spec.JSON /tmp/base_1663_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1663 ... 

Grammar:
#<procedure:base_1663>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x09addeb049871f350717ba5e0a4ea6428be48208772a8cbe7cc5a7d447cb5d2dff04af119c1c1dec4e15f53437298024231b1c84860fc6c7ba2a2b8551222b27 512) (bv #xbd9b646bf9affe172b839075adc979091379da893b1a8d25df96c0080305341ae6aab3877f590b86025d645a72769c0923cc889ff95b4e3071ce8f67fd57ba26 512))
(vec-bwand (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x0989442049871e15030390540848200003608208330a8c245c84800003011408e600a3011c180984021564103220800023080884800b4600300a0b0551022a26 512)
invoke-spec-lane with env: #((bv #x09addeb049871f350717ba5e0a4ea6428be48208772a8cbe7cc5a7d447cb5d2dff04af119c1c1dec4e15f53437298024231b1c84860fc6c7ba2a2b8551222b27 512) (bv #xbd9b646bf9affe172b839075adc979091379da893b1a8d25df96c0080305341ae6aab3877f590b86025d645a72769c0923cc889ff95b4e3071ce8f67fd57ba26 512))
Concrete counter examples:
(#((bv #x09addeb049871f350717ba5e0a4ea6428be48208772a8cbe7cc5a7d447cb5d2dff04af119c1c1dec4e15f53437298024231b1c84860fc6c7ba2a2b8551222b27 512) (bv #xbd9b646bf9affe172b839075adc979091379da893b1a8d25df96c0080305341ae6aab3877f590b86025d645a72769c0923cc889ff95b4e3071ce8f67fd57ba26 512)) #((bv #x516b9c9722a7fbeb88a039f7e3df8f52c9f647de3758be7e196f1cb837e9600061ff32e3fdd04d7a32584f03101eb0abac54b491c966d8dfef0dc7ee1e337211 512) (bv #xe54d5d4f7bf36580cad5b32d6bf7fa27d33a5079763a1fdbbc5addcfedcc2957feb58d78ee86518e7c2c938c00ab1669145c98c7800de7aa6ba1168ee3cd6453 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x09addeb049871f350717ba5e0a4ea6428be48208772a8cbe7cc5a7d447cb5d2dff04af119c1c1dec4e15f53437298024231b1c84860fc6c7ba2a2b8551222b27 512) (bv #xbd9b646bf9affe172b839075adc979091379da893b1a8d25df96c0080305341ae6aab3877f590b86025d645a72769c0923cc889ff95b4e3071ce8f67fd57ba26 512))
Spec Produced:
(bv #x300a0b0551022a26 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x516b9c9722a7fbeb88a039f7e3df8f52c9f647de3758be7e196f1cb837e9600061ff32e3fdd04d7a32584f03101eb0abac54b491c966d8dfef0dc7ee1e337211 512) (bv #xe54d5d4f7bf36580cad5b32d6bf7fa27d33a5079763a1fdbbc5addcfedcc2957feb58d78ee86518e7c2c938c00ab1669145c98c7800de7aa6ba1168ee3cd6453 512))
Spec Produced:
(bv #x6b01068e02016011 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$52 sym_bv$53)

invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-bwand '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_1653

base_1653_grammar.rkt
/tmp/base_1653_grammar.rkt
Writing [{ 
"name": "base_1653" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 64]] 
}
] to file /tmp/base_1653_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1653_spec.JSON /tmp/base_1653_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1653 ... 

Grammar:
#<procedure:base_1653>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000000000000001 64) #t))
Spec result
(bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000000000000001 64) #t))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffffrm: cannot remove '/tmp/base_200_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_200

base_200_grammar.rkt
/tmp/base_200_grammar.rkt
Writing [{ 
"name": "base_200" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[30, 64]] 
}
] to file /tmp/base_200_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_200_spec.JSON /tmp/base_200_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_200 ... 

Grammar:
#<procedure:base_200>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000000000001e 64) #f))
Spec result
(bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000000000001e 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000000000001e 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000000000001e 64) #f))
#(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_6477

base_6477_grammar.rkt
/tmp/base_6477_grammar.rkt
Writing [{ 
"name": "base_6477" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[2147483647, 64]] 
}
] to file /tmp/base_6477_spec.JSON
rm: cannot remove '/tmp/base_6477_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6477_spec.JSON /tmp/base_6477_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6477 ... 

Grammar:
#<procedure:base_6477>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Spec result
(bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000007fffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000007fffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000007fffffff 64) #t))
#(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dslrm: cannot remove '/tmp/base_4094_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4094

base_4094_grammar.rkt
/tmp/base_4094_grammar.rkt
Writing [{ 
"name": "base_4094" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[-2147483648, 64]] 
}
] to file /tmp/base_4094_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4094_spec.JSON /tmp/base_4094_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4094 ... 

Grammar:
#<procedure:base_4094>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Spec result
(bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffffffff80000000 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffffffff80000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #xffffffff80000000 64) #t))
#(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #rm: cannot remove '/tmp/base_8123_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bvand']
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops ['bvand']
DSL Ops ['bveq']
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_andnot_si256 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm256_and_si256 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 9
x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_8123

base_8123_grammar.rkt
/tmp/base_8123_grammar.rkt
Writing [{ 
"name": "base_8123" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8123_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8123_spec.JSON /tmp/base_8123_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8123 ... 

Grammar:
#<procedure:base_8123>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x90f4fc9393ec237e5d87e20a87dd648bad6e2e382b21e7d65d8624ef31d28c08 256) (bv #x3b70ef00d69d542bb22f904ab68cc9ea9bf330686a1eaf719d92675f9d23fcf0 256))
(vec-bwand (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x1070ec00928c002a1007800a868c408a896220282a00a7501d82244f11028c00 256)
invoke-spec-lane with env: #((bv #x90f4fc9393ec237e5d87e20a87dd648bad6e2e382b21e7d65d8624ef31d28c08 256) (bv #x3b70ef00d69d542bb22f904ab68cc9ea9bf330686a1eaf719d92675f9d23fcf0 256))
Concrete counter examples:
(#((bv #x90f4fc9393ec237e5d87e20a87dd648bad6e2e382b21e7d65d8624ef31d28c08 256) (bv #x3b70ef00d69d542bb22f904ab68cc9ea9bf330686a1eaf719d92675f9d23fcf0 256)) #((bv #x58eafae054414a37881908c205a3d2a9b5b200ebbd119b32234b2880eda6a0aarm: cannot remove '/tmp/base_3842_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bveq', 'if']
DSL Ops ['bveq']
Ops Overlaps? True
Has inputs and outputs defined
Spec Ops ['bveq', 'if']
DSL Ops ['bveq']
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops ['bveq', 'if']
DSL Ops ['bveq']
Ops Overlaps? True
Has inputs and outputs defined
Spec Ops ['bveq', 'if']
DSL Ops ['bveq']
--------------------------------------------------
_mm_mask_blend_epi16 Supports Input Prec: False
_mm_mask_blend_epi16 Supports Input Length: True
_mm_mask_blend_epi16 Supports Output prec False
_mm_mask_blend_epi16 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_maskz_mov_epi32 Supports Input Prec: True
_mm256_maskz_mov_epi32 Supports Input Length: True
_mm256_maskz_mov_epi32 Supports Output prec True
_mm256_maskz_mov_epi32 Supports Output Length: True
--------------------------------------------------
 _mm256_maskz_mov_epi32
In_vectsize:  256
out_vectsize:  256
------> v0	| Symbolic Bitvector 8
------> #x000000000000000000...	| Constant Bitvector 256
------> v2	| Symbolic Bitvector 256
------> num_3	| Integer 256
------> prec_i_o	| Precision 32 bits , Is Input  = True, Is Output = True
--------------------------------------------------
_mm256_maskz_mov_epi8 Supports Input Prec: False
_mm256_maskz_mov_epi8 Supports Input Length: True
_mm256_maskz_mov_epi8 Supports Output prec False
_mm256_maskz_mov_epi8 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm_mask_mov_epi16 Supports Input Prec: False
_mm_mask_mov_epi16 Supports Input Length: True
_mm_mask_mov_epi16 Supports Output prec False
_mm_mask_mov_epi16 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_mask_mov_epi64 Supports Input Prec: False
_mm256_mask_mov_epi64 Supports Input Length: True
_mm256_mask_mov_epi64 Supports Output prec False
_mm256_mask_mov_epi64 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm512_mask_blend_epi64 Supports Input Prec: False
_mm512_mask_blend_epi64 Supports Input Length: True
_mm512_mask_blend_epi64 Supports Output prec False
_mm512_mask_blend_epi64 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm512_mask_blend_epi8 Supports Input Prec: False
_mm512_mask_blend_epi8 Supports Input Length: False
_mm512_mask_blend_epi8 Supports Output prec False
_mm512_mask_blend_epi8 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_mask_blend_epi64 Supports Input Prec: False
_mm256_mask_blend_epi64 Supports Input Length: True
_mm256_mask_blend_epi64 Supports Output prec False
_mm256_mask_blend_epi64 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm256_maskz_mov_epi16 Supports Input Prec: False
_mm256_maskz_mov_epi16 Supports Input Length: True
_mm256_maskz_mov_epi16 Supports Output prec False
_mm256_maskz_mov_epi16 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm_maskz_mov_epi64 Supports Input Prec: False
_mm_maskz_mov_epi64 Supports Input Length: True
_mm_maskz_mov_epi64 Supports Output prec False
_mm_maskz_mov_epi64 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm512_maskz_mov_epi8 Supports Input Prec: False
_mm512_maskz_mov_epi8 Supports Input Length: False
_mm512_maskz_mov_epi8 Supports Output prec False
_mm512_maskz_mov_epi8 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_mask_mov_epi8 Supports Input Prec: False
_mm_mask_mov_epi8 Supports Input Length: False
_mm_mask_mov_epi8 Supports Output prec False
_mm_mask_mov_epi8 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_mask_mov_epi32 Supports Input Prec: True
_mm256_mask_mov_epi32 Supports Input Length: True
_mm256_mask_mov_epi32 Supports Output prec True
_mm256_mask_mov_epi32 Supports Output Length: True
--------------------------------------------------
 _mm256_mask_mov_epi32
In_vectsize:  256
out_vectsize:  256
------> v0	| Symbolic Bitvector 8
------> v1	| Symbolic Bitvector 256
------> v2	| Symbolic Bitvector 256
------> num_3	| Integer 256
------> prec_i_o	| Precision 32 bits , Is Input  = True, Is Output = True
--------------------------------------------------
_mm256_maskz_mov_epi64 Supports Input Prec: False
_mm256_maskz_mov_epi64 Supports Input Length: True
_mm256_maskz_mov_epi64 Supports Output prec False
_mm256_maskz_mov_epi64 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm512_mask_mov_epi8 Supports Input Prec: False
_mm512_mask_mov_epi8 Supports Input Length: False
_mm512_mask_mov_epi8 Supports Output prec False
_mm512_mask_mov_epi8 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_mask_blend_epi32 Supports Input Prec: True
_mm256_mask_blend_epi32 Supports Input Length: True
_mm256_mask_blend_epi32 Supports Output prec True
_mm256_mask_blend_epi32 Supports Output Length: True
--------------------------------------------------
 _mm256_mask_blend_epi32
In_vectsize:  256
out_vectsize:  256
------> v0	| Symbolic Bitvector 8
------> v1	| Symbolic Bitvector 256
------> v2	| Symbolic Bitvector 256
------> num_3	| Integer 256
------> prec_i_o	| Precision 32 bits , Is Input  = True, Is Output = True
--------------------------------------------------
_mm512_mask_blend_epi16 Supports Input Prec: False
_mm512_mask_blend_epi16 Supports Input Length: False
_mm512_mask_blend_epi16 Supports Output prec False
_mm512_mask_blend_epi16 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_mask_blend_epi8 Supports Input Prec: False
_mm256_mask_blend_epi8 Supports Input Length: True
_mm256_mask_blend_epi8 Supports Output prec False
_mm256_mask_blend_epi8 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm256_blend_epi32 Supports Input Prec: True
_mm256_blend_epi32 Supports Input Length: True
_mm256_blend_epi32 Supports Output prec True
_mm256_blend_epi32 Supports Output Length: True
--------------------------------------------------
 _mm256_blend_epi32
In_vectsize:  256
out_vectsize:  256
------> v0	| Symbolic Bitvector 8
------> v1	| Symbolic Bitvector 256
------> v2	| Symbolic Bitvector 256
------> num_3	| Integer 256
------> prec_i_o	| Precision 32 bits , Is Input  = True, Is Output = True
--------------------------------------------------
_mm_maskz_mov_epi16 Supports Input Prec: False
_mm_maskz_mov_epi16 Supports Input Length: True
_mm_maskz_mov_epi16 Supports Output prec False
_mm_maskz_mov_epi16 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_maskz_mov_epi32 Supports Input Prec: True
_mm_maskz_mov_epi32 Supports Input Length: True
_mm_maskz_mov_epi32 Supports Output prec True
_mm_maskz_mov_epi32 Supports Output Length: False
--------------------------------------------------
 _mm_maskz_mov_epi32
In_vectsize:  128
out_vectsize:  128
------> v0	| Symbolic Bitvector 8
------> #x000000000000000000...	| Constant Bitvector 128
------> v2	| Symbolic Bitvector 128
------> num_3	| Integer 128
------> prec_i_o	| Precision 32 bits , Is Input  = True, Is Output = True
--------------------------------------------------
_mm_mask_blend_epi32 Supports Input Prec: True
_mm_mask_blend_epi32 Supports Input Length: True
_mm_mask_blend_epi32 Supports Output prec True
_mm_mask_blend_epi32 Supports Output Length: False
--------------------------------------------------
 _mm_mask_blend_epi32
In_vectsize:  128
out_vectsize:  128
------> v0	| Symbolic Bitvector 8
------> v1	| Symbolic Bitvector 128
------> v2	| Symbolic Bitvector 128
------> num_3	| Integer 128
------> prec_i_o	| Precision 32 bits , Is Input  = True, Is Output = True
--------------------------------------------------
_mm256_mask_mov_epi8 Supports Input Prec: False
_mm256_mask_mov_epi8 Supports Input Length: True
_mm256_mask_mov_epi8 Supports Output prec False
_mm256_mask_mov_epi8 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm512_mask_blend_epi32 Supports Input Prec: True
_mm512_mask_blend_epi32 Supports Input Length: False
_mm512_mask_blend_epi32 Supports Output prec True
_mm512_mask_blend_epi32 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm512_maskz_mov_epi16 Supports Input Prec: False
_mm512_maskz_mov_epi16 Supports Input Length: False
_mm512_maskz_mov_epi16 Supports Output prec False
_mm512_maskz_mov_epi16 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_mask_blend_epi16 Supports Input Prec: False
_mm256_mask_blend_epi16 Supports Input Length: True
_mm256_mask_blend_epi16 Supports Output prec False
_mm256_mask_blend_epi16 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm512_maskz_mov_epi64 Supports Input Prec: False
_mm512_maskz_mov_epi64 Supports Input Length: True
_mm512_maskz_mov_epi64 Supports Output prec False
_mm512_maskz_mov_epi64 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_mask_blend_epi64 Supports Input Prec: False
_mm_mask_blend_epi64 Supports Input Length: True
_mm_mask_blend_epi64 Supports Output prec False
_mm_mask_blend_epi64 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm512_mask_mov_epi16 Supports Input Prec: False
_mm512_mask_mov_epi16 Supports Input Length: False
_mm512_mask_mov_epi16 Supports Output prec False
_mm512_mask_mov_epi16 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_mask_mov_epi64 Supports Input Prec: False
_mm_mask_mov_epi64 Supports Input Length: True
_mm_mask_mov_epi64 Supports Output prec False
_mm_mask_mov_epi64 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_mask_mov_epi32 Supports Input Prec: True
_mm_mask_mov_epi32 Supports Input Length: True
_mm_mask_mov_epi32 Supports Output prec True
_mm_mask_mov_epi32 Supports Output Length: False
--------------------------------------------------
 _mm_mask_mov_epi32
In_vectsize:  128
out_vectsize:  128
------> v0	| Symbolic Bitvector 8
------> v1	| Symbolic Bitvector 128
------> v2	| Symbolic Bitvector 128
------> num_3	| Integer 128
------> prec_i_o	| Precision 32 bits , Is Input  = True, Is Output = True
--------------------------------------------------
_mm512_mask_mov_epi64 Supports Input Prec: False
_mm512_mask_mov_epi64 Supports Input Length: True
_mm512_mask_mov_epi64 Supports Output prec False
_mm512_mask_mov_epi64 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_mask_blend_epi8 Supports Input Prec: False
_mm_mask_blend_epi8 Supports Input Length: False
_mm_mask_blend_epi8 Supports Output prec False
_mm_mask_blend_epi8 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_blend_epi16 Supports Input Prec: False
_mm_blend_epi16 Supports Input Length: True
_mm_blend_epi16 Supports Output prec False
_mm_blend_epi16 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm512_maskz_mov_epi32 Supports Input Prec: True
_mm512_maskz_mov_epi32 Supports Input Length: False
_mm512_maskz_mov_epi32 Supports Output prec True
_mm512_maskz_mov_epi32 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm256_mask_mov_epi16 Supports Input Prec: False
_mm256_mask_mov_epi16 Supports Input Length: True
_mm256_mask_mov_epi16 Supports Output prec False
_mm256_mask_mov_epi16 Supports Output Length: True
--------------------------------------------------
--------------------------------------------------
_mm_blend_epi32 Supports Input Prec: True
_mm_blend_epi32 Supports Input Length: False
_mm_blend_epi32 Supports Output prec True
_mm_blend_epi32 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm512_mask_mov_epi32 Supports Input Prec: True
_mm512_mask_mov_epi32 Supports Input Length: False
_mm512_mask_mov_epi32 Supports Output prec True
_mm512_mask_mov_epi32 Supports Output Length: False
--------------------------------------------------
--------------------------------------------------
_mm_maskz_mov_epi8 Supports Input Prec: False
_mm_maskz_mov_epi8 Supports Input Length: False
_mm_maskz_mov_epi8 Supports Output prec False
_mm_maskz_mov_epi8 Supports Output Length: False
--------------------------------------------------
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 4 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi8 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi64 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_srav_epi32 with score: 6 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cmpgt_epi32 with score: 5 belonging to target agnostic class _mm_cmpgt_pi32
Adding:  _mm256_blend_epi32 with score: 5 belonging to target agnostic class _mm256_movm_epi64
Adding:  _mm256_sign_epi32 with score: 5 belonging to target agnostic class _mm256_sign_epi8
Adding:  _mm256_cmpeq_epi32 with score: 6 belonging to target agnostic class _mm_cmpeq_epi32
Adding:  _mm256_set1_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 18
Grammar Number of Shuffle DSL Clauses:	 14
Grammar Number of DSL Compute Clauses:	 17
 256) (bv #xcd2cc203878845dfe936b42f4cf195c5f86837e84ee620821df0d0f20a6bafbd 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x90f4fc9393ec237e5d87e20a87dd648bad6e2e382b21e7d65d8624ef31d28c08 256) (bv #x3b70ef00d69d542bb22f904ab68cc9ea9bf330686a1eaf719d92675f9d23fcf0 256))
Spec Produced:
(bv #x11028c00 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x58eafae054414a37881908c205a3d2a9b5b200ebbd119b32234b2880eda6a0aa 256) (bv #xcd2cc203878845dfe936b42f4cf195c5f86837e84ee620821df0d0f20a6bafbd 256))
Spec Produced:
(bv #x0822a0a8 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$54 sym_bv$55)

invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-bwand '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
get-expr-grammar with base_name: base_3842

base_3842_grammar.rkt
/tmp/base_3842_grammar.rkt
Writing [{ 
"name": "base_3842" , 
"semantics": [ "(bveq if cond)"] , 
"input_shapes": [[1,8], [1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [1, 32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_8", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3842_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3842_spec.JSON /tmp/base_3842_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3842 ... 

Grammar:
#<procedure:base_3842>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256))
(vec-if (buffer #<procedure:buffer-fn> 'uint1 8) (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x2a2a7a705573808855fce35dfb42fa1c112948c6a87801ed3d863c97f08d5750 256)
invoke-spec-lane with env: #((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256))
Concrete counter examples:
(#((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256)) #((bv #x23 8) (bv #x75e83d0c48bbb69dbd72a3a47b908dd2b0d4c62576e49ac30f91fc9f0df46cb4 256) (bv #xcbbd219e871af5d61d7e5079da0db418b261a2b373ac1ed6d09fcc1030436af0 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256))
Spec Produced:
(bv #xf08d5750 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x23 8) (bv #x75e83d0c48bbb69dbd72a3a47b908dd2b0d4c62576e49ac30f91fc9f0df46cb4 256) (bv #xcbbd219e871af5d61d7e5079da0db418b261a2b373ac1ed6d09fcc1030436af0 256))
Spec Produced:
(bv #x0df46cb4 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x2 4)) 256 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x2 4)) 256 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$56 sym_bv$57 sym_bv$58)

invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
invoke-spec-lane with env: #(sym_bv$56 sym_bv$57 sym_bv$58)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$59 sym_bv$60 sym_bv$61)

invoke-spec with env: #(sym_bv$59 sym_bv$60 sym_bv$61)
(vec-if (buffer #<procedure:buffer-fn> 'uint1 8) (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bveq (bv #b1 1) (extract 7 7 sym_bv$59)) (extract 255 224 sym_bv$60) (extract 255 224 sym_bv$61)) (ite (bveq (bv #b1 1) (extract 6 6 sym_bv$59)) (extract 223 192 sym_bv$60) (extract 223 192 sym_bv$61))) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$59 (bv #x00 8)]
 [sym_bv$60 (bv #x0000000000000000fffffffffffffffefffffffffffffffefffffffffffffffe 256)]
 [sym_bv$61 (bv #x8000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #x00 8) (bv #x0000000000000000fffffffffffffffefffffffffffffffefffffffffffffffe 256) (bv #x8000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x00 8) (bv #x0000000000000000fffffffffffffffefffffffffffffffefffffffffffffffe 256) (bv #x8000000000000000000000000000000000000000000000000000000000000000 256))
(vec-if (buffer #<procedure:buffer-fn> 'uint1 8) (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x8000000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x00 8) (bv #x0000000000000000fffffffffffffffefffffffffffffffefffffffffffffffe 256) (bv #x8000000000000000000000000000000000000000000000000000000000000000 256))
(vec-if (buffer #<procedure:buffer-fn> 'uint1 8) (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256))
(vec-if (buffer #<procedure:buffer-fn> 'uint1 8) (buffer #<procedurerm: cannot remove '/tmp/base_8925_spec.JSON': No such file or directory
:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x2a2a7a705573808855fce35dfb42fa1c112948c6a87801ed3d863c97f08d5750 256)
invoke-spec-lane with env: #((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256))
Concrete counter examples:
(#((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256)) #((bv #x23 8) (bv #x75e83d0c48bbb69dbd72a3a47b908dd2b0d4c62576e49ac30f91fc9f0df46cb4 256) (bv #xcbbd219e871af5d61d7e5079da0db418b261a2b373ac1ed6d09fcc1030436af0 256)) #((bv #x00 8) (bv #x0000000000000000fffffffffffffffefffffffffffffffefffffffffffffffe 256) (bv #x8000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x48 8) (bv #x8ac0894755738088537a335ff9ba7e38112948c6e38c85629e7cfe0aac2fcc94 256) (bv #x2a2a7a702ae5c19255fce35dfb42fa1c10b5efbea87801ed3d863c97f08d5750 256))
Spec Produced:
(bv #xf08d5750 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x23 8) (bv #x75e83d0c48bbb69dbd72a3a47b908dd2b0d4c62576e49ac30f91fc9f0df46cb4 256) (bv #xcbbd219e871af5d61d7e5079da0db418b261a2b373ac1ed6d09fcc1030436af0 256))
Spec Produced:
(bv #x0df46cb4 32)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x00 8) (bv #x0000000000000000fffffffffffffffefffffffffffffffefffffffffffffffe 256) (bv #x8000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #x80000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$62 sym_bv$63 sym_bv$64)

invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63 sym_bv$64)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)
Synthesis step completed!
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8925

base_8925_grammar.rkt
/tmp/base_8925_grammar.rkt
Writing [{ 
"name": "base_8925" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 32]] 
}
] to file /tmp/base_8925_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8925_spec.JSON /tmp/base_8925_grammar.rkt 8 0Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 8
rm: cannot remove '/tmp/base_8413_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 8

Generated Grammar File
Dynamically importing from base_8925 ... 

Grammar:
#<procedure:base_8925>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00000001 32) #t))
Spec result
(bv #x0000000100000001000000010000000100000001000000010000000100000001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00000001 32) #t))
#(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8413

base_8413_grammar.rkt
/tmp/base_8413_grammar.rkt
Writing [{ 
"name": "base_8413" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[0, 32]] 
}
] to file /tmp/base_8413_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8413_spec.JSON /tmp/base_8413_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8413 ... 

Grammar:
#<procedure:base_8413>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00000000 32) #t))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00000000 32) #t))
#(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
        Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 8
     32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5508

base_5508_grammar.rkt
/tmp/base_5508_grammar.rkt
Writing [{ 
"name": "base_5508" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[32767, 32]] 
}
] to file /tmp/base_5508_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5508_spec.JSON /tmp/base_5508_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5508 ... 

Grammar:
#<procedure:base_5508>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00007fff 32) #t))
Spec result
(bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00007fff 32) #t))
#(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 8
 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4051

base_4051_grammar.rkt
/tmp/base_4051_grammar.rkt
Writing [{ 
"name": "base_4051" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[-32768, 32]] 
}
] to file /tmp/base_4051_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4051_spec.JSON /tmp/base_4051_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4051 ... 

Grammar:
#<procedure:base_4051>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #xffff8000 32) #t))
Spec result
(bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #xffff8000 32) #t))
#(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
        rm: cannot remove '/tmp/base_8545_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 21
     64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8545

base_8545_grammar.rkt
/tmp/base_8545_grammar.rkt
Writing [{ 
"name": "base_8545" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[255, 16]] 
}
] to file /tmp/base_8545_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8545_spec.JSON /tmp/base_8545_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8545 ... 

Grammar:
#<procedure:base_8545>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00ff 16) #t))
Spec result
(bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00ff 16) #t))
#(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              rm: cannot remove '/tmp/base_4503_spec.JSON': No such file or directory
Going Over _mm256_movm_epi64
Has inputs and outputs defined
Config Overlaps? True
Spec Ops []
DSL Ops ['bveq']
Ops Overlaps? False
Has inputs and outputs defined
Spec Ops []
DSL Ops ['bveq']
EARLY RETURN FROM REDUCE
Adding:  _mm_max_epi16 with score: 3 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 21
512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4503

base_4503_grammar.rkt
/tmp/base_4503_grammar.rkt
Writing [{ 
"name": "base_4503" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[0, 16]] 
}
] to file /tmp/base_4503_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4503_spec.JSON /tmp/base_4503_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4503 ... 

Grammar:
#<procedure:base_4503>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000 16) #t))
Spec result
(bv #x00000000000000000000000000000000 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000000000000000000000000000000 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00000000000000000000000000000000 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000 16) #t))
#(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8))
========================================
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x04 8)) <8 x i1>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.9
; (reg 2) <8 x i32>
; (reg 6) <8 x i32>
; (reg 4) <8 x i1>
; (reg 1) <1 x i32>
; (reg 7) <1 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 5) <8 x i32>
; (reg 3) <1 x i32>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t373, 1, 8) aligned(8, 0)] if (uint1x8)t372))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t375, 1, 8) aligned(8, 0)] if (uint1x8)t374))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t376, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t379, 1, 8) aligned(8, 0)] if (uint1x8)t378))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t381, 1, 8) aligned(8, 0)] if (uint1x8)t380))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t382))), x8(32767)), x8(-32768))), x8((int16)t383)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t376 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t382 maps to reg_7
t383 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 59.591407seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 9

Optimized expression: (int16x8)hydride.node.9((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 10
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8))
========================================
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x04 8)) <8 x i1>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.10
; (reg 6) <8 x i32>
; (reg 2) <8 x i32>
; (reg 4) <8 x i1>
; (reg 1) <1 x i32>
; (reg 7) <1 x i32>
; (reg 8) <1 x i16>
; (reg 5) <8 x i32>
; (reg 0) <8 x i32>
; (reg 3) <1 x i32>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t386, 1, 8) aligned(8, 0)] if (uint1x8)t385))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t389, 1, 8) aligned(8, 0)] if (uint1x8)t388))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t391, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t394, 1, 8) aligned(8, 0)] if (uint1x8)t393))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t397, 1, 8) aligned(8, 0)] if (uint1x8)t396))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t399))), x8(32767)), x8(-32768))), x8((int16)t400)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t391 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t399 maps to reg_7
t400 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.478775seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 10

Optimized expression: (int16x8)hydride.node.10((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 11
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8))
========================================
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x04 8)) <8 x i1>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.11
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 4) <8 x i1>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 3) <1 x i32>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t403, 1, 8) aligned(8, 0)] if (uint1x8)t402))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t406, 1, 8) aligned(8, 0)] if (uint1x8)t405))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t408, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t411, 1, 8) aligned(8, 0)] if (uint1x8)t410))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t414, 1, 8) aligned(8, 0)] if (uint1x8)t413))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t416))), x8(32767)), x8(-32768))), x8((int16)t417)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t408 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t416 maps to reg_7
t417 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.252156seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 11

Optimized expression: (int16x8)hydride.node.11((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 12
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_11 from hydride_hash_11.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x04 8)) <8 x i1>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.12
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 4) <8 x i1>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 3) <1 x i32>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.12.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.12.rkt /tmp/test.ll
Storing synth log map synth_hash_12 to /tmp/hydride_hash_12.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_12 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_12.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t420, 1, 8) aligned(8, 0)] if (uint1x8)t419))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t423, 1, 8) aligned(8, 0)] if (uint1x8)t422))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t425, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t428, 1, 8) aligned(8, 0)] if (uint1x8)t427))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t431, 1, 8) aligned(8, 0)] if (uint1x8)t430))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t433))), x8(32767)), x8(-32768))), x8((int16)t434)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t425 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t433 maps to reg_7
t434 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.423447seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 12

Optimized expression: (int16x8)hydride.node.12((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 13
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_12 from hydride_hash_12.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8))
========================================
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x04 8)) <8 x i1>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.13
; (reg 6) <8 x i32>
; (reg 2) <8 x i32>
; (reg 4) <8 x i1>
; (reg 1) <1 x i32>
; (reg 7) <1 x i32>
; (reg 8) <1 x i16>
; (reg 5) <8 x i32>
; (reg 0) <8 x i32>
; (reg 3) <1 x i32>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.13.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.13.rkt /tmp/test.ll
Storing synth log map synth_hash_13 to /tmp/hydride_hash_13.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_13 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_13.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t437, 1, 8) aligned(8, 0)] if (uint1x8)t436))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t440, 1, 8) aligned(8, 0)] if (uint1x8)t439))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t442, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t445, 1, 8) aligned(8, 0)] if (uint1x8)t444))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t448, 1, 8) aligned(8, 0)] if (uint1x8)t447))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t450))), x8(32767)), x8(-32768))), x8((int16)t451)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t442 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t450 maps to reg_7
t451 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.519344seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 13

Optimized expression: (int16x8)hydride.node.13((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 14
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)))
Found previous hash!

Importing synth log map synth_hash_13 from hydride_hash_13.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x04 8)) <8 x i1>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.14
; (reg 0) <8 x i32>
; (reg 5) <8 x i32>
; (reg 8) <1 x i16>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 2) <8 x i32>
; (reg 6) <8 x i32>
; (reg 3) <1 x i32>
; (reg 4) <8 x i1>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.14.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.14.rkt /tmp/test.ll
Storing synth log map synth_hash_14 to /tmp/hydride_hash_14.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_14 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_14.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t454, 1, 8) aligned(8, 0)] if (uint1x8)t453))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t457, 1, 8) aligned(8, 0)] if (uint1x8)t456))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t459, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t462, 1, 8) aligned(8, 0)] if (uint1x8)t461))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t465, 1, 8) aligned(8, 0)] if (uint1x8)t464))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t467))), x8(32767)), x8(-32768))), x8((int16)t468)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t459 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t467 maps to reg_7
t468 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.467525seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 14

Optimized expression: (int16x8)hydride.node.14((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 15
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)))
Found previous hash!

Importing synth log map synth_hash_14 from hydride_hash_14.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x04 8)) <8 x i1>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.15
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 8) <1 x i16>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 5) <8 x i32>
; (reg 6) <8 x i32>
; (reg 3) <1 x i32>
; (reg 4) <8 x i1>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.15.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.15.rkt /tmp/test.ll
Storing synth log map synth_hash_15 to /tmp/hydride_hash_15.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_15 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_15.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t471, 1, 8) aligned(8, 0)] if (uint1x8)t470))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t474, 1, 8) aligned(8, 0)] if (uint1x8)t473))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t476, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t479, 1, 8) aligned(8, 0)] if (uint1x8)t478))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t482, 1, 8) aligned(8, 0)] if (uint1x8)t481))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t484))), x8(32767)), x8(-32768))), x8((int16)t485)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t476 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t484 maps to reg_7
t485 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.594517seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 15

Optimized expression: (int16x8)hydride.node.15((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 16
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)))
Found previous hash!

Importing synth log map synth_hash_15 from hydride_hash_15.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8))
========================================
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x04 8)) <8 x i1>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.16
; (reg 2) <8 x i32>
; (reg 0) <8 x i32>
; (reg 8) <1 x i16>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 3) <1 x i32>
; (reg 4) <8 x i1>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.16.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.16.rkt /tmp/test.ll
Storing synth log map synth_hash_16 to /tmp/hydride_hash_16.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_16 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_16.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t488, 1, 8) aligned(8, 0)] if (uint1x8)t487))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t491, 1, 8) aligned(8, 0)] if (uint1x8)t490))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t493, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t496, 1, 8) aligned(8, 0)] if (uint1x8)t495))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t499, 1, 8) aligned(8, 0)] if (uint1x8)t498))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t501))), x8(32767)), x8(-32768))), x8((int16)t502)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t493 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t501 maps to reg_7
t502 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.534451seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 16

Optimized expression: (int16x8)hydride.node.16((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 17
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Potentially new select lowering
New select instruction: select(x8(0 < output_shift), x8(1), x8(0))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 8) . (bv #x04 8)))
Found previous hash!

Importing synth log map synth_hash_16 from hydride_hash_16.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 0)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 0)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 1)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64 0 128) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x2 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_movm_epi64_dsl
 (reg (bv #x0 4))
 (reg (bv #x2 4))
 (reg (bv #x1 4))
 256
 32)
(_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32)
Cost
10
here
(#(struct:buffer #<procedure:buffer-fn> uint1 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(_mm256_movm_epi64_dsl
 (reg (bv #x04 8))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 256
 32)
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  512
  64
  0
  128)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   512
   64
   0
   128)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (buffer #<procedure:buffer-fn> 'uint1 8)
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm256_movm_epi64_dsl
  (reg (bv #x04 8))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  256
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (buffer #<procedure:buffer-fn> 'uint1 8)
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm256_movm_epi64_dsl
   (reg (bv #x04 8))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   256
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (buffer #<procedure:buffer-fn> 'uint1 8)
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm256_movm_epi64_dsl
    (reg (bv #x04 8))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    256
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (buffer #<procedure:buffer-fn> 'uint1 8)
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm256_movm_epi64_dsl
     (reg (bv #x04 8))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     256
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (buffer #<procedure:buffer-fn> 'uint1 8)
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm256_movm_epi64_dsl
      (reg (bv #x04 8))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      256
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (buffer #<procedure:buffer-fn> 'uint1 8)
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm256_movm_epi64_dsl
       (reg (bv #x04 8))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       256
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (buffer #<procedure:buffer-fn> 'uint1 8)
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm256_movm_epi64_dsl
        (reg (bv #x04 8))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        256
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm256_movm_epi64_dsl #(struct:reg (bv #x04 8)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm256_movm_epi64_dsl
         (reg (bv #x04 8))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (lit
          (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
         256
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (buffer #<procedure:buffer-fn> 'uint1 8)
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (bv #x04 8))
========================================
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x04 8)) <8 x i1>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.17
; (reg 5) <8 x i32>
; (reg 2) <8 x i32>
; (reg 8) <1 x i16>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 6) <8 x i32>
; (reg 0) <8 x i32>
; (reg 3) <1 x i32>
; (reg 4) <8 x i1>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm256_movm_epi64_dsl 
(reg 4)  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <8 x i32>
  (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <8 x i32>
  256  32  );<8 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.17.rkt

Completed writing to file ...
Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.17.rkt /tmp/test.ll
Storing synth log map synth_hash_17 to /tmp/hydride_hash_17.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_17 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 0)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 1)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64 0 128) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) (reg (bv #x1 4)) 256 32) 1)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_17.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t505, 1, 8) aligned(8, 0)] if (uint1x8)t504))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t508, 1, 8) aligned(8, 0)] if (uint1x8)t507))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1x8)t510, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8(((int32x8)multiplied[ramp(t513, 1, 8) aligned(8, 0)] if (uint1x8)t512))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8(((int32x8)multiplied[ramp(t516, 1, 8) aligned(8, 0)] if (uint1x8)t515))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t518))), x8(32767)), x8(-32768))), x8((int16)t519)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t510 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t518 maps to reg_7
t519 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 16.498058seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(x8(0 < output_shift), x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 17

Optimized expression: (int16x8)hydride.node.17((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], output_shift, x8(0 < output_shift), (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Hydride Function: declare <8 x i32> @hydride.node.0(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2038 = call <8 x i32> @hydride.node.0(<8 x i32> %1981, <8 x i8> %2031, i8 %filter_zero69, i16 %2037) #17
Hydride Function: declare <8 x i32> @hydride.node.1(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2107 = call <8 x i32> @hydride.node.1(<8 x i32> %2050, <8 x i8> %2100, i8 %filter_zero69, i16 %2106) #17
Hydride Function: declare <8 x i32> @hydride.node.2(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2177 = call <8 x i32> @hydride.node.2(<8 x i32> %2120, <8 x i8> %2170, i8 %filter_zero69, i16 %2176) #17
Hydride Function: declare <8 x i32> @hydride.node.3(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2247 = call <8 x i32> @hydride.node.3(<8 x i32> %2190, <8 x i8> %2240, i8 %filter_zero69, i16 %2246) #17
Hydride Function: declare <8 x i32> @hydride.node.4(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2317 = call <8 x i32> @hydride.node.4(<8 x i32> %2260, <8 x i8> %2310, i8 %filter_zero69, i16 %2316) #17
Hydride Function: declare <8 x i32> @hydride.node.5(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2387 = call <8 x i32> @hydride.node.5(<8 x i32> %2330, <8 x i8> %2380, i8 %filter_zero69, i16 %2386) #17
Hydride Function: declare <8 x i32> @hydride.node.6(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2457 = call <8 x i32> @hydride.node.6(<8 x i32> %2400, <8 x i8> %2450, i8 %filter_zero69, i16 %2456) #17
Hydride Function: declare <8 x i32> @hydride.node.7(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2527 = call <8 x i32> @hydride.node.7(<8 x i32> %2470, <8 x i8> %2520, i8 %filter_zero69, i16 %2526) #17
Hydride Function: declare <8 x i32> @hydride.node.8(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2597 = call <8 x i32> @hydride.node.8(<8 x i32> %2540, <8 x i8> %2590, i8 %filter_zero69, i16 %2596) #17
Hydride Function: declare <8 x i16> @hydride.node.9(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2632 = call <8 x i16> @hydride.node.9(<8 x i32> %2611, i32 %output_multiplier62, <8 x i32> %2616, i32 %output_shift63, <8 x i1> %2619, <8 x i32> %2624, <8 x i32> %2629, i32 %2630, i16 %2631) #17
Hydride Function: declare <8 x i16> @hydride.node.10(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2691 = call <8 x i16> @hydride.node.10(<8 x i32> %2667, i32 %output_multiplier62, <8 x i32> %2673, i32 %output_shift63, <8 x i1> %2676, <8 x i32> %2682, <8 x i32> %2688, i32 %2689, i16 %2690) #17
Hydride Function: declare <8 x i16> @hydride.node.11(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2750 = call <8 x i16> @hydride.node.11(<8 x i32> %2726, i32 %output_multiplier62, <8 x i32> %2732, i32 %output_shift63, <8 x i1> %2735, <8 x i32> %2741, <8 x i32> %2747, i32 %2748, i16 %2749) #17
Hydride Function: declare <8 x i16> @hydride.node.12(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2809 = call <8 x i16> @hydride.node.12(<8 x i32> %2785, i32 %output_multiplier62, <8 x i32> %2791, i32 %output_shift63, <8 x i1> %2794, <8 x i32> %2800, <8 x i32> %2806, i32 %2807, i16 %2808) #17
Hydride Function: declare <8 x i16> @hydride.node.13(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2868 = call <8 x i16> @hydride.node.13(<8 x i32> %2844, i32 %output_multiplier62, <8 x i32> %2850, i32 %output_shift63, <8 x i1> %2853, <8 x i32> %2859, <8 x i32> %2865, i32 %2866, i16 %2867) #17
Hydride Function: declare <8 x i16> @hydride.node.14(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2927 = call <8 x i16> @hydride.node.14(<8 x i32> %2903, i32 %output_multiplier62, <8 x i32> %2909, i32 %output_shift63, <8 x i1> %2912, <8 x i32> %2918, <8 x i32> %2924, i32 %2925, i16 %2926) #17
Hydride Function: declare <8 x i16> @hydride.node.15(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2986 = call <8 x i16> @hydride.node.15(<8 x i32> %2962, i32 %output_multiplier62, <8 x i32> %2968, i32 %output_shift63, <8 x i1> %2971, <8 x i32> %2977, <8 x i32> %2983, i32 %2984, i16 %2985) #17
Hydride Function: declare <8 x i16> @hydride.node.16(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %3045 = call <8 x i16> @hydride.node.16(<8 x i32> %3021, i32 %output_multiplier62, <8 x i32> %3027, i32 %output_shift63, <8 x i1> %3030, <8 x i32> %3036, <8 x i32> %3042, i32 %3043, i16 %3044) #17
Hydride Function: declare <8 x i16> @hydride.node.17(<8 x i32>, i32, <8 x i32>, i32, <8 x i1>, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %3104 = call <8 x i16> @hydride.node.17(<8 x i32> %3080, i32 %output_multiplier62, <8 x i32> %3086, i32 %output_shift63, <8 x i1> %3089, <8 x i32> %3095, <8 x i32> %3101, i32 %3102, i16 %3103) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'fully_connected' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
